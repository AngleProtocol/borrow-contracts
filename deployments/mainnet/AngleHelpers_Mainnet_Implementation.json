{
  "address": "0x4924E9740d317c58Edce2f02b4EF747Bc9046ed5",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BASE_PARAMS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CORE",
      "outputs": [
        {
          "internalType": "contract ICore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUTER",
      "outputs": [
        {
          "internalType": "contract IAngleRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STABLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "getCollateralAddresses",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "stableMaster",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "poolManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "perpetualManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sanToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "gauge",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeManager",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "strategies",
              "type": "address[]"
            }
          ],
          "internalType": "struct CollateralAddresses",
          "name": "addresses",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "getCollateralParameters",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "lastBlockUpdated",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lockedInterests",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxInterestsDistributed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "feesAside",
                  "type": "uint256"
                },
                {
                  "internalType": "uint64",
                  "name": "slippageFee",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "feesForSLPs",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "slippage",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "interestsForSLPs",
                  "type": "uint64"
                }
              ],
              "internalType": "struct SLPData",
              "name": "slpData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint64[]",
                  "name": "xFeeMint",
                  "type": "uint64[]"
                },
                {
                  "internalType": "uint64[]",
                  "name": "yFeeMint",
                  "type": "uint64[]"
                },
                {
                  "internalType": "uint64[]",
                  "name": "xFeeBurn",
                  "type": "uint64[]"
                },
                {
                  "internalType": "uint64[]",
                  "name": "yFeeBurn",
                  "type": "uint64[]"
                },
                {
                  "internalType": "uint64",
                  "name": "targetHAHedge",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "bonusMalusMint",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "bonusMalusBurn",
                  "type": "uint64"
                },
                {
                  "internalType": "uint256",
                  "name": "capOnStableMinted",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MintBurnData",
              "name": "feeData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint64[]",
                  "name": "xHAFeesDeposit",
                  "type": "uint64[]"
                },
                {
                  "internalType": "uint64[]",
                  "name": "yHAFeesDeposit",
                  "type": "uint64[]"
                },
                {
                  "internalType": "uint64[]",
                  "name": "xHAFeesWithdraw",
                  "type": "uint64[]"
                },
                {
                  "internalType": "uint64[]",
                  "name": "yHAFeesWithdraw",
                  "type": "uint64[]"
                },
                {
                  "internalType": "uint64",
                  "name": "haBonusMalusDeposit",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "haBonusMalusWithdraw",
                  "type": "uint64"
                }
              ],
              "internalType": "struct PerpetualManagerFeeData",
              "name": "perpFeeData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "maintenanceMargin",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "maxLeverage",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "targetHAHedge",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "limitHAHedge",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "lockTime",
                  "type": "uint64"
                }
              ],
              "internalType": "struct PerpetualManagerParamData",
              "name": "perpParam",
              "type": "tuple"
            }
          ],
          "internalType": "struct Parameters",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVaultManager",
          "name": "vaultManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "getControlledVaults",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "getPoolManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "poolManager",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStablecoinAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "agToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "previewBurnAndFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "agToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "previewMintAndFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe74480bd5fe74efd2a29693dd80b3e1a4a4e30e81569751391cd214241c4ff93",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0x4924E9740d317c58Edce2f02b4EF747Bc9046ed5",
    "transactionIndex": 251,
    "gasUsed": "2865595",
    "logsBloom": "0x
    "blockHash": "0xdfdd8b23200be307a661110997c7a34a2729970b9554ddf4f998440504688429",
    "transactionHash": "0xe74480bd5fe74efd2a29693dd80b3e1a4a4e30e81569751391cd214241c4ff93",
    "logs": [],
    "blockNumber": 15982031,
    "cumulativeGasUsed": "16411413",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e49dc14d7106b3ed7417bcbb86d3114c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BASE_PARAMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CORE\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"contract IAngleRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"getCollateralAddresses\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stableMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"perpetualManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeManager\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"strategies\",\"type\":\"address[]\"}],\"internalType\":\"struct CollateralAddresses\",\"name\":\"addresses\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"getCollateralParameters\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastBlockUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedInterests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxInterestsDistributed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feesAside\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"slippageFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"feesForSLPs\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"slippage\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"interestsForSLPs\",\"type\":\"uint64\"}],\"internalType\":\"struct SLPData\",\"name\":\"slpData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64[]\",\"name\":\"xFeeMint\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"yFeeMint\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"xFeeBurn\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"yFeeBurn\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"targetHAHedge\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"bonusMalusMint\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"bonusMalusBurn\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"capOnStableMinted\",\"type\":\"uint256\"}],\"internalType\":\"struct MintBurnData\",\"name\":\"feeData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64[]\",\"name\":\"xHAFeesDeposit\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"yHAFeesDeposit\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"xHAFeesWithdraw\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"yHAFeesWithdraw\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"haBonusMalusDeposit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"haBonusMalusWithdraw\",\"type\":\"uint64\"}],\"internalType\":\"struct PerpetualManagerFeeData\",\"name\":\"perpFeeData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"maintenanceMargin\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxLeverage\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"targetHAHedge\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"limitHAHedge\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lockTime\",\"type\":\"uint64\"}],\"internalType\":\"struct PerpetualManagerParamData\",\"name\":\"perpParam\",\"type\":\"tuple\"}],\"internalType\":\"struct Parameters\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVaultManager\",\"name\":\"vaultManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"getControlledVaults\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"getPoolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolManager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStablecoinAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"agToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"previewBurnAndFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"agToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"previewMintAndFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Labs, Inc.\",\"details\":\"This contract only contains view functions to be queried off-chain. It was thus not optimized for gas consumption\",\"kind\":\"dev\",\"methods\":{\"getCollateralAddresses(address,address)\":{\"returns\":{\"addresses\":\"A struct with all the addresses associated in the Core module\"}},\"getCollateralParameters(address,address)\":{\"details\":\"Check out the struct `Parameters` for the meaning of the return values\",\"returns\":{\"params\":\"Struct with most of the parameters in the `StableMaster` and `PerpetualManager` contracts\"}},\"getControlledVaults(address,address)\":{\"details\":\"This function is never to be called on-chain since it iterates over all vaultIDs. It is here to reduce dependency on an external graph to link an ID to its owner\",\"params\":{\"spender\":\"Address for which vault ownerships should be checked\",\"vaultManager\":\"VaultManager address to query vaultIDs on\"},\"returns\":{\"_0\":\"List of `vaultID` controlled by this address\",\"_1\":\"Count of vaults owned by the address\"}},\"getStablecoinAddresses()\":{\"details\":\"The place of an agToken address in the list is the same as the corresponding `StableMaster` address\",\"returns\":{\"_0\":\"List of the `StableMaster` addresses of the Angle protocol\",\"_1\":\"List of the `AgToken` addresses of the protocol\"}},\"previewBurnAndFees(uint256,address,address)\":{\"details\":\"This function reverts if the burn transaction was to revert in the same conditions (without taking into account potential approval problems to the `StableMaster` contract or agToken balance prior to the call)\",\"returns\":{\"_0\":\"Amount of `collateral` that would be obtained with a burn transaction in the same block\",\"_1\":\"Percentage of fees that would be taken during a burn transaction in the same block\"}},\"previewMintAndFees(uint256,address,address)\":{\"details\":\"This function reverts if the mint transaction was to revert in the same conditions (without taking into account potential approval problems to the `StableMaster` contract)\",\"returns\":{\"_0\":\"Amount of `agToken` that would be obtained with a mint transaction in the same block\",\"_1\":\"Percentage of fees that would be taken during a mint transaction in the same block\"}}},\"title\":\"AngleHelpers\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getCollateralAddresses(address,address)\":{\"notice\":\"Returns all the addresses associated to the (`agToken`,`collateral`) pair given\"},\"getCollateralParameters(address,address)\":{\"notice\":\"Returns most of the governance parameters associated to the (`agToken`,`collateral`) pair given\"},\"getControlledVaults(address,address)\":{\"notice\":\"Returns all the vaults owned or controlled (under the form of approval) by an address\"},\"getPoolManager(address,address)\":{\"notice\":\"Returns the address of the poolManager associated to an (`agToken`, `collateral`) pair in the Core module of the protocol\"},\"getStablecoinAddresses()\":{\"notice\":\"Gets the addresses of all the `StableMaster` contracts and their associated `AgToken` addresses\"},\"previewBurnAndFees(uint256,address,address)\":{\"notice\":\"Gives the amount of `collateral` you'd be getting if you were executing in the same block a burn transaction  with `amount` of `agToken` in the Core module of the Angle protocol as well as the value of the fees (in `BASE_PARAMS`) that would be applied during the burn\"},\"previewMintAndFees(uint256,address,address)\":{\"notice\":\"Gives the amount of `agToken` you'd be getting if you were executing in the same block a mint transaction with `amount` of `collateral` in the Core module of the Angle protocol as well as the value of the fees (in `BASE_PARAMS`) that would be applied during the mint\"}},\"notice\":\"Contract with view functions designed to facilitate integrations on the Core and Borrow module of the Angle Protocol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ui-helpers/AngleHelpers.sol\":\"AngleHelpers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\",\"keccak256\":\"0x1e88abdf82fcbbf98f97be17ea56c924376350637896bc37366ec9f89b7c2628\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/IAgToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title IAgToken\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the stablecoins `AgToken` contracts\\n/// @dev This interface only contains functions of the `AgToken` contract which are called by other contracts\\n/// of this module or of the first module of the Angle Protocol\\ninterface IAgToken is IERC20Upgradeable {\\n    // ======================= Minter Role Only Functions ===========================\\n\\n    /// @notice Lets the `StableMaster` contract or another whitelisted contract mint agTokens\\n    /// @param account Address to mint to\\n    /// @param amount Amount to mint\\n    /// @dev The contracts allowed to issue agTokens are the `StableMaster` contract, `VaultManager` contracts\\n    /// associated to this stablecoin as well as the flash loan module (if activated) and potentially contracts\\n    /// whitelisted by governance\\n    function mint(address account, uint256 amount) external;\\n\\n    /// @notice Burns `amount` tokens from a `burner` address after being asked to by `sender`\\n    /// @param amount Amount of tokens to burn\\n    /// @param burner Address to burn from\\n    /// @param sender Address which requested the burn from `burner`\\n    /// @dev This method is to be called by a contract with the minter right after being requested\\n    /// to do so by a `sender` address willing to burn tokens from another `burner` address\\n    /// @dev The method checks the allowance between the `sender` and the `burner`\\n    function burnFrom(\\n        uint256 amount,\\n        address burner,\\n        address sender\\n    ) external;\\n\\n    /// @notice Burns `amount` tokens from a `burner` address\\n    /// @param amount Amount of tokens to burn\\n    /// @param burner Address to burn from\\n    /// @dev This method is to be called by a contract with a minter right on the AgToken after being\\n    /// requested to do so by an address willing to burn tokens from its address\\n    function burnSelf(uint256 amount, address burner) external;\\n\\n    // ========================= Treasury Only Functions ===========================\\n\\n    /// @notice Adds a minter in the contract\\n    /// @param minter Minter address to add\\n    /// @dev Zero address checks are performed directly in the `Treasury` contract\\n    function addMinter(address minter) external;\\n\\n    /// @notice Removes a minter from the contract\\n    /// @param minter Minter address to remove\\n    /// @dev This function can also be called by a minter wishing to revoke itself\\n    function removeMinter(address minter) external;\\n\\n    /// @notice Sets a new treasury contract\\n    /// @param _treasury New treasury address\\n    function setTreasury(address _treasury) external;\\n\\n    // ========================= External functions ================================\\n\\n    /// @notice Checks whether an address has the right to mint agTokens\\n    /// @param minter Address for which the minting right should be checked\\n    /// @return Whether the address has the right to mint agTokens or not\\n    function isMinter(address minter) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb3b6048f7db45f309edca9f489816e5ab5ba134bd07620583e6c9f4c841d4ce4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAngleRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title IAngleRouter\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the `AngleRouter` contract\\n/// @dev This interface only contains functions of the `AngleRouter01` contract which are called by other contracts\\n/// of this module\\ninterface IAngleRouter {\\n    function mint(\\n        address user,\\n        uint256 amount,\\n        uint256 minStableAmount,\\n        address stablecoin,\\n        address collateral\\n    ) external;\\n\\n    function burn(\\n        address user,\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        address stablecoin,\\n        address collateral\\n    ) external;\\n\\n    function mapPoolManagers(address stableMaster, address collateral)\\n        external\\n        view\\n        returns (\\n            address poolManager,\\n            address perpetualManager,\\n            address sanToken,\\n            address gauge\\n        );\\n}\\n\",\"keccak256\":\"0x39edc2a8e722c0d8887921055db33fe79c797260b7e19ab87f4ee689e7547c79\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICoreBorrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\n/// @title ICoreBorrow\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the `CoreBorrow` contract\\n/// @dev This interface only contains functions of the `CoreBorrow` contract which are called by other contracts\\n/// of this module\\ninterface ICoreBorrow {\\n    /// @notice Checks if an address corresponds to a treasury of a stablecoin with a flash loan\\n    /// module initialized on it\\n    /// @param treasury Address to check\\n    /// @return Whether the address has the `FLASHLOANER_TREASURY_ROLE` or not\\n    function isFlashLoanerTreasury(address treasury) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GOVERNOR_ROLE` or not\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor or a guardian of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GUARDIAN_ROLE` or not\\n    /// @dev Governance should make sure when adding a governor to also give this governor the guardian\\n    /// role by calling the `addGovernor` function\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4d4c73fc88932bc16964dc228cda336491275a5421eef9828f6e729ddec6e675\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFlashAngle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IAgToken.sol\\\";\\nimport \\\"./ICoreBorrow.sol\\\";\\n\\n/// @title IFlashAngle\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the `FlashAngle` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module\\ninterface IFlashAngle {\\n    /// @notice Reference to the `CoreBorrow` contract managing the FlashLoan module\\n    function core() external view returns (ICoreBorrow);\\n\\n    /// @notice Sends the fees taken from flash loans to the treasury contract associated to the stablecoin\\n    /// @param stablecoin Stablecoin from which profits should be sent\\n    /// @return balance Amount of profits sent\\n    /// @dev This function can only be called by the treasury contract\\n    function accrueInterestToTreasury(IAgToken stablecoin) external returns (uint256 balance);\\n\\n    /// @notice Adds support for a stablecoin\\n    /// @param _treasury Treasury associated to the stablecoin to add support for\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function addStablecoinSupport(address _treasury) external;\\n\\n    /// @notice Removes support for a stablecoin\\n    /// @param _treasury Treasury associated to the stablecoin to remove support for\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function removeStablecoinSupport(address _treasury) external;\\n\\n    /// @notice Sets a new core contract\\n    /// @param _core Core contract address to set\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function setCore(address _core) external;\\n}\\n\",\"keccak256\":\"0xa924c798f027623a7868d736c205269daa1d22c65ba7f2b61e99739f6d878198\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./ITreasury.sol\\\";\\n\\n/// @title IOracle\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the `Oracle` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module\\ninterface IOracle {\\n    /// @notice Reads the rate from the Chainlink circuit and other data provided\\n    /// @return quoteAmount The current rate between the in-currency and out-currency in the base\\n    /// of the out currency\\n    /// @dev For instance if the out currency is EUR (and hence agEUR), then the base of the returned\\n    /// value is 10**18\\n    function read() external view returns (uint256);\\n\\n    /// @notice Changes the treasury contract\\n    /// @param _treasury Address of the new treasury contract\\n    /// @dev This function can be called by an approved `VaultManager` contract which can call\\n    /// this function after being requested to do so by a `treasury` contract\\n    /// @dev In some situations (like reactor contracts), the `VaultManager` may not directly be linked\\n    /// to the `oracle` contract and as such we may need governors to be able to call this function as well\\n    function setTreasury(address _treasury) external;\\n\\n    /// @notice Reference to the `treasury` contract handling this `VaultManager`\\n    function treasury() external view returns (ITreasury treasury);\\n}\\n\",\"keccak256\":\"0xeca9b968077bb610c9cd22430251bbf8adbe84144701e46760e379d07cac53ce\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IAgToken.sol\\\";\\nimport \\\"./ICoreBorrow.sol\\\";\\nimport \\\"./IFlashAngle.sol\\\";\\n\\n/// @title ITreasury\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the `Treasury` contract\\n/// @dev This interface only contains functions of the `Treasury` which are called by other contracts\\n/// of this module\\ninterface ITreasury {\\n    /// @notice Stablecoin handled by this `treasury` contract\\n    function stablecoin() external view returns (IAgToken);\\n\\n    /// @notice Checks whether a given address has the  governor role\\n    /// @param admin Address to check\\n    /// @return Whether the address has the governor role\\n    /// @dev Access control is only kept in the `CoreBorrow` contract\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether a given address has the guardian or the governor role\\n    /// @param admin Address to check\\n    /// @return Whether the address has the guardian or the governor role\\n    /// @dev Access control is only kept in the `CoreBorrow` contract which means that this function\\n    /// queries the `CoreBorrow` contract\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether a given address has well been initialized in this contract\\n    /// as a `VaultManager`\\n    /// @param _vaultManager Address to check\\n    /// @return Whether the address has been initialized or not\\n    function isVaultManager(address _vaultManager) external view returns (bool);\\n\\n    /// @notice Sets a new flash loan module for this stablecoin\\n    /// @param _flashLoanModule Reference to the new flash loan module\\n    /// @dev This function removes the minting right to the old flash loan module and grants\\n    /// it to the new module\\n    function setFlashLoanModule(address _flashLoanModule) external;\\n}\\n\",\"keccak256\":\"0xca954781dfb4a6a8f0bc6f9878e7533b90e77016fd5fdef96047b77dc421a245\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\n// ========================= Key Structs and Enums =============================\\n\\n/// @notice Parameters associated to a given `VaultManager` contract: these all correspond\\n/// to parameters which signification is detailed in the `VaultManagerStorage` file\\nstruct VaultParameters {\\n    uint256 debtCeiling;\\n    uint64 collateralFactor;\\n    uint64 targetHealthFactor;\\n    uint64 interestRate;\\n    uint64 liquidationSurcharge;\\n    uint64 maxLiquidationDiscount;\\n    bool whitelistingActivated;\\n    uint256 baseBoost;\\n}\\n\\n/// @notice Data stored to track someone's loan (or equivalently called position)\\nstruct Vault {\\n    // Amount of collateral deposited in the vault, in collateral decimals. For example, if the collateral\\n    // is USDC with 6 decimals, then `collateralAmount` will be in base 10**6\\n    uint256 collateralAmount;\\n    // Normalized value of the debt (that is to say of the stablecoins borrowed). It is expressed\\n    // in the base of Angle stablecoins (i.e. `BASE_TOKENS = 10**18`)\\n    uint256 normalizedDebt;\\n}\\n\\n/// @notice For a given `vaultID`, this encodes a liquidation opportunity that is to say details about the maximum\\n/// amount that could be repaid by liquidating the position\\n/// @dev All the values are null in the case of a vault which cannot be liquidated under these conditions\\nstruct LiquidationOpportunity {\\n    // Maximum stablecoin amount that can be repaid upon liquidating the vault\\n    uint256 maxStablecoinAmountToRepay;\\n    // Collateral amount given to the person in the case where the maximum amount to repay is given\\n    uint256 maxCollateralAmountGiven;\\n    // Threshold value of stablecoin amount to repay: it is ok for a liquidator to repay below threshold,\\n    // but if this threshold is non null and the liquidator wants to repay more than threshold, it should repay\\n    // the max stablecoin amount given in this vault\\n    uint256 thresholdRepayAmount;\\n    // Discount proposed to the liquidator on the collateral\\n    uint256 discount;\\n    // Amount of debt in the vault\\n    uint256 currentDebt;\\n}\\n\\n/// @notice Data stored during a liquidation process to keep in memory what's due to a liquidator and some\\n/// essential data for vaults being liquidated\\nstruct LiquidatorData {\\n    // Current amount of stablecoins the liquidator should give to the contract\\n    uint256 stablecoinAmountToReceive;\\n    // Current amount of collateral the contract should give to the liquidator\\n    uint256 collateralAmountToGive;\\n    // Bad debt accrued across the liquidation process\\n    uint256 badDebtFromLiquidation;\\n    // Oracle value (in stablecoin base) at the time of the liquidation\\n    uint256 oracleValue;\\n    // Value of the `interestAccumulator` at the time of the call\\n    uint256 newInterestAccumulator;\\n}\\n\\n/// @notice Data to track during a series of action the amount to give or receive in stablecoins and collateral\\n/// to the caller or associated addresses\\nstruct PaymentData {\\n    // Stablecoin amount the contract should give\\n    uint256 stablecoinAmountToGive;\\n    // Stablecoin amount owed to the contract\\n    uint256 stablecoinAmountToReceive;\\n    // Collateral amount the contract should give\\n    uint256 collateralAmountToGive;\\n    // Collateral amount owed to the contract\\n    uint256 collateralAmountToReceive;\\n}\\n\\n/// @notice Actions possible when composing calls to the different entry functions proposed\\nenum ActionType {\\n    createVault,\\n    closeVault,\\n    addCollateral,\\n    removeCollateral,\\n    repayDebt,\\n    borrow,\\n    getDebtIn,\\n    permit\\n}\\n\\n// ========================= Interfaces =============================\\n\\n/// @title IVaultManagerFunctions\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the `VaultManager` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module (without getters)\\ninterface IVaultManagerFunctions {\\n    /// @notice Accrues interest accumulated across all vaults to the surplus and sends the surplus to the treasury\\n    /// @return surplusValue Value of the surplus communicated to the `Treasury`\\n    /// @return badDebtValue Value of the bad debt communicated to the `Treasury`\\n    /// @dev `surplus` and `badDebt` should be reset to 0 once their current value have been given to the `treasury` contract\\n    function accrueInterestToTreasury() external returns (uint256 surplusValue, uint256 badDebtValue);\\n\\n    /// @notice Removes debt from a vault after being requested to do so by another `VaultManager` contract\\n    /// @param vaultID ID of the vault to remove debt from\\n    /// @param amountStablecoins Amount of stablecoins to remove from the debt: this amount is to be converted to an\\n    /// internal debt amount\\n    /// @param senderBorrowFee Borrowing fees from the contract which requested this: this is to make sure that people are not\\n    /// arbitraging difference in minting fees\\n    /// @param senderRepayFee Repay fees from the contract which requested this: this is to make sure that people are not arbitraging\\n    /// differences in repay fees\\n    /// @dev This function can only be called from a vaultManager registered in the same Treasury\\n    function getDebtOut(\\n        uint256 vaultID,\\n        uint256 amountStablecoins,\\n        uint256 senderBorrowFee,\\n        uint256 senderRepayFee\\n    ) external;\\n\\n    /// @notice Gets the current debt of a vault\\n    /// @param vaultID ID of the vault to check\\n    /// @return Debt of the vault\\n    function getVaultDebt(uint256 vaultID) external view returns (uint256);\\n\\n    /// @notice Gets the total debt across all vaults\\n    /// @return Total debt across all vaults, taking into account the interest accumulated\\n    /// over time\\n    function getTotalDebt() external view returns (uint256);\\n\\n    /// @notice Sets the treasury contract\\n    /// @param _treasury New treasury contract\\n    /// @dev All required checks when setting up a treasury contract are performed in the contract\\n    /// calling this function\\n    function setTreasury(address _treasury) external;\\n\\n    /// @notice Creates a vault\\n    /// @param toVault Address for which the va\\n    /// @return vaultID ID of the vault created\\n    /// @dev This function just creates the vault without doing any collateral or\\n    function createVault(address toVault) external returns (uint256);\\n\\n    /// @notice Allows composability between calls to the different entry points of this module. Any user calling\\n    /// this function can perform any of the allowed actions in the order of their choice\\n    /// @param actions Set of actions to perform\\n    /// @param datas Data to be decoded for each action: it can include like the `vaultID` or the `stablecoinAmount` to borrow\\n    /// @param from Address from which stablecoins will be taken if one action includes burning stablecoins. This address\\n    /// should either be the `msg.sender` or be approved by the latter\\n    /// @param to Address to which stablecoins and/or collateral will be sent in case of\\n    /// @param who Address of the contract to handle in case of repayment of stablecoins from received collateral\\n    /// @param repayData Data to pass to the repayment contract in case of\\n    /// @return paymentData Struct containing the accounting changes from the protocol's perspective (like how much of collateral\\n    /// or how much has been received). Note that the values in the struct are not aggregated and you could have in the output\\n    /// a positive amount of stablecoins to receive as well as a positive amount of stablecoins to give\\n    /// @dev This function is optimized to reduce gas cost due to payment from or to the user and that expensive calls\\n    /// or computations (like `oracleValue`) are done only once\\n    /// @dev When specifying `vaultID` in `data`, it is important to know that if you specify `vaultID = 0`, it will simply\\n    /// use the latest `vaultID`. This is the default behavior, and unless you're engaging into some complex protocol actions\\n    /// it is encouraged to use `vaultID = 0` only when the first action of the batch is `createVault`\\n    function angle(\\n        ActionType[] memory actions,\\n        bytes[] memory datas,\\n        address from,\\n        address to,\\n        address who,\\n        bytes memory repayData\\n    ) external returns (PaymentData memory paymentData);\\n\\n    /// @notice This function is a wrapper built on top of the function above. It enables users to interact with the contract\\n    /// without having to provide `who` and `repayData` parameters\\n    function angle(\\n        ActionType[] memory actions,\\n        bytes[] memory datas,\\n        address from,\\n        address to\\n    ) external returns (PaymentData memory paymentData);\\n\\n    /// @notice Initializes the `VaultManager` contract\\n    /// @param _treasury Treasury address handling the contract\\n    /// @param _collateral Collateral supported by this contract\\n    /// @param _oracle Oracle contract used\\n    /// @param _symbol Symbol used to define the `VaultManager` name and symbol\\n    /// @dev The parameters and the oracle are the only elements which could be modified once the\\n    /// contract has been initialized\\n    /// @dev For the contract to be fully initialized, governance needs to set the parameters for the liquidation\\n    /// boost\\n    function initialize(\\n        ITreasury _treasury,\\n        IERC20 _collateral,\\n        IOracle _oracle,\\n        VaultParameters calldata params,\\n        string memory _symbol\\n    ) external;\\n}\\n\\n/// @title IVaultManagerStorage\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the `VaultManager` contract\\n/// @dev This interface contains getters of the contract's public variables used by other contracts\\n/// of this module\\ninterface IVaultManagerStorage {\\n    /// @notice Minimum amount of debt a vault can have, expressed in `BASE_TOKENS` that is to say the base of the agTokens\\n    function dust() external view returns (uint256);\\n\\n    /// @notice Encodes the maximum ratio stablecoin/collateral a vault can have before being liquidated. It's what\\n    /// determines the minimum collateral ratio of a position\\n    function collateralFactor() external view returns (uint64);\\n\\n    /// @notice Stablecoin handled by this contract. Another `VaultManager` contract could have\\n    /// the same rights as this `VaultManager` on the stablecoin contract\\n    function stablecoin() external view returns (IAgToken);\\n\\n    /// @notice Reference to the `treasury` contract handling this `VaultManager`\\n    function treasury() external view returns (ITreasury);\\n\\n    /// @notice Oracle contract to get access to the price of the collateral with respect to the stablecoin\\n    function oracle() external view returns (IOracle);\\n\\n    /// @notice The `interestAccumulator` variable keeps track of the interest that should accrue to the protocol.\\n    /// The stored value is not necessarily the true value: this one is recomputed every time an action takes place\\n    /// within the protocol. It is in base `BASE_INTEREST`\\n    function interestAccumulator() external view returns (uint256);\\n\\n    /// @notice Reference to the collateral handled by this `VaultManager`\\n    function collateral() external view returns (IERC20);\\n\\n    /// @notice Total normalized amount of stablecoins borrowed, not taking into account the potential bad debt accumulated\\n    /// This value is expressed in the base of Angle stablecoins (`BASE_TOKENS = 10**18`)\\n    function totalNormalizedDebt() external view returns (uint256);\\n\\n    /// @notice Maximum amount of stablecoins that can be issued with this contract. It is expressed in `BASE_TOKENS`\\n    function debtCeiling() external view returns (uint256);\\n\\n    /// @notice Maps a `vaultID` to its data (namely collateral amount and normalized debt)\\n    function vaultData(uint256 vaultID) external view returns (uint256 collateralAmount, uint256 normalizedDebt);\\n\\n    /// @notice ID of the last vault created. The `vaultIDCount` variables serves as a counter to generate a unique\\n    /// `vaultID` for each vault: it is like `tokenID` in basic ERC721 contracts\\n    function vaultIDCount() external view returns (uint256);\\n}\\n\\n/// @title IVaultManager\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the `VaultManager` contract\\ninterface IVaultManager is IVaultManagerFunctions, IVaultManagerStorage, IERC721Metadata {\\n    function isApprovedOrOwner(address spender, uint256 vaultID) external view returns (bool);\\n}\\n\\n/// @title IVaultManagerListing\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the `VaultManagerListing` contract\\ninterface IVaultManagerListing is IVaultManager {\\n    /// @notice Get the collateral owned by `user` in the contract\\n    /// @dev This function effectively sums the collateral amounts of all the vaults owned by `user`\\n    function getUserCollateral(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf41a2eb76b8de100912ca5a844c4e7857fb0d92a03afd6d6299c105ef2786d13\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/coreModule/IAgTokenMainnet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title IAgTokenMainnet\\n/// @author Angle Labs, Inc.\\ninterface IAgTokenMainnet {\\n    function stableMaster() external view returns (address);\\n}\\n\",\"keccak256\":\"0x75788b74968d2b23e19c0486ff68cb54735c2707001b6aa449c1eaad543533c3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/coreModule/ICore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title ICore\\n/// @author Angle Labs, Inc.\\ninterface ICore {\\n    function stablecoinList() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xba68b0b85032768fbe73c7909ceccc9bbaf4866118aa0160e25354daedcff7cc\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/coreModule/IOracleCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title IOracleCore\\n/// @author Angle Labs, Inc.\\ninterface IOracleCore {\\n    function readUpper() external view returns (uint256);\\n\\n    function readQuoteLower(uint256 baseAmount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x090edd176d7d9ebb3f45028ad3e4b5187adec1dc8aa722d7cf0a10e5ff617ed7\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/coreModule/IPerpetualManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title IPerpetualManager\\n/// @author Angle Labs, Inc.\\ninterface IPerpetualManager {\\n    function totalHedgeAmount() external view returns (uint256);\\n\\n    function maintenanceMargin() external view returns (uint64);\\n\\n    function maxLeverage() external view returns (uint64);\\n\\n    function targetHAHedge() external view returns (uint64);\\n\\n    function limitHAHedge() external view returns (uint64);\\n\\n    function lockTime() external view returns (uint64);\\n\\n    function haBonusMalusDeposit() external view returns (uint64);\\n\\n    function haBonusMalusWithdraw() external view returns (uint64);\\n\\n    function xHAFeesDeposit(uint256) external view returns (uint64);\\n\\n    function yHAFeesDeposit(uint256) external view returns (uint64);\\n\\n    function xHAFeesWithdraw(uint256) external view returns (uint64);\\n\\n    function yHAFeesWithdraw(uint256) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x9be94a9a4cb81f8df99a94414c0eb340b327a35004182a461d15322e74163377\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/coreModule/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title IPoolManager\\n/// @author Angle Labs, Inc.\\ninterface IPoolManager {\\n    function feeManager() external view returns (address);\\n\\n    function strategyList(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0x816c34988a8a890a64d6931f2b8b2bf0a9f53476e12362747abb3b057d5fe088\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/coreModule/IStableMaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"./IPerpetualManager.sol\\\";\\nimport \\\"./IOracleCore.sol\\\";\\n\\n// Struct to handle all the parameters to manage the fees\\n// related to a given collateral pool (associated to the stablecoin)\\nstruct MintBurnData {\\n    // Values of the thresholds to compute the minting fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeMint;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeMint;\\n    // Values of the thresholds to compute the burning fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeBurn;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeBurn;\\n    // Max proportion of collateral from users that can be covered by HAs\\n    // It is exactly the same as the parameter of the same name in `PerpetualManager`, whenever one is updated\\n    // the other changes accordingly\\n    uint64 targetHAHedge;\\n    // Minting fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusMint;\\n    // Burning fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusBurn;\\n    // Parameter used to limit the number of stablecoins that can be issued using the concerned collateral\\n    uint256 capOnStableMinted;\\n}\\n\\n// Struct to handle all the variables and parameters to handle SLPs in the protocol\\n// including the fraction of interests they receive or the fees to be distributed to\\n// them\\nstruct SLPData {\\n    // Last timestamp at which the `sanRate` has been updated for SLPs\\n    uint256 lastBlockUpdated;\\n    // Fees accumulated from previous blocks and to be distributed to SLPs\\n    uint256 lockedInterests;\\n    // Max interests used to update the `sanRate` in a single block\\n    // Should be in collateral token base\\n    uint256 maxInterestsDistributed;\\n    // Amount of fees left aside for SLPs and that will be distributed\\n    // when the protocol is collateralized back again\\n    uint256 feesAside;\\n    // Part of the fees normally going to SLPs that is left aside\\n    // before the protocol is collateralized back again (depends on collateral ratio)\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippageFee;\\n    // Portion of the fees from users minting and burning\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 feesForSLPs;\\n    // Slippage factor that's applied to SLPs exiting (depends on collateral ratio)\\n    // If `slippage = BASE_PARAMS`, SLPs can get nothing, if `slippage = 0` they get their full claim\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippage;\\n    // Portion of the interests from lending\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 interestsForSLPs;\\n}\\n\\n/// @title IStableMaster\\n/// @author Angle Labs, Inc.\\ninterface IStableMaster {\\n    function agToken() external view returns (address);\\n\\n    function updateStocksUsers(uint256 amount, address poolManager) external;\\n\\n    function collateralMap(address poolManager)\\n        external\\n        view\\n        returns (\\n            address token,\\n            address sanToken,\\n            IPerpetualManager perpetualManager,\\n            IOracleCore oracle,\\n            uint256 stocksUsers,\\n            uint256 sanRate,\\n            uint256 collatBase,\\n            SLPData memory slpData,\\n            MintBurnData memory feeData\\n        );\\n\\n    function paused(bytes32) external view returns (bool);\\n\\n    function deposit(\\n        uint256 amount,\\n        address user,\\n        address poolManager\\n    ) external;\\n\\n    function withdraw(\\n        uint256 amount,\\n        address burner,\\n        address dest,\\n        address poolManager\\n    ) external;\\n}\\n\",\"keccak256\":\"0x00bd57d79a8c5e1001842481a371108495e120e4b2461423e1386338971cb256\",\"license\":\"GPL-3.0\"},\"contracts/ui-helpers/AngleBorrowHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IVaultManager.sol\\\";\\n\\npragma solidity 0.8.12;\\n\\n/// @title AngleBorrowHelpers\\n/// @author Angle Labs, Inc.\\n/// @notice Contract with view functions designed to facilitate integrations on the Borrow module of the Angle Protocol\\n/// @dev This contract only contains view functions to be queried off-chain. It was thus not optimized for gas consumption\\ncontract AngleBorrowHelpers is Initializable {\\n    /// @notice Returns all the vaults owned or controlled (under the form of approval) by an address\\n    /// @param vaultManager VaultManager address to query vaultIDs on\\n    /// @param spender Address for which vault ownerships should be checked\\n    /// @return List of `vaultID` controlled by this address\\n    /// @return Count of vaults owned by the address\\n    /// @dev This function is never to be called on-chain since it iterates over all vaultIDs. It is here\\n    /// to reduce dependency on an external graph to link an ID to its owner\\n    function getControlledVaults(IVaultManager vaultManager, address spender)\\n        external\\n        view\\n        returns (uint256[] memory, uint256)\\n    {\\n        uint256 arraySize = vaultManager.vaultIDCount();\\n        uint256[] memory vaultsControlled = new uint256[](arraySize);\\n        uint256 count;\\n        for (uint256 i = 1; i <= arraySize; i++) {\\n            try vaultManager.isApprovedOrOwner(spender, i) returns (bool _isApprovedOrOwner) {\\n                if (_isApprovedOrOwner) {\\n                    vaultsControlled[count] = i;\\n                    count += 1;\\n                }\\n            } catch {\\n                continue;\\n            } // This happens if nobody owns the vaultID=i (if there has been a burn)\\n        }\\n        return (vaultsControlled, count);\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n}\\n\",\"keccak256\":\"0xea31ab99db4436bbb5092d155dc9ce9aa85e296f7238497f3f5715d23162e2f0\",\"license\":\"GPL-3.0\"},\"contracts/ui-helpers/AngleHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\nimport \\\"../interfaces/IAngleRouter.sol\\\";\\nimport \\\"../interfaces/coreModule/IAgTokenMainnet.sol\\\";\\nimport \\\"../interfaces/coreModule/ICore.sol\\\";\\nimport \\\"../interfaces/coreModule/IOracleCore.sol\\\";\\nimport \\\"../interfaces/coreModule/IPerpetualManager.sol\\\";\\nimport \\\"../interfaces/coreModule/IPoolManager.sol\\\";\\nimport \\\"../interfaces/coreModule/IStableMaster.sol\\\";\\nimport \\\"./AngleBorrowHelpers.sol\\\";\\n\\npragma solidity 0.8.12;\\n\\nstruct Parameters {\\n    SLPData slpData;\\n    MintBurnData feeData;\\n    PerpetualManagerFeeData perpFeeData;\\n    PerpetualManagerParamData perpParam;\\n}\\n\\nstruct PerpetualManagerFeeData {\\n    uint64[] xHAFeesDeposit;\\n    uint64[] yHAFeesDeposit;\\n    uint64[] xHAFeesWithdraw;\\n    uint64[] yHAFeesWithdraw;\\n    uint64 haBonusMalusDeposit;\\n    uint64 haBonusMalusWithdraw;\\n}\\n\\nstruct PerpetualManagerParamData {\\n    uint64 maintenanceMargin;\\n    uint64 maxLeverage;\\n    uint64 targetHAHedge;\\n    uint64 limitHAHedge;\\n    uint64 lockTime;\\n}\\n\\nstruct CollateralAddresses {\\n    address stableMaster;\\n    address poolManager;\\n    address perpetualManager;\\n    address sanToken;\\n    address oracle;\\n    address gauge;\\n    address feeManager;\\n    address[] strategies;\\n}\\n\\n/// @title AngleHelpers\\n/// @author Angle Labs, Inc.\\n/// @notice Contract with view functions designed to facilitate integrations on the Core and Borrow module of the Angle Protocol\\n/// @dev This contract only contains view functions to be queried off-chain. It was thus not optimized for gas consumption\\ncontract AngleHelpers is AngleBorrowHelpers {\\n    // =========================== HELPER VIEW FUNCTIONS ===========================\\n\\n    /// @notice Gives the amount of `agToken` you'd be getting if you were executing in the same block a mint transaction\\n    /// with `amount` of `collateral` in the Core module of the Angle protocol as well as the value of the fees\\n    /// (in `BASE_PARAMS`) that would be applied during the mint\\n    /// @return Amount of `agToken` that would be obtained with a mint transaction in the same block\\n    /// @return Percentage of fees that would be taken during a mint transaction in the same block\\n    /// @dev This function reverts if the mint transaction was to revert in the same conditions (without taking into account\\n    /// potential approval problems to the `StableMaster` contract)\\n    function previewMintAndFees(\\n        uint256 amount,\\n        address agToken,\\n        address collateral\\n    ) external view returns (uint256, uint256) {\\n        return _previewMintAndFees(amount, agToken, collateral);\\n    }\\n\\n    /// @notice Gives the amount of `collateral` you'd be getting if you were executing in the same block a burn transaction\\n    ///  with `amount` of `agToken` in the Core module of the Angle protocol as well as the value of the fees\\n    /// (in `BASE_PARAMS`) that would be applied during the burn\\n    /// @return Amount of `collateral` that would be obtained with a burn transaction in the same block\\n    /// @return Percentage of fees that would be taken during a burn transaction in the same block\\n    /// @dev This function reverts if the burn transaction was to revert in the same conditions (without taking into account\\n    /// potential approval problems to the `StableMaster` contract or agToken balance prior to the call)\\n    function previewBurnAndFees(\\n        uint256 amount,\\n        address agToken,\\n        address collateral\\n    ) external view returns (uint256, uint256) {\\n        return _previewBurnAndFees(amount, agToken, collateral);\\n    }\\n\\n    /// @notice Returns all the addresses associated to the (`agToken`,`collateral`) pair given\\n    /// @return addresses A struct with all the addresses associated in the Core module\\n    function getCollateralAddresses(address agToken, address collateral)\\n        external\\n        view\\n        returns (CollateralAddresses memory addresses)\\n    {\\n        address stableMaster = IAgTokenMainnet(agToken).stableMaster();\\n        (address poolManager, address perpetualManager, address sanToken, address gauge) = ROUTER.mapPoolManagers(\\n            stableMaster,\\n            collateral\\n        );\\n        (, , , IOracleCore oracle, , , , , ) = IStableMaster(stableMaster).collateralMap(poolManager);\\n        addresses.stableMaster = stableMaster;\\n        addresses.poolManager = poolManager;\\n        addresses.perpetualManager = perpetualManager;\\n        addresses.sanToken = sanToken;\\n        addresses.gauge = gauge;\\n        addresses.oracle = address(oracle);\\n        addresses.feeManager = IPoolManager(poolManager).feeManager();\\n\\n        uint256 length = 0;\\n        while (true) {\\n            try IPoolManager(poolManager).strategyList(length) returns (address) {\\n                length += 1;\\n            } catch {\\n                break;\\n            }\\n        }\\n        address[] memory strategies = new address[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            strategies[i] = IPoolManager(poolManager).strategyList(i);\\n        }\\n        addresses.strategies = strategies;\\n    }\\n\\n    /// @notice Gets the addresses of all the `StableMaster` contracts and their associated `AgToken` addresses\\n    /// @return List of the `StableMaster` addresses of the Angle protocol\\n    /// @return List of the `AgToken` addresses of the protocol\\n    /// @dev The place of an agToken address in the list is the same as the corresponding `StableMaster` address\\n    function getStablecoinAddresses() external view returns (address[] memory, address[] memory) {\\n        address[] memory stableMasterAddresses = CORE.stablecoinList();\\n        address[] memory agTokenAddresses = new address[](stableMasterAddresses.length);\\n        for (uint256 i = 0; i < stableMasterAddresses.length; ++i) {\\n            agTokenAddresses[i] = IStableMaster(stableMasterAddresses[i]).agToken();\\n        }\\n        return (stableMasterAddresses, agTokenAddresses);\\n    }\\n\\n    /// @notice Returns most of the governance parameters associated to the (`agToken`,`collateral`) pair given\\n    /// @return params Struct with most of the parameters in the `StableMaster` and `PerpetualManager` contracts\\n    /// @dev Check out the struct `Parameters` for the meaning of the return values\\n    function getCollateralParameters(address agToken, address collateral)\\n        external\\n        view\\n        returns (Parameters memory params)\\n    {\\n        (address stableMaster, address poolManager) = _getStableMasterAndPoolManager(agToken, collateral);\\n        (\\n            ,\\n            ,\\n            IPerpetualManager perpetualManager,\\n            ,\\n            ,\\n            ,\\n            ,\\n            SLPData memory slpData,\\n            MintBurnData memory feeData\\n        ) = IStableMaster(stableMaster).collateralMap(poolManager);\\n\\n        params.slpData = slpData;\\n        params.feeData = feeData;\\n        params.perpParam.maintenanceMargin = perpetualManager.maintenanceMargin();\\n        params.perpParam.maxLeverage = perpetualManager.maxLeverage();\\n        params.perpParam.targetHAHedge = perpetualManager.targetHAHedge();\\n        params.perpParam.limitHAHedge = perpetualManager.limitHAHedge();\\n        params.perpParam.lockTime = perpetualManager.lockTime();\\n\\n        params.perpFeeData.haBonusMalusDeposit = perpetualManager.haBonusMalusDeposit();\\n        params.perpFeeData.haBonusMalusWithdraw = perpetualManager.haBonusMalusWithdraw();\\n\\n        uint256 length = 0;\\n        while (true) {\\n            try perpetualManager.xHAFeesDeposit(length) returns (uint64) {\\n                length += 1;\\n            } catch {\\n                break;\\n            }\\n        }\\n        uint64[] memory data = new uint64[](length);\\n        uint64[] memory data2 = new uint64[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            data[i] = perpetualManager.xHAFeesDeposit(i);\\n            data2[i] = perpetualManager.yHAFeesDeposit(i);\\n        }\\n        params.perpFeeData.xHAFeesDeposit = data;\\n        params.perpFeeData.yHAFeesDeposit = data2;\\n\\n        length = 0;\\n        while (true) {\\n            try perpetualManager.xHAFeesWithdraw(length) returns (uint64) {\\n                length += 1;\\n            } catch {\\n                break;\\n            }\\n        }\\n        data = new uint64[](length);\\n        data2 = new uint64[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            data[i] = perpetualManager.xHAFeesWithdraw(i);\\n            data2[i] = perpetualManager.yHAFeesWithdraw(i);\\n        }\\n        params.perpFeeData.xHAFeesWithdraw = data;\\n        params.perpFeeData.yHAFeesWithdraw = data2;\\n    }\\n\\n    /// @notice Returns the address of the poolManager associated to an (`agToken`, `collateral`) pair\\n    /// in the Core module of the protocol\\n    function getPoolManager(address agToken, address collateral) public view returns (address poolManager) {\\n        (, poolManager) = _getStableMasterAndPoolManager(agToken, collateral);\\n    }\\n\\n    // ============================= REPLICA FUNCTIONS =============================\\n    // These replicate what is done in the other contracts of the protocol\\n\\n    function _previewBurnAndFees(\\n        uint256 amount,\\n        address agToken,\\n        address collateral\\n    ) internal view returns (uint256 amountForUserInCollat, uint256 feePercent) {\\n        (address stableMaster, address poolManager) = _getStableMasterAndPoolManager(agToken, collateral);\\n        (\\n            address token,\\n            ,\\n            IPerpetualManager perpetualManager,\\n            IOracleCore oracle,\\n            uint256 stocksUsers,\\n            ,\\n            uint256 collatBase,\\n            ,\\n            MintBurnData memory feeData\\n        ) = IStableMaster(stableMaster).collateralMap(poolManager);\\n        if (token == address(0) || IStableMaster(stableMaster).paused(keccak256(abi.encodePacked(STABLE, poolManager))))\\n            revert NotInitialized();\\n        if (amount > stocksUsers) revert InvalidAmount();\\n\\n        if (feeData.xFeeBurn.length == 1) {\\n            feePercent = feeData.yFeeBurn[0];\\n        } else {\\n            bytes memory data = abi.encode(address(perpetualManager), feeData.targetHAHedge);\\n            uint64 hedgeRatio = _computeHedgeRatio(stocksUsers - amount, data);\\n            feePercent = _piecewiseLinear(hedgeRatio, feeData.xFeeBurn, feeData.yFeeBurn);\\n        }\\n        feePercent = (feePercent * feeData.bonusMalusBurn) / BASE_PARAMS;\\n\\n        amountForUserInCollat = (amount * (BASE_PARAMS - feePercent) * collatBase) / (oracle.readUpper() * BASE_PARAMS);\\n    }\\n\\n    function _previewMintAndFees(\\n        uint256 amount,\\n        address agToken,\\n        address collateral\\n    ) internal view returns (uint256 amountForUserInStable, uint256 feePercent) {\\n        (address stableMaster, address poolManager) = _getStableMasterAndPoolManager(agToken, collateral);\\n        (\\n            address token,\\n            ,\\n            IPerpetualManager perpetualManager,\\n            IOracleCore oracle,\\n            uint256 stocksUsers,\\n            ,\\n            ,\\n            ,\\n            MintBurnData memory feeData\\n        ) = IStableMaster(stableMaster).collateralMap(poolManager);\\n        if (token == address(0) || IStableMaster(stableMaster).paused(keccak256(abi.encodePacked(STABLE, poolManager))))\\n            revert NotInitialized();\\n\\n        amountForUserInStable = oracle.readQuoteLower(amount);\\n\\n        if (feeData.xFeeMint.length == 1) feePercent = feeData.yFeeMint[0];\\n        else {\\n            bytes memory data = abi.encode(address(perpetualManager), feeData.targetHAHedge);\\n            uint64 hedgeRatio = _computeHedgeRatio(amountForUserInStable + stocksUsers, data);\\n            feePercent = _piecewiseLinear(hedgeRatio, feeData.xFeeMint, feeData.yFeeMint);\\n        }\\n        feePercent = (feePercent * feeData.bonusMalusMint) / BASE_PARAMS;\\n\\n        amountForUserInStable = (amountForUserInStable * (BASE_PARAMS - feePercent)) / BASE_PARAMS;\\n        if (stocksUsers + amountForUserInStable > feeData.capOnStableMinted) revert InvalidAmount();\\n    }\\n\\n    // ============================= UTILITY FUNCTIONS =============================\\n    // These utility functions are taken from other contracts of the protocol\\n\\n    function _computeHedgeRatio(uint256 newStocksUsers, bytes memory data) internal view returns (uint64 ratio) {\\n        (address perpetualManager, uint64 targetHAHedge) = abi.decode(data, (address, uint64));\\n        uint256 totalHedgeAmount = IPerpetualManager(perpetualManager).totalHedgeAmount();\\n        newStocksUsers = (targetHAHedge * newStocksUsers) / BASE_PARAMS;\\n        if (newStocksUsers > totalHedgeAmount) ratio = uint64((totalHedgeAmount * BASE_PARAMS) / newStocksUsers);\\n        else ratio = uint64(BASE_PARAMS);\\n    }\\n\\n    function _piecewiseLinear(\\n        uint64 x,\\n        uint64[] memory xArray,\\n        uint64[] memory yArray\\n    ) internal pure returns (uint64) {\\n        if (x >= xArray[xArray.length - 1]) {\\n            return yArray[xArray.length - 1];\\n        } else if (x <= xArray[0]) {\\n            return yArray[0];\\n        } else {\\n            uint256 lower;\\n            uint256 upper = xArray.length - 1;\\n            uint256 mid;\\n            while (upper - lower > 1) {\\n                mid = lower + (upper - lower) / 2;\\n                if (xArray[mid] <= x) {\\n                    lower = mid;\\n                } else {\\n                    upper = mid;\\n                }\\n            }\\n            if (yArray[upper] > yArray[lower]) {\\n                return\\n                    yArray[lower] +\\n                    ((yArray[upper] - yArray[lower]) * (x - xArray[lower])) /\\n                    (xArray[upper] - xArray[lower]);\\n            } else {\\n                return\\n                    yArray[lower] -\\n                    ((yArray[lower] - yArray[upper]) * (x - xArray[lower])) /\\n                    (xArray[upper] - xArray[lower]);\\n            }\\n        }\\n    }\\n\\n    function _getStableMasterAndPoolManager(address agToken, address collateral)\\n        internal\\n        view\\n        returns (address stableMaster, address poolManager)\\n    {\\n        stableMaster = IAgTokenMainnet(agToken).stableMaster();\\n        (poolManager, , , ) = ROUTER.mapPoolManagers(stableMaster, collateral);\\n    }\\n\\n    // ========================= CONSTANTS AND INITIALIZERS ========================\\n\\n    IAngleRouter public constant ROUTER = IAngleRouter(0xBB755240596530be0c1DE5DFD77ec6398471561d);\\n    ICore public constant CORE = ICore(0x61ed74de9Ca5796cF2F8fD60D54160D47E30B7c3);\\n\\n    bytes32 public constant STABLE = keccak256(\\\"STABLE\\\");\\n    uint256 public constant BASE_PARAMS = 10**9;\\n\\n    error NotInitialized();\\n    error InvalidAmount();\\n}\\n\",\"keccak256\":\"0x80929e333da89f0b26d7d51a50f096b8bdaa1c055cfa3b9488ea6ca5ee39200e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b620018151760201c565b15905090565b3b151590565b61328a80620001126000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c806354d9f65311610081578063874699361161005b57806387469936146101f15780638f3badbd146102195780639f48118f1461022c57600080fd5b806354d9f653146101815780636b6c0774146101b6578063841cb35b146101d157600080fd5b80632ee43450116100b25780632ee434501461010d57806332fe7b261461012e57806353429e731461016e57600080fd5b80631c90239c146100ce5780631ea98352146100ed575b600080fd5b6100d6610237565b6040516100e4929190612636565b60405180910390f35b6101006100fb366004612689565b610410565b6040516100e491906126c2565b61012061011b366004612689565b610a1e565b6040516100e49291906127bd565b61014973bb755240596530be0c1de5dfd77ec6398471561d81565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e4565b61014961017c366004612689565b610bf0565b6101a87ffb286912c6eadba541f23a3bb3e83373ab139b6e65d84e2a473c186efc2b464281565b6040519081526020016100e4565b6101497361ed74de9ca5796cf2f8fd60d54160d47e30b7c381565b6101e46101df366004612689565b610c04565b6040516100e491906129a1565b6102046101ff366004612ad2565b6117ed565b604080519283526020830191909152016100e4565b610204610227366004612ad2565b611807565b6101a8633b9aca0081565b60608060007361ed74de9ca5796cf2f8fd60d54160d47e30b7c373ffffffffffffffffffffffffffffffffffffffff1663b13380346040518163ffffffff1660e01b8152600401600060405180830381865afa15801561029b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526102e19190810190612be0565b90506000815167ffffffffffffffff8111156102ff576102ff612b14565b604051908082528060200260200182016040528015610328578160200160208202803683370190505b50905060005b82518110156104065782818151811061034957610349612c7f565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663ee565a636040518163ffffffff1660e01b8152600401602060405180830381865afa15801561039b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bf9190612cae565b8282815181106103d1576103d1612c7f565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526103ff81612cfa565b905061032e565b5090939092509050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082019290925260e081019190915260008373ffffffffffffffffffffffffffffffffffffffff16636ac5dc466040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190612cae565b6040517f7c295dfa00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301528516602482015290915060009081908190819073bb755240596530be0c1de5dfd77ec6398471561d90637c295dfa90604401608060405180830381865afa158015610556573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057a9190612d33565b6040517fba8b722300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8086166004830152949850929650909450925060009187169063ba8b722390602401600060405180830381865afa1580156105f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261063a9190810190612f13565b5050505050935050505085876000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505084876020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505083876040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082876060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818760a0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080876080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508473ffffffffffffffffffffffffffffffffffffffff1663d0fb02036040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108039190612cae565b73ffffffffffffffffffffffffffffffffffffffff1660c088015260005b6040517fa267526b0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff87169063a267526b90602401602060405180830381865afa9250505080156108c6575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526108c391810190612cae565b60015b6108cf576108e2565b6108da60018361306e565b915050610821565b60008167ffffffffffffffff8111156108fd576108fd612b14565b604051908082528060200260200182016040528015610926578160200160208202803683370190505b50905060005b82811015610a0a576040517fa267526b0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff89169063a267526b90602401602060405180830381865afa15801561099f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c39190612cae565b8282815181106109d5576109d5612c7f565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152610a0381612cfa565b905061092c565b5060e0890152509598975050505050505050565b60606000808473ffffffffffffffffffffffffffffffffffffffff16633c2e941b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a929190613086565b905060008167ffffffffffffffff811115610aaf57610aaf612b14565b604051908082528060200260200182016040528015610ad8578160200160208202803683370190505b509050600060015b838111610be3576040517f430c208100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301526024820183905289169063430c208190604401602060405180830381865afa925050508015610b94575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610b919181019061309f565b60015b610b9d57610bd1565b8015610bcf5781848481518110610bb657610bb6612c7f565b6020908102919091010152610bcc60018461306e565b92505b505b80610bdb81612cfa565b915050610ae0565b5090969095509350505050565b6000610bfc838361181b565b949350505050565b610cfc60408051610180810190915260006080820181815260a0830182905260c0830182905260e08301829052610100830182905261012083018290526101408301829052610160830191909152819081526040805161010081018252606080825260208281018290529282018190528082015260006080820181905260a0820181905260c0820181905260e082015291019081526040805160c081018252606080825260208281018290529282018190528082015260006080820181905260a082015291019081526040805160a0810182526000808252602082810182905292820181905260608201819052608082015291015290565b600080610d09858561181b565b6040517fba8b722300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301529294509092506000918291829186169063ba8b722390602401600060405180830381865afa158015610d82573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610dc89190810190612f13565b9850985050505050945050508186600001819052508086602001819052508273ffffffffffffffffffffffffffffffffffffffff1663d5eb05816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5591906130c1565b606087015167ffffffffffffffff9091169052604080517fae3302c2000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff85169163ae3302c29160048083019260209291908290030181865afa158015610ed3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef791906130c1565b606087015167ffffffffffffffff909116602091820152604080517f8d5e19f1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff861692638d5e19f192600480820193918290030181865afa158015610f75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9991906130c1565b86606001516040019067ffffffffffffffff16908167ffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1663324f38156040518163ffffffff1660e01b8152600401602060405180830381865afa158015611007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102b91906130c1565b86606001516060019067ffffffffffffffff16908167ffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff16630d6680876040518163ffffffff1660e01b8152600401602060405180830381865afa158015611099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bd91906130c1565b86606001516080019067ffffffffffffffff16908167ffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1663c0212c726040518163ffffffff1660e01b8152600401602060405180830381865afa15801561112b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114f91906130c1565b86604001516080019067ffffffffffffffff16908167ffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff16638e2401446040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e191906130c1565b604087015167ffffffffffffffff90911660a09091015260005b6040517fc1618dda0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff85169063c1618dda90602401602060405180830381865afa9250505080156112a0575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261129d918101906130c1565b60015b6112a9576112bc565b6112b460018361306e565b9150506111fb565b60008167ffffffffffffffff8111156112d7576112d7612b14565b604051908082528060200260200182016040528015611300578160200160208202803683370190505b50905060008267ffffffffffffffff81111561131e5761131e612b14565b604051908082528060200260200182016040528015611347578160200160208202803683370190505b50905060005b838110156114da576040517fc1618dda0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff88169063c1618dda90602401602060405180830381865afa1580156113c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e491906130c1565b8382815181106113f6576113f6612c7f565b67ffffffffffffffff92909216602092830291909101909101526040517f142c3ba00000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff88169063142c3ba090602401602060405180830381865afa15801561147b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149f91906130c1565b8282815181106114b1576114b1612c7f565b67ffffffffffffffff909216602092830291909101909101526114d381612cfa565b905061134d565b5060408901805183905251602001819052600092505b6040517f49a5d3ef0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff8716906349a5d3ef90602401602060405180830381865afa925050508015611595575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611592918101906130c1565b60015b61159e576115b1565b6115a960018561306e565b9350506114f0565b8267ffffffffffffffff8111156115ca576115ca612b14565b6040519080825280602002602001820160405280156115f3578160200160208202803683370190505b5091508267ffffffffffffffff81111561160f5761160f612b14565b604051908082528060200260200182016040528015611638578160200160208202803683370190505b50905060005b838110156117cb576040517f49a5d3ef0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff8816906349a5d3ef90602401602060405180830381865afa1580156116b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d591906130c1565b8382815181106116e7576116e7612c7f565b67ffffffffffffffff92909216602092830291909101909101526040517fd7f6328e0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff88169063d7f6328e90602401602060405180830381865afa15801561176c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179091906130c1565b8282815181106117a2576117a2612c7f565b67ffffffffffffffff909216602092830291909101909101526117c481612cfa565b905061163e565b506040808a018051909101929092529051606001525094979650505050505050565b6000806117fb858585611948565b91509150935093915050565b6000806117fb858585611d7a565b3b151590565b6000808373ffffffffffffffffffffffffffffffffffffffff16636ac5dc466040518163ffffffff1660e01b8152600401602060405180830381865afa158015611869573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188d9190612cae565b6040517f7c295dfa00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301528516602482015290925073bb755240596530be0c1de5dfd77ec6398471561d90637c295dfa90604401608060405180830381865afa158015611916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193a9190612d33565b509396919550909350505050565b600080600080611958868661181b565b6040517fba8b722300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8083166004830152929450909250600091829182918291829188169063ba8b722390602401600060405180830381865afa1580156119d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611a1b9190810190612f13565b9850505050955095509550509450600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611b5157508673ffffffffffffffffffffffffffffffffffffffff16639e9e46667ffb286912c6eadba541f23a3bb3e83373ab139b6e65d84e2a473c186efc2b464288604051602001611adc92919091825260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602082015260340190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611b1091815260200190565b602060405180830381865afa158015611b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b51919061309f565b15611b88576040517f87138d5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f3593ba7b000000000000000000000000000000000000000000000000000000008152600481018d905273ffffffffffffffffffffffffffffffffffffffff841690633593ba7b90602401602060405180830381865afa158015611bf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c179190613086565b81515190995060011415611c55578060200151600081518110611c3c57611c3c612c7f565b602002602001015167ffffffffffffffff169750611cd3565b60808101516040805173ffffffffffffffffffffffffffffffffffffffff8716602082015267ffffffffffffffff90921682820152805180830382018152606090920190526000611caf611ca9858d61306e565b8361219f565b9050611cc4818460000151856020015161228d565b67ffffffffffffffff16995050505b633b9aca008160a0015167ffffffffffffffff1689611cf291906130dc565b611cfc9190613148565b9750633b9aca00611d0d898261315c565b611d17908b6130dc565b611d219190613148565b60e0820151909950611d338a8461306e565b1115611d6b576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050935093915050565b600080600080611d8a868661181b565b915091506000806000806000808773ffffffffffffffffffffffffffffffffffffffff1663ba8b7223886040518263ffffffff1660e01b8152600401611dec919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600060405180830381865afa158015611e09573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611e4f9190810190612f13565b985050975050965096509650509550600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161480611f8657508773ffffffffffffffffffffffffffffffffffffffff16639e9e46667ffb286912c6eadba541f23a3bb3e83373ab139b6e65d84e2a473c186efc2b464289604051602001611f1192919091825260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602082015260340190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611f4591815260200190565b602060405180830381865afa158015611f62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f86919061309f565b15611fbd576040517f87138d5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828d1115611ff7576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060400151516001141561203557806060015160008151811061201c5761201c612c7f565b602002602001015167ffffffffffffffff1698506120b6565b60808101516040805173ffffffffffffffffffffffffffffffffffffffff8816602082015267ffffffffffffffff90921690820152600090606001604051602081830303815290604052905060006120928f86611ca9919061315c565b90506120a7818460400151856060015161228d565b67ffffffffffffffff169a5050505b633b9aca008160c0015167ffffffffffffffff168a6120d591906130dc565b6120df9190613148565b9850633b9aca008473ffffffffffffffffffffffffffffffffffffffff1663442133bd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612131573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121559190613086565b61215f91906130dc565b8261216e8b633b9aca0061315c565b8f61217991906130dc565b61218391906130dc565b61218d9190613148565b99505050505050505050935093915050565b6000806000838060200190518101906121b89190613173565b9150915060008273ffffffffffffffffffffffffffffffffffffffff1663b8f368956040518163ffffffff1660e01b8152600401602060405180830381865afa158015612209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222d9190613086565b9050633b9aca006122488767ffffffffffffffff85166130dc565b6122529190613148565b95508086111561227c578561226b633b9aca00836130dc565b6122759190613148565b9350612284565b633b9aca0093505b50505092915050565b6000826001845161229e919061315c565b815181106122ae576122ae612c7f565b602002602001015167ffffffffffffffff168467ffffffffffffffff16106122fe5781600184516122df919061315c565b815181106122ef576122ef612c7f565b602002602001015190506125de565b8260008151811061231157612311612c7f565b602002602001015167ffffffffffffffff168467ffffffffffffffff161161234657816000815181106122ef576122ef612c7f565b60008060018551612357919061315c565b905060005b6001612368848461315c565b11156123d457600261237a848461315c565b6123849190613148565b61238e908461306e565b90508667ffffffffffffffff168682815181106123ad576123ad612c7f565b602002602001015167ffffffffffffffff16116123cc5780925061235c565b80915061235c565b8483815181106123e6576123e6612c7f565b602002602001015167ffffffffffffffff1685838151811061240a5761240a612c7f565b602002602001015167ffffffffffffffff1611156125055785838151811061243457612434612c7f565b602002602001015186838151811061244e5761244e612c7f565b602002602001015161246091906131a8565b86848151811061247257612472612c7f565b60200260200101518861248591906131a8565b86858151811061249757612497612c7f565b60200260200101518785815181106124b1576124b1612c7f565b60200260200101516124c391906131a8565b6124cd91906131d1565b6124d79190613201565b8584815181106124e9576124e9612c7f565b60200260200101516124fb9190613228565b93505050506125de565b85838151811061251757612517612c7f565b602002602001015186838151811061253157612531612c7f565b602002602001015161254391906131a8565b86848151811061255557612555612c7f565b60200260200101518861256891906131a8565b86848151811061257a5761257a612c7f565b602002602001015187868151811061259457612594612c7f565b60200260200101516125a691906131a8565b6125b091906131d1565b6125ba9190613201565b8584815181106125cc576125cc612c7f565b60200260200101516124fb91906131a8565b9392505050565b600081518084526020808501945080840160005b8381101561262b57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016125f9565b509495945050505050565b60408152600061264960408301856125e5565b828103602084015261265b81856125e5565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461268657600080fd5b50565b6000806040838503121561269c57600080fd5b82356126a781612664565b915060208301356126b781612664565b809150509250929050565b60208152600073ffffffffffffffffffffffffffffffffffffffff80845116602084015280602085015116604084015250604083015161271a606084018273ffffffffffffffffffffffffffffffffffffffff169052565b50606083015173ffffffffffffffffffffffffffffffffffffffff8116608084015250608083015173ffffffffffffffffffffffffffffffffffffffff811660a08401525060a083015173ffffffffffffffffffffffffffffffffffffffff811660c08401525060c083015173ffffffffffffffffffffffffffffffffffffffff811660e08401525060e083015161010083810152610bfc6101208401826125e5565b604080825283519082018190526000906020906060840190828701845b828110156127f6578151845292840192908401906001016127da565b50505092019290925292915050565b600081518084526020808501945080840160005b8381101561262b57815167ffffffffffffffff1687529582019590820190600101612819565b6000610100825181855261285582860182612805565b9150506020830151848203602086015261286f8282612805565b915050604083015184820360408601526128898282612805565b915050606083015184820360608601526128a38282612805565b91505060808301516128c1608086018267ffffffffffffffff169052565b5060a08301516128dd60a086018267ffffffffffffffff169052565b5060c08301516128f960c086018267ffffffffffffffff169052565b5060e083015160e08501528091505092915050565b6000815160c0845261292360c0850182612805565b90506020830151848203602086015261293c8282612805565b915050604083015184820360408601526129568282612805565b915050606083015184820360608601526129708282612805565b915050608083015167ffffffffffffffff80821660808701528060a08601511660a087015250508091505092915050565b602081526000825180516020840152602081015160408401526040810151606084015260608101516080840152608081015167ffffffffffffffff80821660a08601528060a08401511660c08601528060c08401511660e0860152505060e08101519050612a1c61010084018267ffffffffffffffff169052565b5060208301516101e0610120840152612a3961020084018261283f565b905060408401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe084830301610140850152612a75828261290e565b9150506060840151612aca61016085018267ffffffffffffffff808251168352806020830151166020840152806040830151166040840152806060830151166060840152806080830151166080840152505050565b509392505050565b600080600060608486031215612ae757600080fd5b833592506020840135612af981612664565b91506040840135612b0981612664565b809150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715612b6757612b67612b14565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612bb457612bb4612b14565b604052919050565b600067ffffffffffffffff821115612bd657612bd6612b14565b5060051b60200190565b60006020808385031215612bf357600080fd5b825167ffffffffffffffff811115612c0a57600080fd5b8301601f81018513612c1b57600080fd5b8051612c2e612c2982612bbc565b612b6d565b81815260059190911b82018301908381019087831115612c4d57600080fd5b928401925b82841015612c74578351612c6581612664565b82529284019290840190612c52565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215612cc057600080fd5b81516125de81612664565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d2c57612d2c612ccb565b5060010190565b60008060008060808587031215612d4957600080fd5b8451612d5481612664565b6020860151909450612d6581612664565b6040860151909350612d7681612664565b6060860151909250612d8781612664565b939692955090935050565b805167ffffffffffffffff81168114612daa57600080fd5b919050565b600082601f830112612dc057600080fd5b81516020612dd0612c2983612bbc565b82815260059290921b84018101918181019086841115612def57600080fd5b8286015b84811015612e1157612e0481612d92565b8352918301918301612df3565b509695505050505050565b60006101008284031215612e2f57600080fd5b612e37612b43565b9050815167ffffffffffffffff80821115612e5157600080fd5b612e5d85838601612daf565b83526020840151915080821115612e7357600080fd5b612e7f85838601612daf565b60208401526040840151915080821115612e9857600080fd5b612ea485838601612daf565b60408401526060840151915080821115612ebd57600080fd5b50612eca84828501612daf565b606083015250612edc60808301612d92565b6080820152612eed60a08301612d92565b60a0820152612efe60c08301612d92565b60c082015260e082015160e082015292915050565b6000806000806000806000806000898b03610200811215612f3357600080fd5b8a51612f3e81612664565b60208c0151909a50612f4f81612664565b60408c0151909950612f6081612664565b60608c0151909850612f7181612664565b8097505060808b0151955060a08b0151945060c08b01519350610100807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2083011215612fbc57600080fd5b612fc4612b43565b60e08d01518152908c015160208201526101208c015160408201526101408c015160608201529050612ff96101608c01612d92565b608082015261300b6101808c01612d92565b60a082015261301d6101a08c01612d92565b60c082015261302f6101c08c01612d92565b60e08201526101e08b015190925067ffffffffffffffff81111561305257600080fd5b61305e8c828d01612e1c565b9150509295985092959850929598565b6000821982111561308157613081612ccb565b500190565b60006020828403121561309857600080fd5b5051919050565b6000602082840312156130b157600080fd5b815180151581146125de57600080fd5b6000602082840312156130d357600080fd5b6125de82612d92565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561311457613114612ccb565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261315757613157613119565b500490565b60008282101561316e5761316e612ccb565b500390565b6000806040838503121561318657600080fd5b825161319181612664565b915061319f60208401612d92565b90509250929050565b600067ffffffffffffffff838116908316818110156131c9576131c9612ccb565b039392505050565b600067ffffffffffffffff808316818516818304811182151516156131f8576131f8612ccb565b02949350505050565b600067ffffffffffffffff8084168061321c5761321c613119565b92169190910492915050565b600067ffffffffffffffff80831681851680830382111561324b5761324b612ccb565b0194935050505056fea2646970667358221220e09745cf20b1838e04df99ebd7e2dff1aa9d52035f24be5e48bc719d8f98be5564736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c806354d9f65311610081578063874699361161005b57806387469936146101f15780638f3badbd146102195780639f48118f1461022c57600080fd5b806354d9f653146101815780636b6c0774146101b6578063841cb35b146101d157600080fd5b80632ee43450116100b25780632ee434501461010d57806332fe7b261461012e57806353429e731461016e57600080fd5b80631c90239c146100ce5780631ea98352146100ed575b600080fd5b6100d6610237565b6040516100e4929190612636565b60405180910390f35b6101006100fb366004612689565b610410565b6040516100e491906126c2565b61012061011b366004612689565b610a1e565b6040516100e49291906127bd565b61014973bb755240596530be0c1de5dfd77ec6398471561d81565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e4565b61014961017c366004612689565b610bf0565b6101a87ffb286912c6eadba541f23a3bb3e83373ab139b6e65d84e2a473c186efc2b464281565b6040519081526020016100e4565b6101497361ed74de9ca5796cf2f8fd60d54160d47e30b7c381565b6101e46101df366004612689565b610c04565b6040516100e491906129a1565b6102046101ff366004612ad2565b6117ed565b604080519283526020830191909152016100e4565b610204610227366004612ad2565b611807565b6101a8633b9aca0081565b60608060007361ed74de9ca5796cf2f8fd60d54160d47e30b7c373ffffffffffffffffffffffffffffffffffffffff1663b13380346040518163ffffffff1660e01b8152600401600060405180830381865afa15801561029b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526102e19190810190612be0565b90506000815167ffffffffffffffff8111156102ff576102ff612b14565b604051908082528060200260200182016040528015610328578160200160208202803683370190505b50905060005b82518110156104065782818151811061034957610349612c7f565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663ee565a636040518163ffffffff1660e01b8152600401602060405180830381865afa15801561039b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bf9190612cae565b8282815181106103d1576103d1612c7f565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526103ff81612cfa565b905061032e565b5090939092509050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082019290925260e081019190915260008373ffffffffffffffffffffffffffffffffffffffff16636ac5dc466040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190612cae565b6040517f7c295dfa00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301528516602482015290915060009081908190819073bb755240596530be0c1de5dfd77ec6398471561d90637c295dfa90604401608060405180830381865afa158015610556573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057a9190612d33565b6040517fba8b722300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8086166004830152949850929650909450925060009187169063ba8b722390602401600060405180830381865afa1580156105f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261063a9190810190612f13565b5050505050935050505085876000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505084876020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505083876040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082876060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818760a0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080876080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508473ffffffffffffffffffffffffffffffffffffffff1663d0fb02036040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108039190612cae565b73ffffffffffffffffffffffffffffffffffffffff1660c088015260005b6040517fa267526b0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff87169063a267526b90602401602060405180830381865afa9250505080156108c6575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526108c391810190612cae565b60015b6108cf576108e2565b6108da60018361306e565b915050610821565b60008167ffffffffffffffff8111156108fd576108fd612b14565b604051908082528060200260200182016040528015610926578160200160208202803683370190505b50905060005b82811015610a0a576040517fa267526b0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff89169063a267526b90602401602060405180830381865afa15801561099f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c39190612cae565b8282815181106109d5576109d5612c7f565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152610a0381612cfa565b905061092c565b5060e0890152509598975050505050505050565b60606000808473ffffffffffffffffffffffffffffffffffffffff16633c2e941b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a929190613086565b905060008167ffffffffffffffff811115610aaf57610aaf612b14565b604051908082528060200260200182016040528015610ad8578160200160208202803683370190505b509050600060015b838111610be3576040517f430c208100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301526024820183905289169063430c208190604401602060405180830381865afa925050508015610b94575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610b919181019061309f565b60015b610b9d57610bd1565b8015610bcf5781848481518110610bb657610bb6612c7f565b6020908102919091010152610bcc60018461306e565b92505b505b80610bdb81612cfa565b915050610ae0565b5090969095509350505050565b6000610bfc838361181b565b949350505050565b610cfc60408051610180810190915260006080820181815260a0830182905260c0830182905260e08301829052610100830182905261012083018290526101408301829052610160830191909152819081526040805161010081018252606080825260208281018290529282018190528082015260006080820181905260a0820181905260c0820181905260e082015291019081526040805160c081018252606080825260208281018290529282018190528082015260006080820181905260a082015291019081526040805160a0810182526000808252602082810182905292820181905260608201819052608082015291015290565b600080610d09858561181b565b6040517fba8b722300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301529294509092506000918291829186169063ba8b722390602401600060405180830381865afa158015610d82573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610dc89190810190612f13565b9850985050505050945050508186600001819052508086602001819052508273ffffffffffffffffffffffffffffffffffffffff1663d5eb05816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5591906130c1565b606087015167ffffffffffffffff9091169052604080517fae3302c2000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff85169163ae3302c29160048083019260209291908290030181865afa158015610ed3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef791906130c1565b606087015167ffffffffffffffff909116602091820152604080517f8d5e19f1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff861692638d5e19f192600480820193918290030181865afa158015610f75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9991906130c1565b86606001516040019067ffffffffffffffff16908167ffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1663324f38156040518163ffffffff1660e01b8152600401602060405180830381865afa158015611007573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102b91906130c1565b86606001516060019067ffffffffffffffff16908167ffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff16630d6680876040518163ffffffff1660e01b8152600401602060405180830381865afa158015611099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bd91906130c1565b86606001516080019067ffffffffffffffff16908167ffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1663c0212c726040518163ffffffff1660e01b8152600401602060405180830381865afa15801561112b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114f91906130c1565b86604001516080019067ffffffffffffffff16908167ffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff16638e2401446040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e191906130c1565b604087015167ffffffffffffffff90911660a09091015260005b6040517fc1618dda0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff85169063c1618dda90602401602060405180830381865afa9250505080156112a0575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261129d918101906130c1565b60015b6112a9576112bc565b6112b460018361306e565b9150506111fb565b60008167ffffffffffffffff8111156112d7576112d7612b14565b604051908082528060200260200182016040528015611300578160200160208202803683370190505b50905060008267ffffffffffffffff81111561131e5761131e612b14565b604051908082528060200260200182016040528015611347578160200160208202803683370190505b50905060005b838110156114da576040517fc1618dda0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff88169063c1618dda90602401602060405180830381865afa1580156113c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e491906130c1565b8382815181106113f6576113f6612c7f565b67ffffffffffffffff92909216602092830291909101909101526040517f142c3ba00000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff88169063142c3ba090602401602060405180830381865afa15801561147b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149f91906130c1565b8282815181106114b1576114b1612c7f565b67ffffffffffffffff909216602092830291909101909101526114d381612cfa565b905061134d565b5060408901805183905251602001819052600092505b6040517f49a5d3ef0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff8716906349a5d3ef90602401602060405180830381865afa925050508015611595575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611592918101906130c1565b60015b61159e576115b1565b6115a960018561306e565b9350506114f0565b8267ffffffffffffffff8111156115ca576115ca612b14565b6040519080825280602002602001820160405280156115f3578160200160208202803683370190505b5091508267ffffffffffffffff81111561160f5761160f612b14565b604051908082528060200260200182016040528015611638578160200160208202803683370190505b50905060005b838110156117cb576040517f49a5d3ef0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff8816906349a5d3ef90602401602060405180830381865afa1580156116b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d591906130c1565b8382815181106116e7576116e7612c7f565b67ffffffffffffffff92909216602092830291909101909101526040517fd7f6328e0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff88169063d7f6328e90602401602060405180830381865afa15801561176c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179091906130c1565b8282815181106117a2576117a2612c7f565b67ffffffffffffffff909216602092830291909101909101526117c481612cfa565b905061163e565b506040808a018051909101929092529051606001525094979650505050505050565b6000806117fb858585611948565b91509150935093915050565b6000806117fb858585611d7a565b3b151590565b6000808373ffffffffffffffffffffffffffffffffffffffff16636ac5dc466040518163ffffffff1660e01b8152600401602060405180830381865afa158015611869573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188d9190612cae565b6040517f7c295dfa00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301528516602482015290925073bb755240596530be0c1de5dfd77ec6398471561d90637c295dfa90604401608060405180830381865afa158015611916573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193a9190612d33565b509396919550909350505050565b600080600080611958868661181b565b6040517fba8b722300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8083166004830152929450909250600091829182918291829188169063ba8b722390602401600060405180830381865afa1580156119d5573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611a1b9190810190612f13565b9850505050955095509550509450600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611b5157508673ffffffffffffffffffffffffffffffffffffffff16639e9e46667ffb286912c6eadba541f23a3bb3e83373ab139b6e65d84e2a473c186efc2b464288604051602001611adc92919091825260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602082015260340190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611b1091815260200190565b602060405180830381865afa158015611b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b51919061309f565b15611b88576040517f87138d5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f3593ba7b000000000000000000000000000000000000000000000000000000008152600481018d905273ffffffffffffffffffffffffffffffffffffffff841690633593ba7b90602401602060405180830381865afa158015611bf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c179190613086565b81515190995060011415611c55578060200151600081518110611c3c57611c3c612c7f565b602002602001015167ffffffffffffffff169750611cd3565b60808101516040805173ffffffffffffffffffffffffffffffffffffffff8716602082015267ffffffffffffffff90921682820152805180830382018152606090920190526000611caf611ca9858d61306e565b8361219f565b9050611cc4818460000151856020015161228d565b67ffffffffffffffff16995050505b633b9aca008160a0015167ffffffffffffffff1689611cf291906130dc565b611cfc9190613148565b9750633b9aca00611d0d898261315c565b611d17908b6130dc565b611d219190613148565b60e0820151909950611d338a8461306e565b1115611d6b576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050935093915050565b600080600080611d8a868661181b565b915091506000806000806000808773ffffffffffffffffffffffffffffffffffffffff1663ba8b7223886040518263ffffffff1660e01b8152600401611dec919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600060405180830381865afa158015611e09573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611e4f9190810190612f13565b985050975050965096509650509550600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161480611f8657508773ffffffffffffffffffffffffffffffffffffffff16639e9e46667ffb286912c6eadba541f23a3bb3e83373ab139b6e65d84e2a473c186efc2b464289604051602001611f1192919091825260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602082015260340190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611f4591815260200190565b602060405180830381865afa158015611f62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f86919061309f565b15611fbd576040517f87138d5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828d1115611ff7576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060400151516001141561203557806060015160008151811061201c5761201c612c7f565b602002602001015167ffffffffffffffff1698506120b6565b60808101516040805173ffffffffffffffffffffffffffffffffffffffff8816602082015267ffffffffffffffff90921690820152600090606001604051602081830303815290604052905060006120928f86611ca9919061315c565b90506120a7818460400151856060015161228d565b67ffffffffffffffff169a5050505b633b9aca008160c0015167ffffffffffffffff168a6120d591906130dc565b6120df9190613148565b9850633b9aca008473ffffffffffffffffffffffffffffffffffffffff1663442133bd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612131573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121559190613086565b61215f91906130dc565b8261216e8b633b9aca0061315c565b8f61217991906130dc565b61218391906130dc565b61218d9190613148565b99505050505050505050935093915050565b6000806000838060200190518101906121b89190613173565b9150915060008273ffffffffffffffffffffffffffffffffffffffff1663b8f368956040518163ffffffff1660e01b8152600401602060405180830381865afa158015612209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222d9190613086565b9050633b9aca006122488767ffffffffffffffff85166130dc565b6122529190613148565b95508086111561227c578561226b633b9aca00836130dc565b6122759190613148565b9350612284565b633b9aca0093505b50505092915050565b6000826001845161229e919061315c565b815181106122ae576122ae612c7f565b602002602001015167ffffffffffffffff168467ffffffffffffffff16106122fe5781600184516122df919061315c565b815181106122ef576122ef612c7f565b602002602001015190506125de565b8260008151811061231157612311612c7f565b602002602001015167ffffffffffffffff168467ffffffffffffffff161161234657816000815181106122ef576122ef612c7f565b60008060018551612357919061315c565b905060005b6001612368848461315c565b11156123d457600261237a848461315c565b6123849190613148565b61238e908461306e565b90508667ffffffffffffffff168682815181106123ad576123ad612c7f565b602002602001015167ffffffffffffffff16116123cc5780925061235c565b80915061235c565b8483815181106123e6576123e6612c7f565b602002602001015167ffffffffffffffff1685838151811061240a5761240a612c7f565b602002602001015167ffffffffffffffff1611156125055785838151811061243457612434612c7f565b602002602001015186838151811061244e5761244e612c7f565b602002602001015161246091906131a8565b86848151811061247257612472612c7f565b60200260200101518861248591906131a8565b86858151811061249757612497612c7f565b60200260200101518785815181106124b1576124b1612c7f565b60200260200101516124c391906131a8565b6124cd91906131d1565b6124d79190613201565b8584815181106124e9576124e9612c7f565b60200260200101516124fb9190613228565b93505050506125de565b85838151811061251757612517612c7f565b602002602001015186838151811061253157612531612c7f565b602002602001015161254391906131a8565b86848151811061255557612555612c7f565b60200260200101518861256891906131a8565b86848151811061257a5761257a612c7f565b602002602001015187868151811061259457612594612c7f565b60200260200101516125a691906131a8565b6125b091906131d1565b6125ba9190613201565b8584815181106125cc576125cc612c7f565b60200260200101516124fb91906131a8565b9392505050565b600081518084526020808501945080840160005b8381101561262b57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016125f9565b509495945050505050565b60408152600061264960408301856125e5565b828103602084015261265b81856125e5565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461268657600080fd5b50565b6000806040838503121561269c57600080fd5b82356126a781612664565b915060208301356126b781612664565b809150509250929050565b60208152600073ffffffffffffffffffffffffffffffffffffffff80845116602084015280602085015116604084015250604083015161271a606084018273ffffffffffffffffffffffffffffffffffffffff169052565b50606083015173ffffffffffffffffffffffffffffffffffffffff8116608084015250608083015173ffffffffffffffffffffffffffffffffffffffff811660a08401525060a083015173ffffffffffffffffffffffffffffffffffffffff811660c08401525060c083015173ffffffffffffffffffffffffffffffffffffffff811660e08401525060e083015161010083810152610bfc6101208401826125e5565b604080825283519082018190526000906020906060840190828701845b828110156127f6578151845292840192908401906001016127da565b50505092019290925292915050565b600081518084526020808501945080840160005b8381101561262b57815167ffffffffffffffff1687529582019590820190600101612819565b6000610100825181855261285582860182612805565b9150506020830151848203602086015261286f8282612805565b915050604083015184820360408601526128898282612805565b915050606083015184820360608601526128a38282612805565b91505060808301516128c1608086018267ffffffffffffffff169052565b5060a08301516128dd60a086018267ffffffffffffffff169052565b5060c08301516128f960c086018267ffffffffffffffff169052565b5060e083015160e08501528091505092915050565b6000815160c0845261292360c0850182612805565b90506020830151848203602086015261293c8282612805565b915050604083015184820360408601526129568282612805565b915050606083015184820360608601526129708282612805565b915050608083015167ffffffffffffffff80821660808701528060a08601511660a087015250508091505092915050565b602081526000825180516020840152602081015160408401526040810151606084015260608101516080840152608081015167ffffffffffffffff80821660a08601528060a08401511660c08601528060c08401511660e0860152505060e08101519050612a1c61010084018267ffffffffffffffff169052565b5060208301516101e0610120840152612a3961020084018261283f565b905060408401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe084830301610140850152612a75828261290e565b9150506060840151612aca61016085018267ffffffffffffffff808251168352806020830151166020840152806040830151166040840152806060830151166060840152806080830151166080840152505050565b509392505050565b600080600060608486031215612ae757600080fd5b833592506020840135612af981612664565b91506040840135612b0981612664565b809150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715612b6757612b67612b14565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612bb457612bb4612b14565b604052919050565b600067ffffffffffffffff821115612bd657612bd6612b14565b5060051b60200190565b60006020808385031215612bf357600080fd5b825167ffffffffffffffff811115612c0a57600080fd5b8301601f81018513612c1b57600080fd5b8051612c2e612c2982612bbc565b612b6d565b81815260059190911b82018301908381019087831115612c4d57600080fd5b928401925b82841015612c74578351612c6581612664565b82529284019290840190612c52565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215612cc057600080fd5b81516125de81612664565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d2c57612d2c612ccb565b5060010190565b60008060008060808587031215612d4957600080fd5b8451612d5481612664565b6020860151909450612d6581612664565b6040860151909350612d7681612664565b6060860151909250612d8781612664565b939692955090935050565b805167ffffffffffffffff81168114612daa57600080fd5b919050565b600082601f830112612dc057600080fd5b81516020612dd0612c2983612bbc565b82815260059290921b84018101918181019086841115612def57600080fd5b8286015b84811015612e1157612e0481612d92565b8352918301918301612df3565b509695505050505050565b60006101008284031215612e2f57600080fd5b612e37612b43565b9050815167ffffffffffffffff80821115612e5157600080fd5b612e5d85838601612daf565b83526020840151915080821115612e7357600080fd5b612e7f85838601612daf565b60208401526040840151915080821115612e9857600080fd5b612ea485838601612daf565b60408401526060840151915080821115612ebd57600080fd5b50612eca84828501612daf565b606083015250612edc60808301612d92565b6080820152612eed60a08301612d92565b60a0820152612efe60c08301612d92565b60c082015260e082015160e082015292915050565b6000806000806000806000806000898b03610200811215612f3357600080fd5b8a51612f3e81612664565b60208c0151909a50612f4f81612664565b60408c0151909950612f6081612664565b60608c0151909850612f7181612664565b8097505060808b0151955060a08b0151945060c08b01519350610100807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2083011215612fbc57600080fd5b612fc4612b43565b60e08d01518152908c015160208201526101208c015160408201526101408c015160608201529050612ff96101608c01612d92565b608082015261300b6101808c01612d92565b60a082015261301d6101a08c01612d92565b60c082015261302f6101c08c01612d92565b60e08201526101e08b015190925067ffffffffffffffff81111561305257600080fd5b61305e8c828d01612e1c565b9150509295985092959850929598565b6000821982111561308157613081612ccb565b500190565b60006020828403121561309857600080fd5b5051919050565b6000602082840312156130b157600080fd5b815180151581146125de57600080fd5b6000602082840312156130d357600080fd5b6125de82612d92565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561311457613114612ccb565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261315757613157613119565b500490565b60008282101561316e5761316e612ccb565b500390565b6000806040838503121561318657600080fd5b825161319181612664565b915061319f60208401612d92565b90509250929050565b600067ffffffffffffffff838116908316818110156131c9576131c9612ccb565b039392505050565b600067ffffffffffffffff808316818516818304811182151516156131f8576131f8612ccb565b02949350505050565b600067ffffffffffffffff8084168061321c5761321c613119565b92169190910492915050565b600067ffffffffffffffff80831681851680830382111561324b5761324b612ccb565b0194935050505056fea2646970667358221220e09745cf20b1838e04df99ebd7e2dff1aa9d52035f24be5e48bc719d8f98be5564736f6c634300080c0033",
  "devdoc": {
    "author": "Angle Labs, Inc.",
    "details": "This contract only contains view functions to be queried off-chain. It was thus not optimized for gas consumption",
    "kind": "dev",
    "methods": {
      "getCollateralAddresses(address,address)": {
        "returns": {
          "addresses": "A struct with all the addresses associated in the Core module"
        }
      },
      "getCollateralParameters(address,address)": {
        "details": "Check out the struct `Parameters` for the meaning of the return values",
        "returns": {
          "params": "Struct with most of the parameters in the `StableMaster` and `PerpetualManager` contracts"
        }
      },
      "getControlledVaults(address,address)": {
        "details": "This function is never to be called on-chain since it iterates over all vaultIDs. It is here to reduce dependency on an external graph to link an ID to its owner",
        "params": {
          "spender": "Address for which vault ownerships should be checked",
          "vaultManager": "VaultManager address to query vaultIDs on"
        },
        "returns": {
          "_0": "List of `vaultID` controlled by this address",
          "_1": "Count of vaults owned by the address"
        }
      },
      "getStablecoinAddresses()": {
        "details": "The place of an agToken address in the list is the same as the corresponding `StableMaster` address",
        "returns": {
          "_0": "List of the `StableMaster` addresses of the Angle protocol",
          "_1": "List of the `AgToken` addresses of the protocol"
        }
      },
      "previewBurnAndFees(uint256,address,address)": {
        "details": "This function reverts if the burn transaction was to revert in the same conditions (without taking into account potential approval problems to the `StableMaster` contract or agToken balance prior to the call)",
        "returns": {
          "_0": "Amount of `collateral` that would be obtained with a burn transaction in the same block",
          "_1": "Percentage of fees that would be taken during a burn transaction in the same block"
        }
      },
      "previewMintAndFees(uint256,address,address)": {
        "details": "This function reverts if the mint transaction was to revert in the same conditions (without taking into account potential approval problems to the `StableMaster` contract)",
        "returns": {
          "_0": "Amount of `agToken` that would be obtained with a mint transaction in the same block",
          "_1": "Percentage of fees that would be taken during a mint transaction in the same block"
        }
      }
    },
    "title": "AngleHelpers",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getCollateralAddresses(address,address)": {
        "notice": "Returns all the addresses associated to the (`agToken`,`collateral`) pair given"
      },
      "getCollateralParameters(address,address)": {
        "notice": "Returns most of the governance parameters associated to the (`agToken`,`collateral`) pair given"
      },
      "getControlledVaults(address,address)": {
        "notice": "Returns all the vaults owned or controlled (under the form of approval) by an address"
      },
      "getPoolManager(address,address)": {
        "notice": "Returns the address of the poolManager associated to an (`agToken`, `collateral`) pair in the Core module of the protocol"
      },
      "getStablecoinAddresses()": {
        "notice": "Gets the addresses of all the `StableMaster` contracts and their associated `AgToken` addresses"
      },
      "previewBurnAndFees(uint256,address,address)": {
        "notice": "Gives the amount of `collateral` you'd be getting if you were executing in the same block a burn transaction  with `amount` of `agToken` in the Core module of the Angle protocol as well as the value of the fees (in `BASE_PARAMS`) that would be applied during the burn"
      },
      "previewMintAndFees(uint256,address,address)": {
        "notice": "Gives the amount of `agToken` you'd be getting if you were executing in the same block a mint transaction with `amount` of `collateral` in the Core module of the Angle protocol as well as the value of the fees (in `BASE_PARAMS`) that would be applied during the mint"
      }
    },
    "notice": "Contract with view functions designed to facilitate integrations on the Core and Borrow module of the Angle Protocol",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 772,
        "contract": "contracts/ui-helpers/AngleHelpers.sol:AngleHelpers",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 775,
        "contract": "contracts/ui-helpers/AngleHelpers.sol:AngleHelpers",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}