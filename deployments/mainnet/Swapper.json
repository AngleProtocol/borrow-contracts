{
  "address": "0x4E4A605c1F2E3303e6967Cb6D3D964474Eb3C4Fd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICoreBorrow",
          "name": "_core",
          "type": "address"
        },
        {
          "internalType": "contract IWStETH",
          "name": "_wStETH",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV3Router",
          "name": "_uniV3Router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oneInch",
          "type": "address"
        },
        {
          "internalType": "contract IAngleRouter",
          "name": "_angleRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptyReturnMessage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncompatibleLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernorOrGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooSmallAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BASE_PARAMS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "angleRouter",
      "outputs": [
        {
          "internalType": "contract IAngleRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "angleRouterAllowedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "spenders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "changeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "contract ICoreBorrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oneInch",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "oneInchAllowedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "inToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "outToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outTokenRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "outTokenOwed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inTokenObtained",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "uniAllowedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniV3Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV3Router",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wStETH",
      "outputs": [
        {
          "internalType": "contract IWStETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa7a8ac18df9bfd6ab29ad835d4edcb418105bea2146f5c131e041a418e47fa35",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0x4E4A605c1F2E3303e6967Cb6D3D964474Eb3C4Fd",
    "transactionIndex": 64,
    "gasUsed": "1934188",
    "logsBloom": "0x
    "blockHash": "0xc61845ab39500cc53ad123a811635226825fdf02b75a88a750c64d432f49d7ea",
    "transactionHash": "0xa7a8ac18df9bfd6ab29ad835d4edcb418105bea2146f5c131e041a418e47fa35",
    "logs": [
      {
        "transactionIndex": 64,
        "blockNumber": 14966377,
        "transactionHash": "0xa7a8ac18df9bfd6ab29ad835d4edcb418105bea2146f5c131e041a418e47fa35",
        "address": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004e4a605c1f2e3303e6967cb6d3d964474eb3c4fd",
          "0x0000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 79,
        "blockHash": "0xc61845ab39500cc53ad123a811635226825fdf02b75a88a750c64d432f49d7ea"
      }
    ],
    "blockNumber": 14966377,
    "cumulativeGasUsed": "7301428",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5bc6BEf80DA563EBf6Df6D6913513fa9A7ec89BE",
    "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",
    "0xE592427A0AEce92De3Edee1F18E0157C05861564",
    "0x1111111254fb6c44bAC0beD2854e76F90643097d",
    "0xBB755240596530be0c1DE5DFD77ec6398471561d"
  ],
  "solcInputHash": "eb7de3603cc573bcb7c8cc81b533de56",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICoreBorrow\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"contract IWStETH\",\"name\":\"_wStETH\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV3Router\",\"name\":\"_uniV3Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oneInch\",\"type\":\"address\"},{\"internalType\":\"contract IAngleRouter\",\"name\":\"_angleRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyReturnMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncompatibleLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernorOrGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooSmallAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BASE_PARAMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"angleRouter\",\"outputs\":[{\"internalType\":\"contract IAngleRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"angleRouterAllowedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"changeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICoreBorrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneInch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oneInchAllowedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"outToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outTokenRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outTokenOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inTokenObtained\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniAllowedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV3Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wStETH\",\"outputs\":[{\"internalType\":\"contract IWStETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Angle Core Team\",\"kind\":\"dev\",\"methods\":{\"changeAllowance(address[],address[],uint256[])\":{\"params\":{\"amounts\":\"Amounts to allow\",\"spenders\":\"Addresses to allow transfer\",\"tokens\":\"Addresses of the tokens to allow\"}},\"constructor\":{\"params\":{\"_angleRouter\":\"Address of the AngleRouter contract\",\"_core\":\"Core address\",\"_oneInch\":\"1Inch Router address\",\"_uniV3Router\":\"UniswapV3 Router address\",\"_wStETH\":\"wStETH Address\"}},\"swap(address,address,address,uint256,uint256,bytes)\":{\"details\":\"This function swaps the `inToken` to the `outToken` by either doing mint, or burn from the protocol or/and combining it with a UniV3 or 1Inch swapNo slippage checks are performed at the end of each operation, only one slippage check is performed at the end of the callIn this implementation, the function tries to make sure that the `outTokenRecipient` address has at the end of the call `outTokenOwed`, leftover tokens are sent to a `to` address which by default is the `outTokenRecipient`\",\"params\":{\"data\":\"Extra data needed (to encode Uniswap swaps for instance)\",\"inToken\":\"Address of the token received\",\"inTokenObtained\":\"Amount of collateral obtained by a related address prior to the call to this function\",\"outToken\":\"Address of the token to obtain\",\"outTokenOwed\":\"Minimum amount of outToken the `outTokenRecipient` address should have at the end of the call\",\"outTokenRecipient\":\"Address to which the outToken should be sent\"}}},\"title\":\"Swapper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BASE_PARAMS()\":{\"notice\":\"Base used for parameter computation\"},\"angleRouter()\":{\"notice\":\"AngleRouter\"},\"angleRouterAllowedToken(address)\":{\"notice\":\"Whether the token was already approved on AngleRouter\"},\"changeAllowance(address[],address[],uint256[])\":{\"notice\":\"Changes allowance for a contract\"},\"constructor\":{\"notice\":\"Constructor of the contract\"},\"core()\":{\"notice\":\"Reference to the `CoreBorrow` contract of the module which handles all AccessControl logic\"},\"oneInch()\":{\"notice\":\"1Inch Router\"},\"oneInchAllowedToken(address)\":{\"notice\":\"Whether the token was already approved on 1Inch\"},\"swap(address,address,address,uint256,uint256,bytes)\":{\"notice\":\"Notifies a contract that an address should be given `outToken` from `inToken`\"},\"uniAllowedToken(address)\":{\"notice\":\"Whether the token was already approved on Uniswap router\"},\"uniV3Router()\":{\"notice\":\"Uniswap Router contract\"},\"wStETH()\":{\"notice\":\"Wrapped StETH contract\"}},\"notice\":\"Swapper contract facilitating interactions with the VaultManager: to liquidate and get leverage\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swapper/Swapper.sol\":\"Swapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"contracts/interfaces/IAngleRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\n/// @title IAngleRouter\\n/// @author Angle Core Team\\n/// @notice Interface for the `AngleRouter` contract\\n/// @dev This interface only contains functions of the `AngleRouter01` contract which are called by other contracts\\n/// of this module\\ninterface IAngleRouter {\\n    function mint(\\n        address user,\\n        uint256 amount,\\n        uint256 minStableAmount,\\n        address stablecoin,\\n        address collateral\\n    ) external;\\n\\n    function burn(\\n        address user,\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        address stablecoin,\\n        address collateral\\n    ) external;\\n}\\n\",\"keccak256\":\"0xae071abd253e11dce88346a1eabfb530194145e7722623c222d218adb42dc220\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICoreBorrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\n/// @title ICoreBorrow\\n/// @author Angle Core Team\\n/// @notice Interface for the `CoreBorrow` contract\\n/// @dev This interface only contains functions of the `CoreBorrow` contract which are called by other contracts\\n/// of this module\\ninterface ICoreBorrow {\\n    /// @notice Checks if an address corresponds to a treasury of a stablecoin with a flash loan\\n    /// module initialized on it\\n    /// @param treasury Address to check\\n    /// @return Whether the address has the `FLASHLOANER_TREASURY_ROLE` or not\\n    function isFlashLoanerTreasury(address treasury) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GOVERNOR_ROLE` or not\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor or a guardian of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GUARDIAN_ROLE` or not\\n    /// @dev Governance should make sure when adding a governor to also give this governor the guardian\\n    /// role by calling the `addGovernor` function\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x25b65b3f506ca91745a444502a36f0556585d82d9d60f4bd32fbcaabc12840d4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title ISwapper\\n/// @author Angle Core Team\\n/// @notice Interface for Swapper contracts\\n/// @dev This interface defines the key functions `Swapper` contracts should have when interacting with\\n/// Angle\\ninterface ISwapper {\\n    /// @notice Notifies a contract that an address should be given `outToken` from `inToken`\\n    /// @param inToken Address of the token received\\n    /// @param outToken Address of the token to obtain\\n    /// @param outTokenRecipient Address to which the outToken should be sent\\n    /// @param outTokenOwed Minimum amount of outToken the `outTokenRecipient` address should have at the end of the call\\n    /// @param inTokenObtained Amount of collateral obtained by a related address prior\\n    /// to the call to this function\\n    /// @param data Extra data needed (to encode Uniswap swaps for instance)\\n    function swap(\\n        IERC20 inToken,\\n        IERC20 outToken,\\n        address outTokenRecipient,\\n        uint256 outTokenOwed,\\n        uint256 inTokenObtained,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8f9abab47966d41ca36eb9e8bb8b39bd5ba262d66ed141d001084f64f186c525\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/lido/IWStETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\n/// @title IWStETH\\n/// @author Angle Core Team\\n/// @notice Interface for the `WStETH` contract\\n/// @dev This interface only contains functions of the `WStETH` which are called by other contracts\\n/// of this module\\ninterface IWStETH {\\n    function wrap(uint256 _stETHAmount) external returns (uint256);\\n\\n    function stETH() external view returns (address);\\n}\\n\",\"keccak256\":\"0x4a0758e56559a167344be9a000efe23f6a5259d8c10b83e947b1f5eba9e9b166\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/uniswap/IUniswapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nstruct ExactInputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n}\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface IUniswapV3Router {\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n}\\n\\n/// @title Router for price estimation functionality\\n/// @notice Functions for getting the price of one token with respect to another using Uniswap V2\\n/// @dev This interface is only used for non critical elements of the protocol\\ninterface IUniswapV2Router {\\n    /// @notice Given an input asset amount, returns the maximum output amount of the\\n    /// other asset (accounting for fees) given reserves.\\n    /// @param path Addresses of the pools used to get prices\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 swapAmount,\\n        uint256 minExpected,\\n        address[] calldata path,\\n        address receiver,\\n        uint256 swapDeadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x979d990ef922fbd8f0a8b2230d5d361e629f7e5c4190402fba692262ee59450a\",\"license\":\"GPL-3.0\"},\"contracts/swapper/Swapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/IAngleRouter.sol\\\";\\nimport \\\"../interfaces/ICoreBorrow.sol\\\";\\nimport \\\"../interfaces/ISwapper.sol\\\";\\nimport \\\"../interfaces/external/lido/IWStETH.sol\\\";\\nimport \\\"../interfaces/external/uniswap/IUniswapRouter.sol\\\";\\n\\n/// @title Swapper\\n/// @author Angle Core Team\\n/// @notice Swapper contract facilitating interactions with the VaultManager: to liquidate and get leverage\\ncontract Swapper is ISwapper {\\n    using SafeERC20 for IERC20;\\n\\n    // ================ Constants and Immutable Variables ==========================\\n\\n    /// @notice Base used for parameter computation\\n    uint256 public constant BASE_PARAMS = 10**9;\\n    /// @notice AngleRouter\\n    IAngleRouter public immutable angleRouter;\\n    /// @notice Reference to the `CoreBorrow` contract of the module which handles all AccessControl logic\\n    ICoreBorrow public immutable core;\\n    /// @notice Wrapped StETH contract\\n    IWStETH public immutable wStETH;\\n    /// @notice Uniswap Router contract\\n    IUniswapV3Router public immutable uniV3Router;\\n    /// @notice 1Inch Router\\n    address public immutable oneInch;\\n\\n    // =============================== Mappings ====================================\\n\\n    /// @notice Whether the token was already approved on Uniswap router\\n    mapping(IERC20 => bool) public uniAllowedToken;\\n    /// @notice Whether the token was already approved on 1Inch\\n    mapping(IERC20 => bool) public oneInchAllowedToken;\\n    /// @notice Whether the token was already approved on AngleRouter\\n    mapping(IERC20 => bool) public angleRouterAllowedToken;\\n\\n    // ================================== Enum =====================================\\n\\n    /// @notice All possible swaps\\n    enum SwapType {\\n        UniswapV3,\\n        oneInch,\\n        Wrap,\\n        None\\n    }\\n\\n    // ================================== Errors ===================================\\n\\n    error EmptyReturnMessage();\\n    error IncompatibleLengths();\\n    error NotGovernorOrGuardian();\\n    error TooSmallAmount();\\n    error ZeroAddress();\\n\\n    /// @notice Constructor of the contract\\n    /// @param _core Core address\\n    /// @param _wStETH wStETH Address\\n    /// @param _uniV3Router UniswapV3 Router address\\n    /// @param _oneInch 1Inch Router address\\n    /// @param _angleRouter Address of the AngleRouter contract\\n    constructor(\\n        ICoreBorrow _core,\\n        IWStETH _wStETH,\\n        IUniswapV3Router _uniV3Router,\\n        address _oneInch,\\n        IAngleRouter _angleRouter\\n    ) {\\n        if (\\n            address(_core) == address(0) ||\\n            address(_uniV3Router) == address(0) ||\\n            _oneInch == address(0) ||\\n            address(_angleRouter) == address(0)\\n        ) revert ZeroAddress();\\n        core = _core;\\n        IERC20 stETH = IERC20(_wStETH.stETH());\\n        stETH.safeApprove(address(_wStETH), type(uint256).max);\\n        wStETH = _wStETH;\\n        uniV3Router = _uniV3Router;\\n        oneInch = _oneInch;\\n        angleRouter = _angleRouter;\\n    }\\n\\n    receive() external payable {}\\n\\n    // ======================= External Access Function ============================\\n\\n    /// @inheritdoc ISwapper\\n    /// @dev This function swaps the `inToken` to the `outToken` by either doing mint, or burn from the protocol\\n    /// or/and combining it with a UniV3 or 1Inch swap\\n    /// @dev No slippage checks are performed at the end of each operation, only one slippage check is performed\\n    /// at the end of the call\\n    /// @dev In this implementation, the function tries to make sure that the `outTokenRecipient` address has at the end\\n    /// of the call `outTokenOwed`, leftover tokens are sent to a `to` address which by default is the `outTokenRecipient`\\n    function swap(\\n        IERC20 inToken,\\n        IERC20 outToken,\\n        address outTokenRecipient,\\n        uint256 outTokenOwed,\\n        uint256 inTokenObtained,\\n        bytes memory data\\n    ) external {\\n        // Optional address that can be given to specify in case of a burn the address of the collateral\\n        // to get in exchange for the stablecoin or in case of a mint the collateral used to mint\\n        address intermediateToken;\\n        // Address to receive the surplus amount of token at the end of the call\\n        address to;\\n        // For slippage protection, it is checked at the end of the call\\n        uint256 minAmountOut;\\n        // Type of the swap to execute: if `swapType == 3`, then it is optional to swap\\n        uint128 swapType;\\n        // Whether a `mint` or `burn` operation should be performed beyond the swap: 1 corresponds\\n        // to a burn and 2 to a mint. It is optional. If the value is set to 1 or 2 then the value of the\\n        // `intermediateToken` should be made non null\\n        uint128 mintOrBurn;\\n        // We're reusing the `data` variable (it's now either a `path` on UniswapV3 or a payload for 1Inch)\\n        (intermediateToken, to, minAmountOut, swapType, mintOrBurn, data) = abi.decode(\\n            data,\\n            (address, address, uint256, uint128, uint128, bytes)\\n        );\\n\\n        to = (to == address(0)) ? outTokenRecipient : to;\\n\\n        if (mintOrBurn == 1) {\\n            // First performing burn transactions as you may usually get stablecoins first\\n            _checkAngleRouterAllowance(inToken);\\n            // In this case there cannot be any leftover `inToken`\\n            angleRouter.burn(address(this), inTokenObtained, 0, address(inToken), intermediateToken);\\n            inToken = IERC20(intermediateToken);\\n            inTokenObtained = inToken.balanceOf(address(this));\\n        }\\n        // Reusing the `inTokenObtained` variable\\n        inTokenObtained = _swap(inToken, inTokenObtained, SwapType(swapType), data);\\n\\n        if (mintOrBurn == 2) {\\n            // Mint transaction is performed last as if you're trying to get stablecoins, it should be the last operation\\n            _checkAngleRouterAllowance(IERC20(intermediateToken));\\n            angleRouter.mint(address(this), inTokenObtained, 0, address(outToken), intermediateToken);\\n        }\\n\\n        // A final slippage check is performed after the swaps\\n        uint256 outTokenBalance = outToken.balanceOf(address(this));\\n        if (outTokenBalance <= minAmountOut) revert TooSmallAmount();\\n\\n        // The `outTokenRecipient` may already have enough in balance, in which case there's no need to transfer\\n        // this address the token and everything can be given already to the `to` address\\n        uint256 outTokenBalanceRecipient = outToken.balanceOf(outTokenRecipient);\\n        if (outTokenBalanceRecipient >= outTokenOwed || to == outTokenRecipient) outToken.safeTransfer(to, outTokenBalance);\\n        else {\\n            // The `outTokenRecipient` should receive the delta to make sure its end balance is equal to `outTokenOwed`\\n            // Any leftover in this case is sent to the `to` address\\n            // The function reverts if it did not obtain more than `outTokenOwed - outTokenBalanceRecipient` from the swap\\n            outToken.safeTransfer(outTokenRecipient, outTokenOwed - outTokenBalanceRecipient);\\n            outToken.safeTransfer(to, outTokenBalanceRecipient + outTokenBalance - outTokenOwed);\\n        }\\n        // Reusing the `inTokenObtained` variable for the `inToken` balance\\n        // Sending back the remaining amount of inTokens to the `to` address: it is possible that not the full `inTokenObtained`\\n        // is swapped to `outToken` if we're using the `1Inch` payload\\n        // If there has been a burn, the whole `inToken` balance is burnt, but in this case the `inToken` variable has the \\n        // `intermediateToken` reference and what is sent back to the `to` address is the leftover balance of this token\\n        inTokenObtained = inToken.balanceOf(address(this));\\n        if (inTokenObtained > 0) inToken.safeTransfer(to, inTokenObtained);\\n    }\\n\\n    // ========================= Governance Function ===============================\\n\\n    /// @notice Changes allowance for a contract\\n    /// @param tokens Addresses of the tokens to allow\\n    /// @param spenders Addresses to allow transfer\\n    /// @param amounts Amounts to allow\\n    function changeAllowance(\\n        IERC20[] calldata tokens,\\n        address[] calldata spenders,\\n        uint256[] calldata amounts\\n    ) external {\\n        if (!core.isGovernorOrGuardian(msg.sender)) revert NotGovernorOrGuardian();\\n        if (tokens.length != spenders.length || tokens.length != amounts.length) revert IncompatibleLengths();\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _changeAllowance(tokens[i], spenders[i], amounts[i]);\\n        }\\n    }\\n\\n    // ======================= Internal Utility Functions ==========================\\n\\n    /// @notice Internal version of the `_changeAllowance` function\\n    function _changeAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        uint256 currentAllowance = token.allowance(address(this), spender);\\n        if (currentAllowance < amount) {\\n            token.safeIncreaseAllowance(spender, amount - currentAllowance);\\n        } else if (currentAllowance > amount) {\\n            token.safeDecreaseAllowance(spender, currentAllowance - amount);\\n            // Clean mappings if allowance decreases for Uniswap, 1Inch or Angle routers\\n            if (spender == address(uniV3Router)) delete uniAllowedToken[token];\\n            else if (spender == oneInch) delete oneInchAllowedToken[token];\\n            else if (spender == address(angleRouter)) delete angleRouterAllowedToken[token];\\n        }\\n    }\\n\\n    /// @notice Performs a swap using either Uniswap, 1Inch. This function can also stake stETH to wstETH\\n    /// @param inToken Token to swap\\n    /// @param amount Amount of tokens to swap\\n    /// @param swapType Type of the swap to perform\\n    /// @param args Extra args for the swap: in the case of Uniswap it should be a path, for 1Inch it should be\\n    /// a payload\\n    /// @dev If `swapType` is a wrap, then the `inToken` should be `stETH` otherwise the function will revert\\n    /// @dev This function does nothing if `swapType` is None and it simply passes on the `amount` it received\\n    function _swap(\\n        IERC20 inToken,\\n        uint256 amount,\\n        SwapType swapType,\\n        bytes memory args\\n    ) internal returns (uint256 amountOut) {\\n        if (swapType == SwapType.UniswapV3) amountOut = _swapOnUniswapV3(inToken, amount, args);\\n        else if (swapType == SwapType.oneInch) amountOut = _swapOn1Inch(inToken, args);\\n        else if (swapType == SwapType.Wrap) amountOut = wStETH.wrap(amount);\\n        else amountOut = amount;\\n    }\\n\\n    /// @notice Checks whether a the AngleRouter was given approval for a token and if yes approves\\n    /// this token\\n    /// @param token Token for which the approval to the `AngleRouter` should be checked\\n    function _checkAngleRouterAllowance(IERC20 token) internal {\\n        if (!angleRouterAllowedToken[token]) {\\n            _changeAllowance(token, address(angleRouter), type(uint256).max);\\n            angleRouterAllowedToken[token] = true;\\n        }\\n    }\\n\\n    /// @notice Performs a UniswapV3 swap\\n    /// @param inToken Token to swap\\n    /// @param amount Amount of tokens to swap\\n    /// @param path Path for the UniswapV3 swap: this encodes the out token that is going to be obtained\\n    /// @dev We don't specify a slippage here as in the `swap` function a final slippage check\\n    /// is performed at the end\\n    /// @dev This function does not check the out token obtained here: if it is wrongly specified, either\\n    /// the `swap` function could fail or these tokens could stay on the contract\\n    function _swapOnUniswapV3(\\n        IERC20 inToken,\\n        uint256 amount,\\n        bytes memory path\\n    ) internal returns (uint256 amountOut) {\\n        // Approve transfer to the `uniswapV3Router` if it is the first time that the token is used\\n        if (!uniAllowedToken[inToken]) {\\n            _changeAllowance(inToken, address(uniV3Router), type(uint256).max);\\n            uniAllowedToken[inToken] = true;\\n        }\\n        amountOut = uniV3Router.exactInput(ExactInputParams(path, address(this), block.timestamp, amount, 0));\\n    }\\n\\n    /// @notice Allows to swap any token to an accepted collateral via 1Inch API\\n    /// @param inToken Token received for the 1Inch swap\\n    /// @param payload Bytes needed for 1Inch API\\n    /// @dev Here again, we don't specify a slippage here as in the `swap` function a final slippage check\\n    /// is performed at the end\\n    function _swapOn1Inch(IERC20 inToken, bytes memory payload) internal returns (uint256 amountOut) {\\n        // Approve transfer to the `oneInch` router if it is the first time the token is used\\n        if (!oneInchAllowedToken[inToken]) {\\n            _changeAllowance(inToken, oneInch, type(uint256).max);\\n            oneInchAllowedToken[inToken] = true;\\n        }\\n\\n        //solhint-disable-next-line\\n        (bool success, bytes memory result) = oneInch.call(payload);\\n        if (!success) _revertBytes(result);\\n\\n        amountOut = abi.decode(result, (uint256));\\n    }\\n\\n    /// @notice Internal function used for error handling\\n    /// @param errMsg Error message received\\n    function _revertBytes(bytes memory errMsg) internal pure {\\n        if (errMsg.length > 0) {\\n            //solhint-disable-next-line\\n            assembly {\\n                revert(add(32, errMsg), mload(errMsg))\\n            }\\n        }\\n        revert EmptyReturnMessage();\\n    }\\n}\\n\",\"keccak256\":\"0x3cee606043a1f8b0d054f5ef46274e008e7a6b926e9ed0d27c772fa69546de06\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100c05760003560e01c80635fafa58911610074578063b82c4dc11161004e578063b82c4dc11461027e578063f2f4eb261461029e578063f5a418bb146102d257600080fd5b80635fafa589146102025780639f48118f14610236578063a5d4096b1461025c57600080fd5b80630db3280f116100a55780630db3280f1461015e5780630df8080f1461019e578063270a17c9146101d257600080fd5b8063045c08d5146100cc5780630b6942c21461012a57600080fd5b366100c757005b600080fd5b3480156100d857600080fd5b506101007f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561013657600080fd5b506101007f000000000000000000000000000000000000000000000000000000000000000081565b34801561016a57600080fd5b5061018e610179366004611abf565b60006020819052908152604090205460ff1681565b6040519015158152602001610121565b3480156101aa57600080fd5b506101007f000000000000000000000000000000000000000000000000000000000000000081565b3480156101de57600080fd5b5061018e6101ed366004611abf565b60026020526000908152604090205460ff1681565b34801561020e57600080fd5b506101007f000000000000000000000000000000000000000000000000000000000000000081565b34801561024257600080fd5b5061024e633b9aca0081565b604051908152602001610121565b34801561026857600080fd5b5061027c610277366004611ba0565b610302565b005b34801561028a57600080fd5b5061027c610299366004611cb6565b6108ae565b3480156102aa57600080fd5b506101007f000000000000000000000000000000000000000000000000000000000000000081565b3480156102de57600080fd5b5061018e6102ed366004611abf565b60016020526000908152604090205460ff1681565b60008060008060008580602001905181019061031e9190611da1565b9a5093985091965094509250905073ffffffffffffffffffffffffffffffffffffffff84161561034e5783610350565b885b9350806fffffffffffffffffffffffffffffffff16600114156104c9576103768b610c90565b6040517fee7b4950000000000000000000000000000000000000000000000000000000008152306004820152602481018890526000604482015273ffffffffffffffffffffffffffffffffffffffff8c8116606483015286811660848301527f0000000000000000000000000000000000000000000000000000000000000000169063ee7b49509060a401600060405180830381600087803b15801561041b57600080fd5b505af115801561042f573d6000803e3d6000fd5b50506040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152969c508c9673ffffffffffffffffffffffffffffffffffffffff881692506370a082319150602401602060405180830381865afa1580156104a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c69190611e6b565b96505b6104f88b88846fffffffffffffffffffffffffffffffff1660038111156104f2576104f2611e84565b89610d5a565b9650806fffffffffffffffffffffffffffffffff16600214156105dc5761051e85610c90565b6040517fb044d1e0000000000000000000000000000000000000000000000000000000008152306004820152602481018890526000604482015273ffffffffffffffffffffffffffffffffffffffff8b8116606483015286811660848301527f0000000000000000000000000000000000000000000000000000000000000000169063b044d1e09060a401600060405180830381600087803b1580156105c357600080fd5b505af11580156105d7573d6000803e3d6000fd5b505050505b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8c16906370a0823190602401602060405180830381865afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190611e6b565b90508381116106a8576040517f22313ae900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b81166004830152600091908d16906370a0823190602401602060405180830381865afa158015610718573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073c9190611e6b565b9050898110158061077857508a73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16145b156107a35761079e73ffffffffffffffffffffffffffffffffffffffff8d168784610e81565b6107e8565b6107cf8b6107b1838d611ee2565b73ffffffffffffffffffffffffffffffffffffffff8f169190610e81565b6107e8868b6107de8585611ef9565b6107b19190611ee2565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8e16906370a0823190602401602060405180830381865afa158015610852573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108769190611e6b565b9850881561089f5761089f73ffffffffffffffffffffffffffffffffffffffff8e16878b610e81565b50505050505050505050505050565b6040517f521d4de90000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063521d4de990602401602060405180830381865afa158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c9190611f11565b610992576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84831415806109a15750848114155b156109d8576040517f46282e8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b85811015610a6457610a528787838181106109f8576109f8611f33565b9050602002016020810190610a0d9190611abf565b868684818110610a1f57610a1f611f33565b9050602002016020810190610a349190611abf565b858585818110610a4657610a46611f33565b90506020020135610ed7565b80610a5c81611f62565b9150506109db565b50505050505050565b801580610b0d57506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa158015610ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0b9190611e6b565b155b610b9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084015b60405180910390fd5b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610c729084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526111ce565b505050565b6060610c8684846000856112da565b90505b9392505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604090205460ff16610d5757610d08817f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610ed7565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b50565b600080836003811115610d6f57610d6f611e84565b1415610d8757610d8085858461145a565b9050610e79565b6001836003811115610d9b57610d9b611e84565b1415610dab57610d8085836115fa565b6002836003811115610dbf57610dbf611e84565b1415610e76576040517fea598cb0000000000000000000000000000000000000000000000000000000008152600481018590527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063ea598cb0906024016020604051808303816000875af1158015610e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d809190611e6b565b50825b949350505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610c729084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401610bf0565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015610f4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f719190611e6b565b905081811015610fac57610fa783610f898385611ee2565b73ffffffffffffffffffffffffffffffffffffffff8716919061177e565b6111c8565b818111156111c857610fe083610fc28484611ee2565b73ffffffffffffffffffffffffffffffffffffffff8716919061187c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156110845773ffffffffffffffffffffffffffffffffffffffff8416600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556111c8565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156111285773ffffffffffffffffffffffffffffffffffffffff8416600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556111c8565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156111c85773ffffffffffffffffffffffffffffffffffffffff8416600090815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555b50505050565b6000611230826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610c779092919063ffffffff16565b805190915015610c72578080602001905181019061124e9190611f11565b610c72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b95565b60608247101561136c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b95565b843b6113d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b95565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516113fd9190611f9b565b60006040518083038185875af1925050503d806000811461143a576040519150601f19603f3d011682016040523d82523d6000602084013e61143f565b606091505b509150915061144f828286611a09565b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604081205460ff16611521576114d2847f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610ed7565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b6040805160a0810182528381523060208201524281830152606081018590526000608082015290517fc04b8d5900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163c04b8d59916115b79190600401612001565b6020604051808303816000875af11580156115d6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c869190611e6b565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001602052604081205460ff166116c457611672837f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610ed7565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020819052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790555b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168460405161170c9190611f9b565b6000604051808303816000865af19150503d8060008114611749576040519150601f19603f3d011682016040523d82523d6000602084013e61174e565b606091505b5091509150816117615761176181611a5c565b808060200190518101906117759190611e6b565b95945050505050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156117f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118199190611e6b565b6118239190611ef9565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018290529091506111c89085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401610bf0565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301526000919085169063dd62ed3e90604401602060405180830381865afa1580156118f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119169190611e6b565b9050818110156119a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e6365206260448201527f656c6f77207a65726f00000000000000000000000000000000000000000000006064820152608401610b95565b60405173ffffffffffffffffffffffffffffffffffffffff841660248201528282036044820181905290611a029086907f095ea7b30000000000000000000000000000000000000000000000000000000090606401610bf0565b5050505050565b60608315611a18575081610c89565b825115611a285782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b959190612067565b805115611a6b57805181602001fd5b6040517f6a8df6a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610d5757600080fd5b600060208284031215611ad157600080fd5b8135610c8981611a9d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611b5257611b52611adc565b604052919050565b600067ffffffffffffffff821115611b7457611b74611adc565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60008060008060008060c08789031215611bb957600080fd5b8635611bc481611a9d565b95506020870135611bd481611a9d565b94506040870135611be481611a9d565b9350606087013592506080870135915060a087013567ffffffffffffffff811115611c0e57600080fd5b8701601f81018913611c1f57600080fd5b8035611c32611c2d82611b5a565b611b0b565b8181528a6020838501011115611c4757600080fd5b816020840160208301376000602083830101528093505050509295509295509295565b60008083601f840112611c7c57600080fd5b50813567ffffffffffffffff811115611c9457600080fd5b6020830191508360208260051b8501011115611caf57600080fd5b9250929050565b60008060008060008060608789031215611ccf57600080fd5b863567ffffffffffffffff80821115611ce757600080fd5b611cf38a838b01611c6a565b90985096506020890135915080821115611d0c57600080fd5b611d188a838b01611c6a565b90965094506040890135915080821115611d3157600080fd5b50611d3e89828a01611c6a565b979a9699509497509295939492505050565b80516fffffffffffffffffffffffffffffffff81168114611d7057600080fd5b919050565b60005b83811015611d90578181015183820152602001611d78565b838111156111c85750506000910152565b60008060008060008060c08789031215611dba57600080fd5b8651611dc581611a9d565b6020880151909650611dd681611a9d565b60408801519095509350611dec60608801611d50565b9250611dfa60808801611d50565b915060a087015167ffffffffffffffff811115611e1657600080fd5b8701601f81018913611e2757600080fd5b8051611e35611c2d82611b5a565b8181528a6020838501011115611e4a57600080fd5b611e5b826020830160208601611d75565b8093505050509295509295509295565b600060208284031215611e7d57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611ef457611ef4611eb3565b500390565b60008219821115611f0c57611f0c611eb3565b500190565b600060208284031215611f2357600080fd5b81518015158114610c8957600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611f9457611f94611eb3565b5060010190565b60008251611fad818460208701611d75565b9190910192915050565b60008151808452611fcf816020860160208601611d75565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000825160a0602084015261201d60c0840182611fb7565b905073ffffffffffffffffffffffffffffffffffffffff60208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b602081526000610c896020830184611fb756fea2646970667358221220dff39895f28e4ad0a6b53aa7e61b07448e2fdd8b7392d5e60df1b73f7219f93f64736f6c634300080c0033",
  "devdoc": {
    "author": "Angle Core Team",
    "kind": "dev",
    "methods": {
      "changeAllowance(address[],address[],uint256[])": {
        "params": {
          "amounts": "Amounts to allow",
          "spenders": "Addresses to allow transfer",
          "tokens": "Addresses of the tokens to allow"
        }
      },
      "constructor": {
        "params": {
          "_angleRouter": "Address of the AngleRouter contract",
          "_core": "Core address",
          "_oneInch": "1Inch Router address",
          "_uniV3Router": "UniswapV3 Router address",
          "_wStETH": "wStETH Address"
        }
      },
      "swap(address,address,address,uint256,uint256,bytes)": {
        "details": "This function swaps the `inToken` to the `outToken` by either doing mint, or burn from the protocol or/and combining it with a UniV3 or 1Inch swapNo slippage checks are performed at the end of each operation, only one slippage check is performed at the end of the callIn this implementation, the function tries to make sure that the `outTokenRecipient` address has at the end of the call `outTokenOwed`, leftover tokens are sent to a `to` address which by default is the `outTokenRecipient`",
        "params": {
          "data": "Extra data needed (to encode Uniswap swaps for instance)",
          "inToken": "Address of the token received",
          "inTokenObtained": "Amount of collateral obtained by a related address prior to the call to this function",
          "outToken": "Address of the token to obtain",
          "outTokenOwed": "Minimum amount of outToken the `outTokenRecipient` address should have at the end of the call",
          "outTokenRecipient": "Address to which the outToken should be sent"
        }
      }
    },
    "title": "Swapper",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BASE_PARAMS()": {
        "notice": "Base used for parameter computation"
      },
      "angleRouter()": {
        "notice": "AngleRouter"
      },
      "angleRouterAllowedToken(address)": {
        "notice": "Whether the token was already approved on AngleRouter"
      },
      "changeAllowance(address[],address[],uint256[])": {
        "notice": "Changes allowance for a contract"
      },
      "constructor": {
        "notice": "Constructor of the contract"
      },
      "core()": {
        "notice": "Reference to the `CoreBorrow` contract of the module which handles all AccessControl logic"
      },
      "oneInch()": {
        "notice": "1Inch Router"
      },
      "oneInchAllowedToken(address)": {
        "notice": "Whether the token was already approved on 1Inch"
      },
      "swap(address,address,address,uint256,uint256,bytes)": {
        "notice": "Notifies a contract that an address should be given `outToken` from `inToken`"
      },
      "uniAllowedToken(address)": {
        "notice": "Whether the token was already approved on Uniswap router"
      },
      "uniV3Router()": {
        "notice": "Uniswap Router contract"
      },
      "wStETH()": {
        "notice": "Wrapped StETH contract"
      }
    },
    "notice": "Swapper contract facilitating interactions with the VaultManager: to liquidate and get leverage",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19432,
        "contract": "contracts/swapper/Swapper.sol:Swapper",
        "label": "uniAllowedToken",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_contract(IERC20)5295,t_bool)"
      },
      {
        "astId": 19438,
        "contract": "contracts/swapper/Swapper.sol:Swapper",
        "label": "oneInchAllowedToken",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(IERC20)5295,t_bool)"
      },
      {
        "astId": 19444,
        "contract": "contracts/swapper/Swapper.sol:Swapper",
        "label": "angleRouterAllowedToken",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_contract(IERC20)5295,t_bool)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)5295": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IERC20)5295,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)5295",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}