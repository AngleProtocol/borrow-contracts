{
  "address": "0x9a8A1D7Eac06871f60158f127704F3910613E3c3",
  "abi": [
    {
      "inputs": [],
      "name": "InsufficientAssets",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "claim_rewards",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "claimableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gauge",
      "outputs": [
        {
          "internalType": "contract ILiquidityGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "integral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "integralOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "redeemable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pendingRewardsOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sanToken",
      "outputs": [
        {
          "internalType": "contract IERC20MetadataUpgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableMaster",
      "outputs": [
        {
          "internalType": "contract IStableMaster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3904322438fe020ce4f65b186680d3e68e39a171b1307f9027dd03b7d13a495a",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0x9a8A1D7Eac06871f60158f127704F3910613E3c3",
    "transactionIndex": 64,
    "gasUsed": "3417851",
    "logsBloom": "0x
    "blockHash": "0x7f72d1e3b0ce1a880f1cc7bb98b084b64ad093f779175cc31dbab2bc0290e3f4",
    "transactionHash": "0x3904322438fe020ce4f65b186680d3e68e39a171b1307f9027dd03b7d13a495a",
    "logs": [
      {
        "transactionIndex": 64,
        "blockNumber": 16433317,
        "transactionHash": "0x3904322438fe020ce4f65b186680d3e68e39a171b1307f9027dd03b7d13a495a",
        "address": "0x9a8A1D7Eac06871f60158f127704F3910613E3c3",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 71,
        "blockHash": "0x7f72d1e3b0ce1a880f1cc7bb98b084b64ad093f779175cc31dbab2bc0290e3f4"
      }
    ],
    "blockNumber": 16433317,
    "cumulativeGasUsed": "7914156",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a4185ef45e10f971f41e283046205063",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InsufficientAssets\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"claim_rewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"contract ILiquidityGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"integral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"integralOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingRewardsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sanToken\",\"outputs\":[{\"internalType\":\"contract IERC20MetadataUpgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableMaster\",\"outputs\":[{\"internalType\":\"contract IStableMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Labs, Inc.\",\"details\":\"FRAX stakable implementation\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"asset()\":{\"details\":\"Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing. - MUST be an ERC-20 token contract. - MUST NOT revert.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"claim_rewards(address)\":{\"params\":{\"from\":\"Address to claim for\"},\"returns\":{\"_0\":\"rewardAmounts Amounts of each reward token claimed by the user\"}},\"claimableRewards(address,address)\":{\"params\":{\"_rewardToken\":\"Token to get rewards for\",\"user\":\"Address to claim for\"}},\"convertToAssets(uint256)\":{\"details\":\"Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"convertToShares(uint256)\":{\"details\":\"Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256,address)\":{\"details\":\"Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   deposit execution, and are accounted for during deposit. - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"gauge()\":{\"details\":\"This function is only useful in the stakable implementation\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"maxDeposit(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call. - MUST return a limited value if receiver is subject to some deposit limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited. - MUST NOT revert.\"},\"maxMint(address)\":{\"details\":\"Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call. - MUST return a limited value if receiver is subject to some mint limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted. - MUST NOT revert.\"},\"maxRedeem(address)\":{\"details\":\"Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock. - MUST NOT revert.\"},\"maxWithdraw(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST NOT revert.\"},\"mint(uint256,address)\":{\"details\":\"Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint   execution, and are accounted for during mint. - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"previewMint(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting.\"},\"previewRedeem(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming.\"},\"previewWithdraw(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if   called   in the same transaction. - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though   the withdrawal would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"redeem(uint256,address,address)\":{\"details\":\"Burns exactly shares from owner and sends assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   redeem execution, and are accounted for during redeem. - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"details\":\"Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault. - SHOULD include any compounding that occurs from yield. - MUST be inclusive of any fees that are charged against assets in the Vault. - MUST NOT revert.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"withdraw(uint256,address,address)\":{\"details\":\"Burns shares from owner and sends exactly assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   withdraw execution, and are accounted for during withdraw. - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"}},\"title\":\"SanFRAXEURERC4626AdapterStakable\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"availableBalance()\":{\"notice\":\"Returns the available balance of the token in the associated `PoolManager`\"},\"claimRewards(address)\":{\"notice\":\"Same as the function above\"},\"claim_rewards(address)\":{\"notice\":\"Claims earned rewards for user `from`\"},\"claimableRewards(address,address)\":{\"notice\":\"Returns the exact amount that will be received if calling `claim_rewards(from)` for a specific reward token\"},\"gauge()\":{\"notice\":\"Returns the gauge address\"},\"initialize()\":{\"notice\":\"Initializes the contract\"},\"integral(address)\":{\"notice\":\"Maps each reward token to a track record of cumulated rewards\"},\"integralOf(address,address)\":{\"notice\":\"Maps pairs of `(token,user)` to a track record of cumulated personal rewards\"},\"pendingRewardsOf(address,address)\":{\"notice\":\"Maps pairs of `(token,user)` to the currently pending claimable rewards\"},\"poolManager()\":{\"notice\":\"Address of the corresponding poolManager\"},\"sanToken()\":{\"notice\":\"Address of the associated sanToken\"},\"stableMaster()\":{\"notice\":\"Address of the `StableMaster` in the Core module of the protocol\"}},\"notice\":\"IERC4626 Adapter for SanTokens of the Angle Protocol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/implementations/Stakable/SanFRAXEURERC4626AdapterStakable.sol\":\"SanFRAXEURERC4626AdapterStakable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\",\"keccak256\":\"0xe26a9d6acdb88e0b83c7659f9c809847da6996528dc8a4e6f0ed14e395dd1657\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626Upgradeable is IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x2e991b91bca58c198c3ecd905d281c5e9ae230f4f34f14835294d5fa2d478991\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7c7ac0bc6c340a7f320524b9a4b4b079ee9da3c51258080d4bab237f329a427c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3b39e1a87bb94b9145d91007bbd2c964438e99a659b4accc6ec6df6a1c62589a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/adapters/SanTokenERC4626Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n/*\\n                  *                                                  \\u2588                              \\n                *****                                               \\u2593\\u2593\\u2593                             \\n                  *                                               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                         \\n                                   *            ///.           \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                       \\n                                 *****        ////////            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                          \\n                                   *       /////////////            \\u2593\\u2593\\u2593                             \\n                     \\u2593\\u2593                  //////////////////          \\u2588         \\u2593\\u2593                   \\n                   \\u2593\\u2593  \\u2593\\u2593             ///////////////////////                \\u2593\\u2593   \\u2593\\u2593                \\n                \\u2593\\u2593       \\u2593\\u2593        ////////////////////////////           \\u2593\\u2593        \\u2593\\u2593              \\n              \\u2593\\u2593            \\u2593\\u2593    /////////\\u2593\\u2593\\u2593///////\\u2593\\u2593\\u2593/////////       \\u2593\\u2593             \\u2593\\u2593            \\n           \\u2593\\u2593                 ,////////////////////////////////////// \\u2593\\u2593                 \\u2593\\u2593         \\n        \\u2593\\u2593                  //////////////////////////////////////////                     \\u2593\\u2593      \\n      \\u2593\\u2593                  //////////////////////\\u2593\\u2593\\u2593\\u2593/////////////////////                          \\n                       ,////////////////////////////////////////////////////                        \\n                    .//////////////////////////////////////////////////////////                     \\n                     .//////////////////////////\\u2588\\u2588.,//////////////////////////\\u2588                     \\n                       .//////////////////////\\u2588\\u2588\\u2588\\u2588..,./////////////////////\\u2588\\u2588                       \\n                        ...////////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588.....,.////////////////\\u2588\\u2588\\u2588                        \\n                          ,.,////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 ........,///////////\\u2588\\u2588\\u2588\\u2588                          \\n                            .,.,//////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588      ,.......///////\\u2588\\u2588\\u2588\\u2588                            \\n                               ,..//\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588           ........./\\u2588\\u2588\\u2588\\u2588                               \\n                                 ..,\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                .....,\\u2588\\u2588\\u2588                                 \\n                                    .\\u2588\\u2588                     ,.,\\u2588                                    \\n                                                                                                    \\n                                                                                                    \\n                                                                                                    \\n               \\u2593\\u2593            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n             \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593               \\u2593\\u2593               \\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593         \\n           \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593             \\n          \\u2593\\u2593\\u2593        \\u2593\\u2593      \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n*/\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"../interfaces/ICoreBorrow.sol\\\";\\nimport \\\"../interfaces/coreModule/ILiquidityGauge.sol\\\";\\nimport \\\"../interfaces/coreModule/IPoolManager.sol\\\";\\nimport \\\"../interfaces/coreModule/IStableMaster.sol\\\";\\nimport \\\"../utils/Constants.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title SanTokenERC4626Adapter\\n/// @author Angle Labs, Inc.\\n/// @notice IERC4626 Adapter for SanTokens of the Angle Protocol\\nabstract contract SanTokenERC4626Adapter is Initializable, ERC20Upgradeable, IERC4626Upgradeable, Constants {\\n    using MathUpgradeable for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256[50] private __gap;\\n\\n    // =============================== INITIALIZATION ==============================\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    /// @notice Initializes the contract\\n    function initialize() public initializer {\\n        __ERC20_init_unchained(\\n            string(abi.encodePacked(\\\"Angle \\\", sanToken().name(), \\\" Wrapper\\\")),\\n            string(abi.encodePacked(\\\"ag-wrapper-\\\", sanToken().symbol()))\\n        );\\n        IERC20(asset()).safeIncreaseAllowance(address(stableMaster()), type(uint256).max);\\n        if (address(gauge()) != address(0))\\n            IERC20(address(sanToken())).safeIncreaseAllowance(address(gauge()), type(uint256).max);\\n    }\\n\\n    // ============================= VIRTUAL FUNCTIONS =============================\\n\\n    /// @notice Address of the `StableMaster` in the Core module of the protocol\\n    function stableMaster() public view virtual returns (IStableMaster);\\n\\n    /// @notice Address of the corresponding poolManager\\n    function poolManager() public view virtual returns (address);\\n\\n    /// @notice Address of the associated sanToken\\n    function sanToken() public view virtual returns (IERC20MetadataUpgradeable);\\n\\n    /// @inheritdoc IERC4626Upgradeable\\n    function asset() public view virtual returns (address);\\n\\n    /// @inheritdoc IERC4626Upgradeable\\n    function totalAssets() public view virtual returns (uint256) {\\n        return _convertToAssetsWithSlippage(sanToken().balanceOf(address(this)));\\n    }\\n\\n    /// @notice Returns the gauge address\\n    /// @dev This function is only useful in the stakable implementation\\n    function gauge() public view virtual returns (ILiquidityGauge) {\\n        return ILiquidityGauge(address(0));\\n    }\\n\\n    // ========================== IERC4626 VIEW FUNCTIONS ==========================\\n\\n    /// @inheritdoc IERC20MetadataUpgradeable\\n    function decimals() public view override(ERC20Upgradeable, IERC20MetadataUpgradeable) returns (uint8) {\\n        return IERC20MetadataUpgradeable(asset()).decimals();\\n    }\\n\\n    /// @notice Returns the available balance of the token in the associated `PoolManager`\\n    function availableBalance() public view returns (uint256) {\\n        return IERC20(asset()).balanceOf(poolManager());\\n    }\\n\\n    /// @inheritdoc IERC4626Upgradeable\\n    function convertToShares(uint256 assets) public view returns (uint256 shares) {\\n        return _convertToShares(assets);\\n    }\\n\\n    /// @inheritdoc IERC4626Upgradeable\\n    function convertToAssets(uint256 shares) public view returns (uint256 assets) {\\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /// @inheritdoc IERC4626Upgradeable\\n    function maxDeposit(address) public pure returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /// @inheritdoc IERC4626Upgradeable\\n    function maxMint(address) public pure returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /// @inheritdoc IERC4626Upgradeable\\n    function previewDeposit(uint256 assets) public view returns (uint256) {\\n        return _convertToShares(assets);\\n    }\\n\\n    /// @inheritdoc IERC4626Upgradeable\\n    function previewMint(uint256 shares) public view returns (uint256) {\\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Up);\\n    }\\n\\n    /// @inheritdoc IERC4626Upgradeable\\n    function maxWithdraw(address owner) public view returns (uint256) {\\n        return MathUpgradeable.min(_convertToAssetsWithSlippage(balanceOf(owner)), availableBalance());\\n    }\\n\\n    /// @inheritdoc IERC4626Upgradeable\\n    function maxRedeem(address owner) public view returns (uint256 redeemable) {\\n        return MathUpgradeable.min(balanceOf(owner), _convertToSharesWithSlippage(availableBalance()));\\n    }\\n\\n    /// @inheritdoc IERC4626Upgradeable\\n    function previewWithdraw(uint256 assets) public view returns (uint256) {\\n        if (assets > availableBalance()) return type(uint256).max;\\n        return _convertToSharesWithSlippage(assets);\\n    }\\n\\n    /// @inheritdoc IERC4626Upgradeable\\n    function previewRedeem(uint256 shares) public view returns (uint256) {\\n        uint256 assets = _convertToAssetsWithSlippage(shares);\\n        if (assets > availableBalance()) return 0;\\n        else return assets;\\n    }\\n\\n    // ========================= IERC4626 ACTION FUNCTIONS =========================\\n\\n    /// @inheritdoc IERC4626Upgradeable\\n    function deposit(uint256 assets, address receiver) public returns (uint256) {\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(msg.sender, receiver, assets, shares);\\n        return shares;\\n    }\\n\\n    /// @inheritdoc IERC4626Upgradeable\\n    function mint(uint256 shares, address receiver) public returns (uint256) {\\n        uint256 assets = previewMint(shares);\\n        _deposit(msg.sender, receiver, assets, shares);\\n        return assets;\\n    }\\n\\n    /// @inheritdoc IERC4626Upgradeable\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public returns (uint256) {\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(msg.sender, receiver, owner, assets, shares);\\n        return shares;\\n    }\\n\\n    /// @inheritdoc IERC4626Upgradeable\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public returns (uint256) {\\n        uint256 assets = previewRedeem(shares);\\n        // This means that there are in fact not enough assets to cover for the shares that are being burnt\\n        if (assets == 0) revert InsufficientAssets();\\n        _withdraw(msg.sender, receiver, owner, assets, shares);\\n        return assets;\\n    }\\n\\n    // ============================== INTERNAL HELPERS =============================\\n\\n    /// @notice Estimates the current version of the sanRate for this collateral asset and the slippage value\\n    function _estimateSanRate() internal view returns (uint256, uint256) {\\n        (, , , , , uint256 sanRate, , SLPData memory slpData, ) = stableMaster().collateralMap(poolManager());\\n        if (block.timestamp != slpData.lastBlockUpdated && slpData.lockedInterests > 0) {\\n            uint256 sanMint = sanToken().totalSupply();\\n            if (sanMint != 0) {\\n                if (slpData.lockedInterests > slpData.maxInterestsDistributed) {\\n                    sanRate += (slpData.maxInterestsDistributed * _BASE_18) / sanMint;\\n                } else {\\n                    sanRate += (slpData.lockedInterests * _BASE_18) / sanMint;\\n                }\\n            }\\n        }\\n        return (sanRate, slpData.slippage);\\n    }\\n\\n    /// @notice Deposit/mint common workflow\\n    function _deposit(\\n        address caller,\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal {\\n        IERC20(asset()).safeTransferFrom(caller, address(this), assets);\\n        // It is expected that calling `stableMaster.deposit` will mint exactly `shares`\\n        // This assumption may no longer be valid if the `stableMaster` contract is upgraded\\n        stableMaster().deposit(assets, address(this), poolManager());\\n        _mint(receiver, shares);\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /// @notice Withdraw/redeem common workflow\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n        _burn(owner, shares);\\n        // Like for the `_deposit` function, this function is built under the assumption that\\n        // `stableMaster.withdraw` will return either `assets` or `assets+1`. It may no longer\\n        // hold if the `stableMaster` contract is upgraded.\\n        // Performing two transfers here to be sure that `receiver` exactly receives assets and not\\n        // `assets+1`\\n        stableMaster().withdraw(shares, address(this), address(this), poolManager());\\n        IERC20(asset()).safeTransfer(receiver, assets);\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    /// @notice Internal version of the `convertToShares` function\\n    /// @dev We round down by default\\n    function _convertToShares(uint256 assets) internal view returns (uint256 shares) {\\n        (uint256 sanRate, ) = _estimateSanRate();\\n        return assets.mulDiv(_BASE_18, sanRate, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /// @notice Internal version of the `convertToAssets` function\\n    function _convertToAssets(uint256 shares, MathUpgradeable.Rounding rounding)\\n        internal\\n        view\\n        returns (uint256 assets)\\n    {\\n        (uint256 sanRate, ) = _estimateSanRate();\\n        return shares.mulDiv(sanRate, _BASE_18, rounding);\\n    }\\n\\n    /// @notice Converts an amount of `assets` to a shares amount with potential exit slippage taken into account\\n    function _convertToSharesWithSlippage(uint256 assets) internal view returns (uint256 shares) {\\n        (uint256 sanRate, uint256 slippage) = _estimateSanRate();\\n        shares = assets.mulDiv(_BASE_27, (_BASE_9 - slippage) * sanRate, MathUpgradeable.Rounding.Up);\\n    }\\n\\n    /// @notice Converts an amount of `shares` to an assets amount with potential exit slippage taken into account\\n    function _convertToAssetsWithSlippage(uint256 shares) internal view returns (uint256 assets) {\\n        (uint256 sanRate, uint256 slippage) = _estimateSanRate();\\n        assets = shares.mulDiv((_BASE_9 - slippage) * sanRate, _BASE_27, MathUpgradeable.Rounding.Down);\\n    }\\n}\\n\",\"keccak256\":\"0xe8dd5c2cc46b42c6efac24f89125fbd540ad379f622a50813ec53eb5bc9e82f3\",\"license\":\"BUSL-1.1\"},\"contracts/adapters/SanTokenERC4626AdapterStakable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"./SanTokenERC4626Adapter.sol\\\";\\n\\n/// @title SanTokenERC4626AdapterStakable\\n/// @author Angle Labs, Inc.\\n/// @notice IERC4626 Adapter for SanTokens of the Angle Protocol\\n/// @dev In this implementation, sanTokens are staked and accumulate ANGLE rewards on top of the native rewards\\n/// @dev Rewards are claimed at every transfer or withdrawal\\n/// @dev This implementation could be generalized if multiple reward tokens are sent in the liquidity gauge contract\\nabstract contract SanTokenERC4626AdapterStakable is SanTokenERC4626Adapter {\\n    using MathUpgradeable for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Angle-related constants\\n    IERC20 private constant _ANGLE = IERC20(0x31429d1856aD1377A8A0079410B297e1a9e214c2);\\n\\n    // ================================= REFERENCES ================================\\n\\n    /// @notice Maps each reward token to a track record of cumulated rewards\\n    mapping(IERC20 => uint256) public integral;\\n    /// @notice Maps pairs of `(token,user)` to the currently pending claimable rewards\\n    mapping(IERC20 => mapping(address => uint256)) public pendingRewardsOf;\\n    /// @notice Maps pairs of `(token,user)` to a track record of cumulated personal rewards\\n    mapping(IERC20 => mapping(address => uint256)) public integralOf;\\n\\n    uint256[47] private __gapStakable;\\n\\n    /// @inheritdoc SanTokenERC4626Adapter\\n    function totalAssets() public view override returns (uint256) {\\n        return _convertToAssetsWithSlippage(IERC20(address(gauge())).balanceOf(address(this)));\\n    }\\n\\n    // ================================ ERC20 LOGIC ================================\\n\\n    /// @inheritdoc ERC20Upgradeable\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 amount\\n    ) internal override {\\n        // Not claiming only if it is a deposit\\n        bool _claim = !(_from == address(0));\\n        _claimContractRewards();\\n        _checkpointRewardsUser(_from, _claim);\\n        _checkpointRewardsUser(_to, _claim);\\n        // If the user is withdrawing, we need to unstake from the gauge\\n        if (_to == address(0)) gauge().withdraw(amount, false);\\n        if (_from == address(0)) gauge().deposit(amount, address(this), false);\\n    }\\n\\n    // ================================ USER ACTIONS ===============================\\n\\n    /// @notice Claims earned rewards for user `from`\\n    /// @param from Address to claim for\\n    /// @return rewardAmounts Amounts of each reward token claimed by the user\\n    //solhint-disable-next-line\\n    function claim_rewards(address from) public returns (uint256[] memory) {\\n        _claimContractRewards();\\n        return _checkpointRewardsUser(from, true);\\n    }\\n\\n    /// @notice Same as the function above\\n    function claimRewards(address from) external returns (uint256[] memory) {\\n        return claim_rewards(from);\\n    }\\n\\n    /// @notice Returns the exact amount that will be received if calling `claim_rewards(from)` for a specific reward token\\n    /// @param user Address to claim for\\n    /// @param _rewardToken Token to get rewards for\\n    function claimableRewards(address user, IERC20 _rewardToken) external view returns (uint256) {\\n        uint256 _totalSupply = totalSupply();\\n        uint256 newIntegral = _totalSupply != 0\\n            ? integral[_rewardToken] + (_rewardsToBeClaimed(_rewardToken) * _BASE_36) / _totalSupply\\n            : integral[_rewardToken];\\n        uint256 newClaimable = (balanceOf(user) * (newIntegral - integralOf[_rewardToken][user])) / _BASE_36;\\n        return pendingRewardsOf[_rewardToken][user] + newClaimable;\\n    }\\n\\n    // ======================== INTERNAL ACCOUNTING HELPERS ========================\\n\\n    /// @notice Checkpoints rewards earned by a user\\n    /// @param user Address to claim rewards for\\n    /// @param _claim Whether to claim or not the rewards\\n    /// @return rewardAmounts Amounts of the different reward tokens earned by the user\\n    function _checkpointRewardsUser(address user, bool _claim) internal returns (uint256[] memory rewardAmounts) {\\n        IERC20[] memory rewardTokens = _getRewards();\\n        uint256 rewardTokensLength = rewardTokens.length;\\n        rewardAmounts = new uint256[](rewardTokensLength);\\n        if (user == address(0)) return rewardAmounts;\\n        uint256 userBalance = balanceOf(user);\\n        for (uint256 i; i < rewardTokensLength; ++i) {\\n            uint256 totalClaimable = (userBalance * (integral[rewardTokens[i]] - integralOf[rewardTokens[i]][user])) /\\n                _BASE_36 +\\n                pendingRewardsOf[rewardTokens[i]][user];\\n            if (totalClaimable != 0) {\\n                if (_claim) {\\n                    pendingRewardsOf[rewardTokens[i]][user] = 0;\\n                    rewardTokens[i].safeTransfer(user, totalClaimable);\\n                } else {\\n                    pendingRewardsOf[rewardTokens[i]][user] = totalClaimable;\\n                }\\n                rewardAmounts[i] = totalClaimable;\\n            }\\n            integralOf[rewardTokens[i]][user] = integral[rewardTokens[i]];\\n        }\\n    }\\n\\n    /// @notice Claims all available rewards and increases the associated integral\\n    function _claimContractRewards() internal virtual {\\n        IERC20[] memory rewardTokens = _getRewards();\\n        uint256 rewardTokensLength = rewardTokens.length;\\n        uint256[] memory prevBalances = new uint256[](rewardTokensLength);\\n        for (uint256 i; i < rewardTokensLength; ++i) {\\n            prevBalances[i] = rewardTokens[i].balanceOf(address(this));\\n        }\\n        gauge().claim_rewards(address(this), address(0));\\n        for (uint256 i; i < rewardTokensLength; ++i) {\\n            IERC20 rewardToken = rewardTokens[i];\\n            uint256 rewards = rewardToken.balanceOf(address(this)) - prevBalances[i];\\n            _updateRewards(rewardToken, rewards);\\n        }\\n    }\\n\\n    /// @notice Adds the contract claimed rewards to the distributed rewards\\n    /// @param rewardToken Reward token that must be updated\\n    /// @param amount Amount to add to the claimable rewards\\n    function _updateRewards(IERC20 rewardToken, uint256 amount) internal {\\n        uint256 _totalSupply = totalSupply();\\n        if (_totalSupply != 0) integral[rewardToken] += (amount * _BASE_36) / _totalSupply;\\n    }\\n\\n    /// @notice Gets the reward tokens given in the liquidity gauge\\n    function _getRewards() internal pure virtual returns (IERC20[] memory rewards) {\\n        rewards = new IERC20[](1);\\n        rewards[0] = _ANGLE;\\n        return rewards;\\n    }\\n\\n    /// @notice Checks all unclaimed rewards in `rewardToken`\\n    function _rewardsToBeClaimed(IERC20 rewardToken) internal view virtual returns (uint256 amount) {\\n        return gauge().claimable_reward(address(this), address(rewardToken));\\n    }\\n}\\n\",\"keccak256\":\"0xf3f2ce6b214e35bbc74db454ece8c6260af3892efa83ad88d616dd68ec181ada\",\"license\":\"BUSL-1.1\"},\"contracts/adapters/implementations/Stakable/SanFRAXEURERC4626AdapterStakable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"../../SanTokenERC4626AdapterStakable.sol\\\";\\n\\n/// @title SanFRAXEURERC4626AdapterStakable\\n/// @author Angle Labs, Inc.\\n/// @notice IERC4626 Adapter for SanTokens of the Angle Protocol\\n/// @dev FRAX stakable implementation\\ncontract SanFRAXEURERC4626AdapterStakable is SanTokenERC4626AdapterStakable {\\n    /// @inheritdoc SanTokenERC4626Adapter\\n    function stableMaster() public pure override returns (IStableMaster) {\\n        return IStableMaster(0x5adDc89785D75C86aB939E9e15bfBBb7Fc086A87);\\n    }\\n\\n    /// @inheritdoc SanTokenERC4626Adapter\\n    function poolManager() public pure override returns (address) {\\n        return 0x6b4eE7352406707003bC6f6b96595FD35925af48;\\n    }\\n\\n    /// @inheritdoc SanTokenERC4626Adapter\\n    function sanToken() public pure override returns (IERC20MetadataUpgradeable) {\\n        return IERC20MetadataUpgradeable(0xb3B209Bb213A5Da5B947C56f2C770b3E1015f1FE);\\n    }\\n\\n    /// @inheritdoc SanTokenERC4626Adapter\\n    function asset() public pure override returns (address) {\\n        return 0x853d955aCEf822Db058eb8505911ED77F175b99e;\\n    }\\n\\n    /// @inheritdoc SanTokenERC4626Adapter\\n    function gauge() public pure override returns (ILiquidityGauge) {\\n        return ILiquidityGauge(0xb40432243E4F317cE287398e72Ab8f0312fc2FE8);\\n    }\\n}\\n\",\"keccak256\":\"0x63484baf9041f62e68c1ce01a2a5ac0b59b15b00bddfc0507d0e0a1748bb5907\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ICoreBorrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title ICoreBorrow\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the `CoreBorrow` contract\\n/// @dev This interface only contains functions of the `CoreBorrow` contract which are called by other contracts\\n/// of this module\\ninterface ICoreBorrow {\\n    /// @notice Checks if an address corresponds to a treasury of a stablecoin with a flash loan\\n    /// module initialized on it\\n    /// @param treasury Address to check\\n    /// @return Whether the address has the `FLASHLOANER_TREASURY_ROLE` or not\\n    function isFlashLoanerTreasury(address treasury) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GOVERNOR_ROLE` or not\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor or a guardian of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GUARDIAN_ROLE` or not\\n    /// @dev Governance should make sure when adding a governor to also give this governor the guardian\\n    /// role by calling the `addGovernor` function\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x10249210cbf522775f040baf981d7d037472168ce2746d87473ac7c29a34e62e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/coreModule/ILiquidityGauge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\ninterface ILiquidityGauge {\\n    function deposit(\\n        uint256 _value,\\n        address _addr,\\n        // solhint-disable-next-line\\n        bool _claim_rewards\\n    ) external;\\n\\n    function withdraw(\\n        uint256 _value,\\n        // solhint-disable-next-line\\n        bool _claim_rewards\\n    ) external;\\n\\n    // solhint-disable-next-line\\n    function claim_rewards(address _addr, address _receiver) external;\\n\\n    // solhint-disable-next-line\\n    function claimable_reward(address _addr, address _reward_token) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x33bc3f96975b3dd0fd8f443b7a6178d1de184c9e62547418cc174489bbcf7adc\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/coreModule/IOracleCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title IOracleCore\\n/// @author Angle Labs, Inc.\\ninterface IOracleCore {\\n    function readUpper() external view returns (uint256);\\n\\n    function readQuoteLower(uint256 baseAmount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x090edd176d7d9ebb3f45028ad3e4b5187adec1dc8aa722d7cf0a10e5ff617ed7\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/coreModule/IPerpetualManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title IPerpetualManager\\n/// @author Angle Labs, Inc.\\ninterface IPerpetualManager {\\n    function totalHedgeAmount() external view returns (uint256);\\n\\n    function maintenanceMargin() external view returns (uint64);\\n\\n    function maxLeverage() external view returns (uint64);\\n\\n    function targetHAHedge() external view returns (uint64);\\n\\n    function limitHAHedge() external view returns (uint64);\\n\\n    function lockTime() external view returns (uint64);\\n\\n    function haBonusMalusDeposit() external view returns (uint64);\\n\\n    function haBonusMalusWithdraw() external view returns (uint64);\\n\\n    function xHAFeesDeposit(uint256) external view returns (uint64);\\n\\n    function yHAFeesDeposit(uint256) external view returns (uint64);\\n\\n    function xHAFeesWithdraw(uint256) external view returns (uint64);\\n\\n    function yHAFeesWithdraw(uint256) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x9be94a9a4cb81f8df99a94414c0eb340b327a35004182a461d15322e74163377\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/coreModule/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title IPoolManager\\n/// @author Angle Labs, Inc.\\ninterface IPoolManager {\\n    function feeManager() external view returns (address);\\n\\n    function strategyList(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0x816c34988a8a890a64d6931f2b8b2bf0a9f53476e12362747abb3b057d5fe088\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/coreModule/IStableMaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"./IPerpetualManager.sol\\\";\\nimport \\\"./IOracleCore.sol\\\";\\n\\n// Struct to handle all the parameters to manage the fees\\n// related to a given collateral pool (associated to the stablecoin)\\nstruct MintBurnData {\\n    // Values of the thresholds to compute the minting fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeMint;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeMint;\\n    // Values of the thresholds to compute the burning fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeBurn;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeBurn;\\n    // Max proportion of collateral from users that can be covered by HAs\\n    // It is exactly the same as the parameter of the same name in `PerpetualManager`, whenever one is updated\\n    // the other changes accordingly\\n    uint64 targetHAHedge;\\n    // Minting fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusMint;\\n    // Burning fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusBurn;\\n    // Parameter used to limit the number of stablecoins that can be issued using the concerned collateral\\n    uint256 capOnStableMinted;\\n}\\n\\n// Struct to handle all the variables and parameters to handle SLPs in the protocol\\n// including the fraction of interests they receive or the fees to be distributed to\\n// them\\nstruct SLPData {\\n    // Last timestamp at which the `sanRate` has been updated for SLPs\\n    uint256 lastBlockUpdated;\\n    // Fees accumulated from previous blocks and to be distributed to SLPs\\n    uint256 lockedInterests;\\n    // Max interests used to update the `sanRate` in a single block\\n    // Should be in collateral token base\\n    uint256 maxInterestsDistributed;\\n    // Amount of fees left aside for SLPs and that will be distributed\\n    // when the protocol is collateralized back again\\n    uint256 feesAside;\\n    // Part of the fees normally going to SLPs that is left aside\\n    // before the protocol is collateralized back again (depends on collateral ratio)\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippageFee;\\n    // Portion of the fees from users minting and burning\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 feesForSLPs;\\n    // Slippage factor that's applied to SLPs exiting (depends on collateral ratio)\\n    // If `slippage = BASE_PARAMS`, SLPs can get nothing, if `slippage = 0` they get their full claim\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippage;\\n    // Portion of the interests from lending\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 interestsForSLPs;\\n}\\n\\n/// @title IStableMaster\\n/// @author Angle Labs, Inc.\\ninterface IStableMaster {\\n    function agToken() external view returns (address);\\n\\n    function updateStocksUsers(uint256 amount, address poolManager) external;\\n\\n    function collateralMap(address poolManager)\\n        external\\n        view\\n        returns (\\n            address token,\\n            address sanToken,\\n            IPerpetualManager perpetualManager,\\n            IOracleCore oracle,\\n            uint256 stocksUsers,\\n            uint256 sanRate,\\n            uint256 collatBase,\\n            SLPData memory slpData,\\n            MintBurnData memory feeData\\n        );\\n\\n    function paused(bytes32) external view returns (bool);\\n\\n    function deposit(\\n        uint256 amount,\\n        address user,\\n        address poolManager\\n    ) external;\\n\\n    function withdraw(\\n        uint256 amount,\\n        address burner,\\n        address dest,\\n        address poolManager\\n    ) external;\\n}\\n\",\"keccak256\":\"0x00bd57d79a8c5e1001842481a371108495e120e4b2461423e1386338971cb256\",\"license\":\"GPL-3.0\"},\"contracts/utils/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nerror InsufficientAssets();\\n\\n/// @title Constants\\n/// @author Angle Labs, Inc.\\n/// @notice Constants and errors for Angle Protocol contracts\\ncontract Constants {\\n    uint256 internal constant _BASE_9 = 1e9;\\n    uint256 internal constant _BASE_18 = 1e18;\\n    uint256 internal constant _BASE_27 = 1e27;\\n    uint256 internal constant _BASE_36 = 1e36;\\n}\\n\",\"keccak256\":\"0xb1a9fa3b3f2659ca77a54462f9b230e3bc251e5210a98df0580fcaf62556f6da\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff1615808015620000335750600054600160ff909116105b8062000063575062000050306200013d60201b620011c51760201c565b15801562000063575060005460ff166001145b620000cb5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000ef576000805461ff0019166101001790555b801562000136576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b506200014c565b6001600160a01b03163b151590565b613ca6806200015c6000396000f3fe608060405234801561001057600080fd5b50600436106102ad5760003560e01c806394bf804d1161017b578063ba087652116100d8578063dc4c90d31161008c578063ec8a783311610071578063ec8a78331461062e578063ef5cfb8c14610659578063ef8b30f71461059557600080fd5b8063dc4c90d3146105ce578063dd62ed3e146105e857600080fd5b8063c6e6f592116100bd578063c6e6f59214610595578063ce96cb77146105a8578063d905777e146105bb57600080fd5b8063ba08765214610582578063c63d75b6146103ce57600080fd5b8063a9059cbb1161012f578063b18925af11610114578063b18925af14610542578063b3d7f6b91461055c578063b460af941461056f57600080fd5b8063a9059cbb14610527578063ab2f0e511461053a57600080fd5b806395d89b411161016057806395d89b41146104f2578063a457c2d7146104fa578063a6f19c841461050d57600080fd5b806394bf804d146104b457806395b586d1146104c757600080fd5b806338d52e0f116102295780636be9dcce116101dd57806370a08231116101c257806370a08231146104545780638129fc1c1461048a57806384e9bd7e1461049457600080fd5b80636be9dcce1461042e5780636e553f651461044157600080fd5b8063402d267d1161020e578063402d267d146103ce5780634cdad506146104015780636ac5dc461461041457600080fd5b806338d52e0f1461038057806339509351146103bb57600080fd5b80630a28a4771161028057806318160ddd1161026557806318160ddd1461034b57806323b872dd14610353578063313ce5671461036657600080fd5b80630a28a477146103185780630a5410da1461032b57600080fd5b806301e1d114146102b257806306fdde03146102cd57806307a2d13a146102e2578063095ea7b3146102f5575b600080fd5b6102ba61066c565b6040519081526020015b60405180910390f35b6102d5610720565b6040516102c4919061331c565b6102ba6102f036600461336d565b6107b2565b6103086103033660046133a8565b6107c5565b60405190151581526020016102c4565b6102ba61032636600461336d565b6107dd565b6102ba6103393660046133d4565b60976020526000908152604090205481565b6035546102ba565b6103086103613660046133f1565b61081e565b61036e610844565b60405160ff90911681526020016102c4565b73853d955acef822db058eb8505911ed77f175b99e5b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102c4565b6103086103c93660046133a8565b6108c9565b6102ba6103dc3660046133d4565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90565b6102ba61040f36600461336d565b610915565b735addc89785d75c86ab939e9e15bfbbb7fc086a87610396565b6102ba61043c366004613432565b610941565b6102ba61044f36600461346b565b610ab8565b6102ba6104623660046133d4565b73ffffffffffffffffffffffffffffffffffffffff1660009081526033602052604090205490565b610492610ad2565b005b6104a76104a23660046133d4565b610eb6565b6040516102c49190613490565b6102ba6104c236600461346b565b610ecb565b6102ba6104d5366004613432565b609960209081526000928352604080842090915290825290205481565b6102d5610ee5565b6103086105083660046133a8565b610ef4565b73b40432243e4f317ce287398e72ab8f0312fc2fe8610396565b6103086105353660046133a8565b610fd0565b6102ba610fde565b73b3b209bb213a5da5b947c56f2c770b3e1015f1fe610396565b6102ba61056a36600461336d565b6110b2565b6102ba61057d3660046134d4565b6110bf565b6102ba6105903660046134d4565b6110e2565b6102ba6105a336600461336d565b611134565b6102ba6105b63660046133d4565b61113f565b6102ba6105c93660046133d4565b611180565b736b4ee7352406707003bc6f6b96595fd35925af48610396565b6102ba6105f6366004613432565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260346020908152604080832093909416825291909152205490565b6102ba61063c366004613432565b609860209081526000928352604080842090915290825290205481565b6104a76106673660046133d4565b6111ba565b600061071b73b40432243e4f317ce287398e72ab8f0312fc2fe86040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa1580156106f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107169190613516565b6111e1565b905090565b60606036805461072f9061352f565b80601f016020809104026020016040519081016040528092919081815260200182805461075b9061352f565b80156107a85780601f1061077d576101008083540402835291602001916107a8565b820191906000526020600020905b81548152906001019060200180831161078b57829003601f168201915b5050505050905090565b60006107bf826000611225565b92915050565b6000336107d3818585611247565b5060019392505050565b60006107e7610fde565b82111561081557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff919050565b6107bf826113fa565b60003361082c85828561143f565b610837858585611516565b60019150505b9392505050565b600073853d955acef822db058eb8505911ed77f175b99e73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108a5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071b919061357d565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906107d390829086906109109087906135cf565b611247565b600080610921836111e1565b905061092b610fde565b8111156107bf5750600092915050565b50919050565b60008061094d60355490565b90506000816109815773ffffffffffffffffffffffffffffffffffffffff84166000908152609760205260409020546109df565b816ec097ce7bc90715b34b9f100000000061099b866117d4565b6109a591906135e7565b6109af9190613653565b73ffffffffffffffffffffffffffffffffffffffff85166000908152609760205260409020546109df91906135cf565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152609960209081526040808320938a16835292905290812054919250906ec097ce7bc90715b34b9f100000000090610a33908461368e565b73ffffffffffffffffffffffffffffffffffffffff8816600090815260336020526040902054610a6391906135e7565b610a6d9190613653565b73ffffffffffffffffffffffffffffffffffffffff8087166000908152609860209081526040808320938b1683529290522054909150610aae9082906135cf565b9695505050505050565b600080610ac484611134565b905061083d33848684611883565b600054610100900460ff1615808015610af25750600054600160ff909116105b80610b0c5750303b158015610b0c575060005460ff166001145b610b9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610bfb57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610d9173b3b209bb213a5da5b947c56f2c770b3e1015f1fe73ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610c5d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610ca3919081019061374d565b604051602001610cb391906137ff565b604051602081830303815290604052610cdd73b3b209bb213a5da5b947c56f2c770b3e1015f1fe90565b73ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610d27573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610d6d919081019061374d565b604051602001610d7d919061386b565b6040516020818303038152906040526119c7565b610dfd735addc89785d75c86ab939e9e15bfbbb7fc086a877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff73853d955acef822db058eb8505911ed77f175b99e5b73ffffffffffffffffffffffffffffffffffffffff169190611a8a565b610e5073b40432243e4f317ce287398e72ab8f0312fc2fe87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff73b3b209bb213a5da5b947c56f2c770b3e1015f1fe610de0565b8015610eb357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6060610ec0611c06565b6107bf826001611edd565b600080610ed7846110b2565b905061083d33848387611883565b60606037805461072f9061352f565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015610fb8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610b94565b610fc58286868403611247565b506001949350505050565b6000336107d3818585611516565b600073853d955acef822db058eb8505911ed77f175b99e73ffffffffffffffffffffffffffffffffffffffff166370a08231736b4ee7352406707003bc6f6b96595fd35925af486040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa15801561108e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071b9190613516565b60006107bf826001611225565b6000806110cb856107dd565b90506110da33858588856123ff565b949350505050565b6000806110ee85610915565b905080611127576040517f96d8043300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110da33858584896123ff565b60006107bf826125bd565b60006107bf6111736107168473ffffffffffffffffffffffffffffffffffffffff1660009081526033602052604090205490565b61117b610fde565b6125e0565b73ffffffffffffffffffffffffffffffffffffffff81166000908152603360205260408120546107bf9061117b6111b5610fde565b6113fa565b60606107bf82610eb6565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b60008060006111ee6125f6565b90925090506110da8261120583633b9aca0061368e565b61120f91906135e7565b85906b033b2e3c9fd0803ce80000006000612832565b6000806112306125f6565b5090506110da8482670de0b6b3a764000086612832565b73ffffffffffffffffffffffffffffffffffffffff83166112e9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610b94565b73ffffffffffffffffffffffffffffffffffffffff821661138c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610b94565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60008060006114076125f6565b90925090506110da6b033b2e3c9fd0803ce80000008361142b84633b9aca0061368e565b61143591906135e7565b8691906001612832565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152603460209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146115105781811015611503576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610b94565b6115108484848403611247565b50505050565b73ffffffffffffffffffffffffffffffffffffffff83166115b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610b94565b73ffffffffffffffffffffffffffffffffffffffff821661165c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610b94565b61166783838361288f565b73ffffffffffffffffffffffffffffffffffffffff83166000908152603360205260409020548181101561171d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610b94565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152603360205260408082208585039055918516815290812080548492906117619084906135cf565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516117c791815260200190565b60405180910390a3611510565b600073b40432243e4f317ce287398e72ab8f0312fc2fe86040517f33fd6f7400000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015291909116906333fd6f7490604401602060405180830381865afa15801561185f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bf9190613516565b6118a373853d955acef822db058eb8505911ed77f175b99e853085612a45565b604080517f2e2d298400000000000000000000000000000000000000000000000000000000815260048101849052306024820152736b4ee7352406707003bc6f6b96595fd35925af4860448201529051735addc89785d75c86ab939e9e15bfbbb7fc086a8791632e2d298491606480830192600092919082900301818387803b15801561192f57600080fd5b505af1158015611943573d6000803e3d6000fd5b505050506119518382612aa3565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d784846040516119b9929190918252602082015260400190565b60405180910390a350505050565b600054610100900460ff16611a5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610b94565b8151611a71906036906020850190613257565b508051611a85906037906020840190613257565b505050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015611b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b259190613516565b611b2f91906135cf565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018290529091506115109085907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612bcf565b6000611c10612cdb565b805190915060008167ffffffffffffffff811115611c3057611c306136a5565b604051908082528060200260200182016040528015611c59578160200160208202803683370190505b50905060005b82811015611d4057838181518110611c7957611c796138b0565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611cef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d139190613516565b828281518110611d2557611d256138b0565b6020908102919091010152611d39816138df565b9050611c5f565b5073b40432243e4f317ce287398e72ab8f0312fc2fe86040517f9faceb1b0000000000000000000000000000000000000000000000000000000081523060048201526000602482015273ffffffffffffffffffffffffffffffffffffffff9190911690639faceb1b90604401600060405180830381600087803b158015611dc657600080fd5b505af1158015611dda573d6000803e3d6000fd5b5050505060005b82811015611510576000848281518110611dfd57611dfd6138b0565b602002602001015190506000838381518110611e1b57611e1b6138b0565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015611e90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb49190613516565b611ebe919061368e565b9050611eca8282612d62565b505080611ed6906138df565b9050611de1565b60606000611ee9612cdb565b80519091508067ffffffffffffffff811115611f0757611f076136a5565b604051908082528060200260200182016040528015611f30578160200160208202803683370190505b50925073ffffffffffffffffffffffffffffffffffffffff8516611f555750506107bf565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260336020526040812054905b828110156123f557600060986000868481518110611f9d57611f9d6138b0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546ec097ce7bc90715b34b9f100000000060996000888681518110612043576120436138b0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054609760008987815181106120d9576120d96138b0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612126919061368e565b61213090866135e7565b61213a9190613653565b61214491906135cf565b905080156122f15786156122365760006098600087858151811061216a5761216a6138b0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506122318882878581518110612204576122046138b0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16612dd89092919063ffffffff16565b6122d1565b806098600087858151811061224d5761224d6138b0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b808683815181106122e4576122e46138b0565b6020026020010181815250505b60976000868481518110612307576123076138b0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460996000878581518110612360576123606138b0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050806123ee906138df565b9050611f7d565b5050505092915050565b8273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461243d5761243d83868361143f565b6124478382612e2e565b604080517f23e103a80000000000000000000000000000000000000000000000000000000081526004810183905230602482018190526044820152736b4ee7352406707003bc6f6b96595fd35925af4860648201529051735addc89785d75c86ab939e9e15bfbbb7fc086a87916323e103a891608480830192600092919082900301818387803b1580156124da57600080fd5b505af11580156124ee573d6000803e3d6000fd5b5050505061252f848361251273853d955acef822db058eb8505911ed77f175b99e90565b73ffffffffffffffffffffffffffffffffffffffff169190612dd8565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db85856040516125ae929190918252602082015260400190565b60405180910390a45050505050565b6000806125c86125f6565b50905061083d83670de0b6b3a7640000836000612832565b60008183106125ef578161083d565b5090919050565b6000808080735addc89785d75c86ab939e9e15bfbbb7fc086a8773ffffffffffffffffffffffffffffffffffffffff1663ba8b7223736b4ee7352406707003bc6f6b96595fd35925af486040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401600060405180830381865afa1580156126a9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526126ef9190810190613aa8565b509750509650505050505080600001514214158015612712575060008160200151115b1561281a57600073b3b209bb213a5da5b947c56f2c770b3e1015f1fe73ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279c9190613516565b90508015612818578160400151826020015111156127e85780670de0b6b3a764000083604001516127cd91906135e7565b6127d79190613653565b6127e190846135cf565b9250612818565b80670de0b6b3a7640000836020015161280191906135e7565b61280b9190613653565b61281590846135cf565b92505b505b60c00151909367ffffffffffffffff90911692509050565b600080612840868686613027565b9050600183600281111561285657612856613c03565b14801561287357506000848061286e5761286e613624565b868809115b15612886576128836001826135cf565b90505b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff831615156128b0611c06565b6128ba8482611edd565b506128c58382611edd565b5073ffffffffffffffffffffffffffffffffffffffff83166129805773b40432243e4f317ce287398e72ab8f0312fc2fe86040517f38d07436000000000000000000000000000000000000000000000000000000008152600481018490526000602482015273ffffffffffffffffffffffffffffffffffffffff91909116906338d0743690604401600060405180830381600087803b15801561296757600080fd5b505af115801561297b573d6000803e3d6000fd5b505050505b73ffffffffffffffffffffffffffffffffffffffff84166115105773b40432243e4f317ce287398e72ab8f0312fc2fe86040517f83df6747000000000000000000000000000000000000000000000000000000008152600481018490523060248201526000604482015273ffffffffffffffffffffffffffffffffffffffff91909116906383df674790606401600060405180830381600087803b158015612a2757600080fd5b505af1158015612a3b573d6000803e3d6000fd5b5050505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526115109085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611b84565b73ffffffffffffffffffffffffffffffffffffffff8216612b20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610b94565b612b2c6000838361288f565b8060356000828254612b3e91906135cf565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526033602052604081208054839290612b789084906135cf565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000612c31826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166130f59092919063ffffffff16565b805190915015611a855780806020019051810190612c4f9190613c32565b611a85576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b94565b604080516001808252818301909252606091602080830190803683370190505090507331429d1856ad1377a8a0079410b297e1a9e214c281600081518110612d2557612d256138b0565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505090565b6000612d6d60355490565b90508015611a855780612d8f6ec097ce7bc90715b34b9f1000000000846135e7565b612d999190613653565b73ffffffffffffffffffffffffffffffffffffffff841660009081526097602052604081208054909190612dce9084906135cf565b9091555050505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611a859084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611b84565b73ffffffffffffffffffffffffffffffffffffffff8216612ed1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610b94565b612edd8260008361288f565b73ffffffffffffffffffffffffffffffffffffffff821660009081526033602052604090205481811015612f93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610b94565b73ffffffffffffffffffffffffffffffffffffffff83166000908152603360205260408120838303905560358054849290612fcf90849061368e565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870985870292508281108382030391505080600014156130805783828161307657613076613624565b049250505061083d565b80841161308c57600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60606110da84846000858573ffffffffffffffffffffffffffffffffffffffff85163b61317e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b94565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516131a79190613c54565b60006040518083038185875af1925050503d80600081146131e4576040519150601f19603f3d011682016040523d82523d6000602084013e6131e9565b606091505b50915091506131f9828286613204565b979650505050505050565b6060831561321357508161083d565b8251156132235782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b94919061331c565b8280546132639061352f565b90600052602060002090601f01602090048101928261328557600085556132cb565b82601f1061329e57805160ff19168380011785556132cb565b828001600101855582156132cb579182015b828111156132cb5782518255916020019190600101906132b0565b506132d79291506132db565b5090565b5b808211156132d757600081556001016132dc565b60005b8381101561330b5781810151838201526020016132f3565b838111156115105750506000910152565b602081526000825180602084015261333b8160408501602087016132f0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60006020828403121561337f57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610eb357600080fd5b600080604083850312156133bb57600080fd5b82356133c681613386565b946020939093013593505050565b6000602082840312156133e657600080fd5b813561083d81613386565b60008060006060848603121561340657600080fd5b833561341181613386565b9250602084013561342181613386565b929592945050506040919091013590565b6000806040838503121561344557600080fd5b823561345081613386565b9150602083013561346081613386565b809150509250929050565b6000806040838503121561347e57600080fd5b82359150602083013561346081613386565b6020808252825182820181905260009190848201906040850190845b818110156134c8578351835292840192918401916001016134ac565b50909695505050505050565b6000806000606084860312156134e957600080fd5b8335925060208401356134fb81613386565b9150604084013561350b81613386565b809150509250925092565b60006020828403121561352857600080fd5b5051919050565b600181811c9082168061354357607f821691505b6020821081141561093b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006020828403121561358f57600080fd5b815160ff8116811461083d57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156135e2576135e26135a0565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561361f5761361f6135a0565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082613689577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000828210156136a0576136a06135a0565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff811182821017156136f8576136f86136a5565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613745576137456136a5565b604052919050565b60006020828403121561375f57600080fd5b815167ffffffffffffffff8082111561377757600080fd5b818401915084601f83011261378b57600080fd5b81518181111561379d5761379d6136a5565b6137ce60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016136fe565b91508082528560208285010111156137e557600080fd5b6137f68160208401602086016132f0565b50949350505050565b7f416e676c652000000000000000000000000000000000000000000000000000008152600082516138378160068501602087016132f0565b7f20577261707065720000000000000000000000000000000000000000000000006006939091019283015250600e01919050565b7f61672d777261707065722d0000000000000000000000000000000000000000008152600082516138a381600b8501602087016132f0565b91909101600b0192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613911576139116135a0565b5060010190565b805167ffffffffffffffff8116811461393057600080fd5b919050565b600082601f83011261394657600080fd5b8151602067ffffffffffffffff821115613962576139626136a5565b8160051b6139718282016136fe565b928352848101820192828101908785111561398b57600080fd5b83870192505b848310156131f9576139a283613918565b82529183019190830190613991565b600061010082840312156139c457600080fd5b6139cc6136d4565b9050815167ffffffffffffffff808211156139e657600080fd5b6139f285838601613935565b83526020840151915080821115613a0857600080fd5b613a1485838601613935565b60208401526040840151915080821115613a2d57600080fd5b613a3985838601613935565b60408401526060840151915080821115613a5257600080fd5b50613a5f84828501613935565b606083015250613a7160808301613918565b6080820152613a8260a08301613918565b60a0820152613a9360c08301613918565b60c082015260e082015160e082015292915050565b6000806000806000806000806000898b03610200811215613ac857600080fd5b8a51613ad381613386565b60208c0151909a50613ae481613386565b60408c0151909950613af581613386565b60608c0151909850613b0681613386565b8097505060808b0151955060a08b0151945060c08b01519350610100807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2083011215613b5157600080fd5b613b596136d4565b60e08d01518152908c015160208201526101208c015160408201526101408c015160608201529050613b8e6101608c01613918565b6080820152613ba06101808c01613918565b60a0820152613bb26101a08c01613918565b60c0820152613bc46101c08c01613918565b60e08201526101e08b015190925067ffffffffffffffff811115613be757600080fd5b613bf38c828d016139b1565b9150509295985092959850929598565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060208284031215613c4457600080fd5b8151801515811461083d57600080fd5b60008251613c668184602087016132f0565b919091019291505056fea264697066735822122057e131c5b121e18802f12f717474a87a7d7ce14c893ac5f9fa72e396102a9ba564736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102ad5760003560e01c806394bf804d1161017b578063ba087652116100d8578063dc4c90d31161008c578063ec8a783311610071578063ec8a78331461062e578063ef5cfb8c14610659578063ef8b30f71461059557600080fd5b8063dc4c90d3146105ce578063dd62ed3e146105e857600080fd5b8063c6e6f592116100bd578063c6e6f59214610595578063ce96cb77146105a8578063d905777e146105bb57600080fd5b8063ba08765214610582578063c63d75b6146103ce57600080fd5b8063a9059cbb1161012f578063b18925af11610114578063b18925af14610542578063b3d7f6b91461055c578063b460af941461056f57600080fd5b8063a9059cbb14610527578063ab2f0e511461053a57600080fd5b806395d89b411161016057806395d89b41146104f2578063a457c2d7146104fa578063a6f19c841461050d57600080fd5b806394bf804d146104b457806395b586d1146104c757600080fd5b806338d52e0f116102295780636be9dcce116101dd57806370a08231116101c257806370a08231146104545780638129fc1c1461048a57806384e9bd7e1461049457600080fd5b80636be9dcce1461042e5780636e553f651461044157600080fd5b8063402d267d1161020e578063402d267d146103ce5780634cdad506146104015780636ac5dc461461041457600080fd5b806338d52e0f1461038057806339509351146103bb57600080fd5b80630a28a4771161028057806318160ddd1161026557806318160ddd1461034b57806323b872dd14610353578063313ce5671461036657600080fd5b80630a28a477146103185780630a5410da1461032b57600080fd5b806301e1d114146102b257806306fdde03146102cd57806307a2d13a146102e2578063095ea7b3146102f5575b600080fd5b6102ba61066c565b6040519081526020015b60405180910390f35b6102d5610720565b6040516102c4919061331c565b6102ba6102f036600461336d565b6107b2565b6103086103033660046133a8565b6107c5565b60405190151581526020016102c4565b6102ba61032636600461336d565b6107dd565b6102ba6103393660046133d4565b60976020526000908152604090205481565b6035546102ba565b6103086103613660046133f1565b61081e565b61036e610844565b60405160ff90911681526020016102c4565b73853d955acef822db058eb8505911ed77f175b99e5b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102c4565b6103086103c93660046133a8565b6108c9565b6102ba6103dc3660046133d4565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90565b6102ba61040f36600461336d565b610915565b735addc89785d75c86ab939e9e15bfbbb7fc086a87610396565b6102ba61043c366004613432565b610941565b6102ba61044f36600461346b565b610ab8565b6102ba6104623660046133d4565b73ffffffffffffffffffffffffffffffffffffffff1660009081526033602052604090205490565b610492610ad2565b005b6104a76104a23660046133d4565b610eb6565b6040516102c49190613490565b6102ba6104c236600461346b565b610ecb565b6102ba6104d5366004613432565b609960209081526000928352604080842090915290825290205481565b6102d5610ee5565b6103086105083660046133a8565b610ef4565b73b40432243e4f317ce287398e72ab8f0312fc2fe8610396565b6103086105353660046133a8565b610fd0565b6102ba610fde565b73b3b209bb213a5da5b947c56f2c770b3e1015f1fe610396565b6102ba61056a36600461336d565b6110b2565b6102ba61057d3660046134d4565b6110bf565b6102ba6105903660046134d4565b6110e2565b6102ba6105a336600461336d565b611134565b6102ba6105b63660046133d4565b61113f565b6102ba6105c93660046133d4565b611180565b736b4ee7352406707003bc6f6b96595fd35925af48610396565b6102ba6105f6366004613432565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260346020908152604080832093909416825291909152205490565b6102ba61063c366004613432565b609860209081526000928352604080842090915290825290205481565b6104a76106673660046133d4565b6111ba565b600061071b73b40432243e4f317ce287398e72ab8f0312fc2fe86040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa1580156106f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107169190613516565b6111e1565b905090565b60606036805461072f9061352f565b80601f016020809104026020016040519081016040528092919081815260200182805461075b9061352f565b80156107a85780601f1061077d576101008083540402835291602001916107a8565b820191906000526020600020905b81548152906001019060200180831161078b57829003601f168201915b5050505050905090565b60006107bf826000611225565b92915050565b6000336107d3818585611247565b5060019392505050565b60006107e7610fde565b82111561081557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff919050565b6107bf826113fa565b60003361082c85828561143f565b610837858585611516565b60019150505b9392505050565b600073853d955acef822db058eb8505911ed77f175b99e73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108a5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071b919061357d565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906107d390829086906109109087906135cf565b611247565b600080610921836111e1565b905061092b610fde565b8111156107bf5750600092915050565b50919050565b60008061094d60355490565b90506000816109815773ffffffffffffffffffffffffffffffffffffffff84166000908152609760205260409020546109df565b816ec097ce7bc90715b34b9f100000000061099b866117d4565b6109a591906135e7565b6109af9190613653565b73ffffffffffffffffffffffffffffffffffffffff85166000908152609760205260409020546109df91906135cf565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152609960209081526040808320938a16835292905290812054919250906ec097ce7bc90715b34b9f100000000090610a33908461368e565b73ffffffffffffffffffffffffffffffffffffffff8816600090815260336020526040902054610a6391906135e7565b610a6d9190613653565b73ffffffffffffffffffffffffffffffffffffffff8087166000908152609860209081526040808320938b1683529290522054909150610aae9082906135cf565b9695505050505050565b600080610ac484611134565b905061083d33848684611883565b600054610100900460ff1615808015610af25750600054600160ff909116105b80610b0c5750303b158015610b0c575060005460ff166001145b610b9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610bfb57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610d9173b3b209bb213a5da5b947c56f2c770b3e1015f1fe73ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610c5d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610ca3919081019061374d565b604051602001610cb391906137ff565b604051602081830303815290604052610cdd73b3b209bb213a5da5b947c56f2c770b3e1015f1fe90565b73ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610d27573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610d6d919081019061374d565b604051602001610d7d919061386b565b6040516020818303038152906040526119c7565b610dfd735addc89785d75c86ab939e9e15bfbbb7fc086a877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff73853d955acef822db058eb8505911ed77f175b99e5b73ffffffffffffffffffffffffffffffffffffffff169190611a8a565b610e5073b40432243e4f317ce287398e72ab8f0312fc2fe87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff73b3b209bb213a5da5b947c56f2c770b3e1015f1fe610de0565b8015610eb357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6060610ec0611c06565b6107bf826001611edd565b600080610ed7846110b2565b905061083d33848387611883565b60606037805461072f9061352f565b33600081815260346020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919083811015610fb8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610b94565b610fc58286868403611247565b506001949350505050565b6000336107d3818585611516565b600073853d955acef822db058eb8505911ed77f175b99e73ffffffffffffffffffffffffffffffffffffffff166370a08231736b4ee7352406707003bc6f6b96595fd35925af486040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa15801561108e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071b9190613516565b60006107bf826001611225565b6000806110cb856107dd565b90506110da33858588856123ff565b949350505050565b6000806110ee85610915565b905080611127576040517f96d8043300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110da33858584896123ff565b60006107bf826125bd565b60006107bf6111736107168473ffffffffffffffffffffffffffffffffffffffff1660009081526033602052604090205490565b61117b610fde565b6125e0565b73ffffffffffffffffffffffffffffffffffffffff81166000908152603360205260408120546107bf9061117b6111b5610fde565b6113fa565b60606107bf82610eb6565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b60008060006111ee6125f6565b90925090506110da8261120583633b9aca0061368e565b61120f91906135e7565b85906b033b2e3c9fd0803ce80000006000612832565b6000806112306125f6565b5090506110da8482670de0b6b3a764000086612832565b73ffffffffffffffffffffffffffffffffffffffff83166112e9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610b94565b73ffffffffffffffffffffffffffffffffffffffff821661138c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610b94565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60008060006114076125f6565b90925090506110da6b033b2e3c9fd0803ce80000008361142b84633b9aca0061368e565b61143591906135e7565b8691906001612832565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152603460209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146115105781811015611503576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610b94565b6115108484848403611247565b50505050565b73ffffffffffffffffffffffffffffffffffffffff83166115b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610b94565b73ffffffffffffffffffffffffffffffffffffffff821661165c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610b94565b61166783838361288f565b73ffffffffffffffffffffffffffffffffffffffff83166000908152603360205260409020548181101561171d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610b94565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152603360205260408082208585039055918516815290812080548492906117619084906135cf565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516117c791815260200190565b60405180910390a3611510565b600073b40432243e4f317ce287398e72ab8f0312fc2fe86040517f33fd6f7400000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015291909116906333fd6f7490604401602060405180830381865afa15801561185f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bf9190613516565b6118a373853d955acef822db058eb8505911ed77f175b99e853085612a45565b604080517f2e2d298400000000000000000000000000000000000000000000000000000000815260048101849052306024820152736b4ee7352406707003bc6f6b96595fd35925af4860448201529051735addc89785d75c86ab939e9e15bfbbb7fc086a8791632e2d298491606480830192600092919082900301818387803b15801561192f57600080fd5b505af1158015611943573d6000803e3d6000fd5b505050506119518382612aa3565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d784846040516119b9929190918252602082015260400190565b60405180910390a350505050565b600054610100900460ff16611a5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610b94565b8151611a71906036906020850190613257565b508051611a85906037906020840190613257565b505050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015611b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b259190613516565b611b2f91906135cf565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018290529091506115109085907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612bcf565b6000611c10612cdb565b805190915060008167ffffffffffffffff811115611c3057611c306136a5565b604051908082528060200260200182016040528015611c59578160200160208202803683370190505b50905060005b82811015611d4057838181518110611c7957611c796138b0565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611cef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d139190613516565b828281518110611d2557611d256138b0565b6020908102919091010152611d39816138df565b9050611c5f565b5073b40432243e4f317ce287398e72ab8f0312fc2fe86040517f9faceb1b0000000000000000000000000000000000000000000000000000000081523060048201526000602482015273ffffffffffffffffffffffffffffffffffffffff9190911690639faceb1b90604401600060405180830381600087803b158015611dc657600080fd5b505af1158015611dda573d6000803e3d6000fd5b5050505060005b82811015611510576000848281518110611dfd57611dfd6138b0565b602002602001015190506000838381518110611e1b57611e1b6138b0565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015611e90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb49190613516565b611ebe919061368e565b9050611eca8282612d62565b505080611ed6906138df565b9050611de1565b60606000611ee9612cdb565b80519091508067ffffffffffffffff811115611f0757611f076136a5565b604051908082528060200260200182016040528015611f30578160200160208202803683370190505b50925073ffffffffffffffffffffffffffffffffffffffff8516611f555750506107bf565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260336020526040812054905b828110156123f557600060986000868481518110611f9d57611f9d6138b0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546ec097ce7bc90715b34b9f100000000060996000888681518110612043576120436138b0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054609760008987815181106120d9576120d96138b0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612126919061368e565b61213090866135e7565b61213a9190613653565b61214491906135cf565b905080156122f15786156122365760006098600087858151811061216a5761216a6138b0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506122318882878581518110612204576122046138b0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16612dd89092919063ffffffff16565b6122d1565b806098600087858151811061224d5761224d6138b0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b808683815181106122e4576122e46138b0565b6020026020010181815250505b60976000868481518110612307576123076138b0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460996000878581518110612360576123606138b0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050806123ee906138df565b9050611f7d565b5050505092915050565b8273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461243d5761243d83868361143f565b6124478382612e2e565b604080517f23e103a80000000000000000000000000000000000000000000000000000000081526004810183905230602482018190526044820152736b4ee7352406707003bc6f6b96595fd35925af4860648201529051735addc89785d75c86ab939e9e15bfbbb7fc086a87916323e103a891608480830192600092919082900301818387803b1580156124da57600080fd5b505af11580156124ee573d6000803e3d6000fd5b5050505061252f848361251273853d955acef822db058eb8505911ed77f175b99e90565b73ffffffffffffffffffffffffffffffffffffffff169190612dd8565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db85856040516125ae929190918252602082015260400190565b60405180910390a45050505050565b6000806125c86125f6565b50905061083d83670de0b6b3a7640000836000612832565b60008183106125ef578161083d565b5090919050565b6000808080735addc89785d75c86ab939e9e15bfbbb7fc086a8773ffffffffffffffffffffffffffffffffffffffff1663ba8b7223736b4ee7352406707003bc6f6b96595fd35925af486040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401600060405180830381865afa1580156126a9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526126ef9190810190613aa8565b509750509650505050505080600001514214158015612712575060008160200151115b1561281a57600073b3b209bb213a5da5b947c56f2c770b3e1015f1fe73ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279c9190613516565b90508015612818578160400151826020015111156127e85780670de0b6b3a764000083604001516127cd91906135e7565b6127d79190613653565b6127e190846135cf565b9250612818565b80670de0b6b3a7640000836020015161280191906135e7565b61280b9190613653565b61281590846135cf565b92505b505b60c00151909367ffffffffffffffff90911692509050565b600080612840868686613027565b9050600183600281111561285657612856613c03565b14801561287357506000848061286e5761286e613624565b868809115b15612886576128836001826135cf565b90505b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff831615156128b0611c06565b6128ba8482611edd565b506128c58382611edd565b5073ffffffffffffffffffffffffffffffffffffffff83166129805773b40432243e4f317ce287398e72ab8f0312fc2fe86040517f38d07436000000000000000000000000000000000000000000000000000000008152600481018490526000602482015273ffffffffffffffffffffffffffffffffffffffff91909116906338d0743690604401600060405180830381600087803b15801561296757600080fd5b505af115801561297b573d6000803e3d6000fd5b505050505b73ffffffffffffffffffffffffffffffffffffffff84166115105773b40432243e4f317ce287398e72ab8f0312fc2fe86040517f83df6747000000000000000000000000000000000000000000000000000000008152600481018490523060248201526000604482015273ffffffffffffffffffffffffffffffffffffffff91909116906383df674790606401600060405180830381600087803b158015612a2757600080fd5b505af1158015612a3b573d6000803e3d6000fd5b5050505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526115109085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401611b84565b73ffffffffffffffffffffffffffffffffffffffff8216612b20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610b94565b612b2c6000838361288f565b8060356000828254612b3e91906135cf565b909155505073ffffffffffffffffffffffffffffffffffffffff821660009081526033602052604081208054839290612b789084906135cf565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000612c31826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166130f59092919063ffffffff16565b805190915015611a855780806020019051810190612c4f9190613c32565b611a85576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b94565b604080516001808252818301909252606091602080830190803683370190505090507331429d1856ad1377a8a0079410b297e1a9e214c281600081518110612d2557612d256138b0565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505090565b6000612d6d60355490565b90508015611a855780612d8f6ec097ce7bc90715b34b9f1000000000846135e7565b612d999190613653565b73ffffffffffffffffffffffffffffffffffffffff841660009081526097602052604081208054909190612dce9084906135cf565b9091555050505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611a859084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611b84565b73ffffffffffffffffffffffffffffffffffffffff8216612ed1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610b94565b612edd8260008361288f565b73ffffffffffffffffffffffffffffffffffffffff821660009081526033602052604090205481811015612f93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610b94565b73ffffffffffffffffffffffffffffffffffffffff83166000908152603360205260408120838303905560358054849290612fcf90849061368e565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870985870292508281108382030391505080600014156130805783828161307657613076613624565b049250505061083d565b80841161308c57600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60606110da84846000858573ffffffffffffffffffffffffffffffffffffffff85163b61317e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b94565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516131a79190613c54565b60006040518083038185875af1925050503d80600081146131e4576040519150601f19603f3d011682016040523d82523d6000602084013e6131e9565b606091505b50915091506131f9828286613204565b979650505050505050565b6060831561321357508161083d565b8251156132235782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b94919061331c565b8280546132639061352f565b90600052602060002090601f01602090048101928261328557600085556132cb565b82601f1061329e57805160ff19168380011785556132cb565b828001600101855582156132cb579182015b828111156132cb5782518255916020019190600101906132b0565b506132d79291506132db565b5090565b5b808211156132d757600081556001016132dc565b60005b8381101561330b5781810151838201526020016132f3565b838111156115105750506000910152565b602081526000825180602084015261333b8160408501602087016132f0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60006020828403121561337f57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610eb357600080fd5b600080604083850312156133bb57600080fd5b82356133c681613386565b946020939093013593505050565b6000602082840312156133e657600080fd5b813561083d81613386565b60008060006060848603121561340657600080fd5b833561341181613386565b9250602084013561342181613386565b929592945050506040919091013590565b6000806040838503121561344557600080fd5b823561345081613386565b9150602083013561346081613386565b809150509250929050565b6000806040838503121561347e57600080fd5b82359150602083013561346081613386565b6020808252825182820181905260009190848201906040850190845b818110156134c8578351835292840192918401916001016134ac565b50909695505050505050565b6000806000606084860312156134e957600080fd5b8335925060208401356134fb81613386565b9150604084013561350b81613386565b809150509250925092565b60006020828403121561352857600080fd5b5051919050565b600181811c9082168061354357607f821691505b6020821081141561093b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006020828403121561358f57600080fd5b815160ff8116811461083d57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156135e2576135e26135a0565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561361f5761361f6135a0565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082613689577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000828210156136a0576136a06135a0565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff811182821017156136f8576136f86136a5565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613745576137456136a5565b604052919050565b60006020828403121561375f57600080fd5b815167ffffffffffffffff8082111561377757600080fd5b818401915084601f83011261378b57600080fd5b81518181111561379d5761379d6136a5565b6137ce60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016136fe565b91508082528560208285010111156137e557600080fd5b6137f68160208401602086016132f0565b50949350505050565b7f416e676c652000000000000000000000000000000000000000000000000000008152600082516138378160068501602087016132f0565b7f20577261707065720000000000000000000000000000000000000000000000006006939091019283015250600e01919050565b7f61672d777261707065722d0000000000000000000000000000000000000000008152600082516138a381600b8501602087016132f0565b91909101600b0192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613911576139116135a0565b5060010190565b805167ffffffffffffffff8116811461393057600080fd5b919050565b600082601f83011261394657600080fd5b8151602067ffffffffffffffff821115613962576139626136a5565b8160051b6139718282016136fe565b928352848101820192828101908785111561398b57600080fd5b83870192505b848310156131f9576139a283613918565b82529183019190830190613991565b600061010082840312156139c457600080fd5b6139cc6136d4565b9050815167ffffffffffffffff808211156139e657600080fd5b6139f285838601613935565b83526020840151915080821115613a0857600080fd5b613a1485838601613935565b60208401526040840151915080821115613a2d57600080fd5b613a3985838601613935565b60408401526060840151915080821115613a5257600080fd5b50613a5f84828501613935565b606083015250613a7160808301613918565b6080820152613a8260a08301613918565b60a0820152613a9360c08301613918565b60c082015260e082015160e082015292915050565b6000806000806000806000806000898b03610200811215613ac857600080fd5b8a51613ad381613386565b60208c0151909a50613ae481613386565b60408c0151909950613af581613386565b60608c0151909850613b0681613386565b8097505060808b0151955060a08b0151945060c08b01519350610100807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2083011215613b5157600080fd5b613b596136d4565b60e08d01518152908c015160208201526101208c015160408201526101408c015160608201529050613b8e6101608c01613918565b6080820152613ba06101808c01613918565b60a0820152613bb26101a08c01613918565b60c0820152613bc46101c08c01613918565b60e08201526101e08b015190925067ffffffffffffffff811115613be757600080fd5b613bf38c828d016139b1565b9150509295985092959850929598565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060208284031215613c4457600080fd5b8151801515811461083d57600080fd5b60008251613c668184602087016132f0565b919091019291505056fea264697066735822122057e131c5b121e18802f12f717474a87a7d7ce14c893ac5f9fa72e396102a9ba564736f6c634300080c0033",
  "devdoc": {
    "author": "Angle Labs, Inc.",
    "details": "FRAX stakable implementation",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "asset()": {
        "details": "Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing. - MUST be an ERC-20 token contract. - MUST NOT revert."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "claim_rewards(address)": {
        "params": {
          "from": "Address to claim for"
        },
        "returns": {
          "_0": "rewardAmounts Amounts of each reward token claimed by the user"
        }
      },
      "claimableRewards(address,address)": {
        "params": {
          "_rewardToken": "Token to get rewards for",
          "user": "Address to claim for"
        }
      },
      "convertToAssets(uint256)": {
        "details": "Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."
      },
      "convertToShares(uint256)": {
        "details": "Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."
      },
      "decimals()": {
        "details": "Returns the decimals places of the token."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256,address)": {
        "details": "Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   deposit execution, and are accounted for during deposit. - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
      },
      "gauge()": {
        "details": "This function is only useful in the stakable implementation"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "maxDeposit(address)": {
        "details": "Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call. - MUST return a limited value if receiver is subject to some deposit limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited. - MUST NOT revert."
      },
      "maxMint(address)": {
        "details": "Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call. - MUST return a limited value if receiver is subject to some mint limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted. - MUST NOT revert."
      },
      "maxRedeem(address)": {
        "details": "Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock. - MUST NOT revert."
      },
      "maxWithdraw(address)": {
        "details": "Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST NOT revert."
      },
      "mint(uint256,address)": {
        "details": "Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint   execution, and are accounted for during mint. - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "previewDeposit(uint256)": {
        "details": "Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."
      },
      "previewMint(uint256)": {
        "details": "Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting."
      },
      "previewRedeem(uint256)": {
        "details": "Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming."
      },
      "previewWithdraw(uint256)": {
        "details": "Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if   called   in the same transaction. - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though   the withdrawal would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."
      },
      "redeem(uint256,address,address)": {
        "details": "Burns exactly shares from owner and sends assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   redeem execution, and are accounted for during redeem. - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalAssets()": {
        "details": "Returns the total amount of the underlying asset that is “managed” by Vault. - SHOULD include any compounding that occurs from yield. - MUST be inclusive of any fees that are charged against assets in the Vault. - MUST NOT revert."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "withdraw(uint256,address,address)": {
        "details": "Burns shares from owner and sends exactly assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   withdraw execution, and are accounted for during withdraw. - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately."
      }
    },
    "title": "SanFRAXEURERC4626AdapterStakable",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "availableBalance()": {
        "notice": "Returns the available balance of the token in the associated `PoolManager`"
      },
      "claimRewards(address)": {
        "notice": "Same as the function above"
      },
      "claim_rewards(address)": {
        "notice": "Claims earned rewards for user `from`"
      },
      "claimableRewards(address,address)": {
        "notice": "Returns the exact amount that will be received if calling `claim_rewards(from)` for a specific reward token"
      },
      "gauge()": {
        "notice": "Returns the gauge address"
      },
      "initialize()": {
        "notice": "Initializes the contract"
      },
      "integral(address)": {
        "notice": "Maps each reward token to a track record of cumulated rewards"
      },
      "integralOf(address,address)": {
        "notice": "Maps pairs of `(token,user)` to a track record of cumulated personal rewards"
      },
      "pendingRewardsOf(address,address)": {
        "notice": "Maps pairs of `(token,user)` to the currently pending claimable rewards"
      },
      "poolManager()": {
        "notice": "Address of the corresponding poolManager"
      },
      "sanToken()": {
        "notice": "Address of the associated sanToken"
      },
      "stableMaster()": {
        "notice": "Address of the `StableMaster` in the Core module of the protocol"
      }
    },
    "notice": "IERC4626 Adapter for SanTokens of the Angle Protocol",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 941,
        "contract": "contracts/adapters/implementations/Stakable/SanFRAXEURERC4626AdapterStakable.sol:SanFRAXEURERC4626AdapterStakable",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 944,
        "contract": "contracts/adapters/implementations/Stakable/SanFRAXEURERC4626AdapterStakable.sol:SanFRAXEURERC4626AdapterStakable",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2938,
        "contract": "contracts/adapters/implementations/Stakable/SanFRAXEURERC4626AdapterStakable.sol:SanFRAXEURERC4626AdapterStakable",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1290,
        "contract": "contracts/adapters/implementations/Stakable/SanFRAXEURERC4626AdapterStakable.sol:SanFRAXEURERC4626AdapterStakable",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1296,
        "contract": "contracts/adapters/implementations/Stakable/SanFRAXEURERC4626AdapterStakable.sol:SanFRAXEURERC4626AdapterStakable",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1298,
        "contract": "contracts/adapters/implementations/Stakable/SanFRAXEURERC4626AdapterStakable.sol:SanFRAXEURERC4626AdapterStakable",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 1300,
        "contract": "contracts/adapters/implementations/Stakable/SanFRAXEURERC4626AdapterStakable.sol:SanFRAXEURERC4626AdapterStakable",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 1302,
        "contract": "contracts/adapters/implementations/Stakable/SanFRAXEURERC4626AdapterStakable.sol:SanFRAXEURERC4626AdapterStakable",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1881,
        "contract": "contracts/adapters/implementations/Stakable/SanFRAXEURERC4626AdapterStakable.sol:SanFRAXEURERC4626AdapterStakable",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 8160,
        "contract": "contracts/adapters/implementations/Stakable/SanFRAXEURERC4626AdapterStakable.sol:SanFRAXEURERC4626AdapterStakable",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8967,
        "contract": "contracts/adapters/implementations/Stakable/SanFRAXEURERC4626AdapterStakable.sol:SanFRAXEURERC4626AdapterStakable",
        "label": "integral",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_contract(IERC20)6220,t_uint256)"
      },
      {
        "astId": 8975,
        "contract": "contracts/adapters/implementations/Stakable/SanFRAXEURERC4626AdapterStakable.sol:SanFRAXEURERC4626AdapterStakable",
        "label": "pendingRewardsOf",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_contract(IERC20)6220,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8983,
        "contract": "contracts/adapters/implementations/Stakable/SanFRAXEURERC4626AdapterStakable.sol:SanFRAXEURERC4626AdapterStakable",
        "label": "integralOf",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_contract(IERC20)6220,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8987,
        "contract": "contracts/adapters/implementations/Stakable/SanFRAXEURERC4626AdapterStakable.sol:SanFRAXEURERC4626AdapterStakable",
        "label": "__gapStakable",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_uint256)47_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)6220": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)6220,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)6220",
        "label": "mapping(contract IERC20 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_contract(IERC20)6220,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)6220",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}