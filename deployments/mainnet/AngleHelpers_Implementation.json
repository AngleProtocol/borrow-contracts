{
  "address": "0xa21d906bF21a58196c9F7566c366c10D5Fa1A723",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BASE_PARAMS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CORE",
      "outputs": [
        {
          "internalType": "contract ICore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUTER",
      "outputs": [
        {
          "internalType": "contract IAngleRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STABLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "getCollateralAddresses",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "stableMaster",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "poolManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "perpetualManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sanToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "gauge",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeManager",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "strategies",
              "type": "address[]"
            }
          ],
          "internalType": "struct CollateralAddresses",
          "name": "addresses",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "getCollateralParameters",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "lastBlockUpdated",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lockedInterests",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxInterestsDistributed",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "feesAside",
                  "type": "uint256"
                },
                {
                  "internalType": "uint64",
                  "name": "slippageFee",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "feesForSLPs",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "slippage",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "interestsForSLPs",
                  "type": "uint64"
                }
              ],
              "internalType": "struct SLPData",
              "name": "slpData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint64[]",
                  "name": "xFeeMint",
                  "type": "uint64[]"
                },
                {
                  "internalType": "uint64[]",
                  "name": "yFeeMint",
                  "type": "uint64[]"
                },
                {
                  "internalType": "uint64[]",
                  "name": "xFeeBurn",
                  "type": "uint64[]"
                },
                {
                  "internalType": "uint64[]",
                  "name": "yFeeBurn",
                  "type": "uint64[]"
                },
                {
                  "internalType": "uint64",
                  "name": "targetHAHedge",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "bonusMalusMint",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "bonusMalusBurn",
                  "type": "uint64"
                },
                {
                  "internalType": "uint256",
                  "name": "capOnStableMinted",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MintBurnData",
              "name": "feeData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint64[]",
                  "name": "xHAFeesDeposit",
                  "type": "uint64[]"
                },
                {
                  "internalType": "uint64[]",
                  "name": "yHAFeesDeposit",
                  "type": "uint64[]"
                },
                {
                  "internalType": "uint64[]",
                  "name": "xHAFeesWithdraw",
                  "type": "uint64[]"
                },
                {
                  "internalType": "uint64[]",
                  "name": "yHAFeesWithdraw",
                  "type": "uint64[]"
                },
                {
                  "internalType": "uint64",
                  "name": "haBonusMalusDeposit",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "haBonusMalusWithdraw",
                  "type": "uint64"
                }
              ],
              "internalType": "struct PerpetualManagerFeeData",
              "name": "perpFeeData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "maintenanceMargin",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "maxLeverage",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "targetHAHedge",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "limitHAHedge",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "lockTime",
                  "type": "uint64"
                }
              ],
              "internalType": "struct PerpetualManagerParamData",
              "name": "perpParam",
              "type": "tuple"
            }
          ],
          "internalType": "struct Parameters",
          "name": "params",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "getPoolManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "poolManager",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStablecoinAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "agToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "previewBurnAndFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "agToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "previewMintAndFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x34e8928ec40085e5c3681e7a4213b16c0a188c5ff53e05e350cc06292276948b",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0xa21d906bF21a58196c9F7566c366c10D5Fa1A723",
    "transactionIndex": 154,
    "gasUsed": "2740143",
    "logsBloom": "0x
    "blockHash": "0x3277250ae24a5901661a45d25015fcde6561c33a87eddf9d4d8e3dad104857a3",
    "transactionHash": "0x34e8928ec40085e5c3681e7a4213b16c0a188c5ff53e05e350cc06292276948b",
    "logs": [],
    "blockNumber": 15537936,
    "cumulativeGasUsed": "19980287",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "119ccc72274d7dfd183df52f488d03f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BASE_PARAMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CORE\",\"outputs\":[{\"internalType\":\"contract ICore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"contract IAngleRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STABLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"getCollateralAddresses\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"stableMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"perpetualManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeManager\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"strategies\",\"type\":\"address[]\"}],\"internalType\":\"struct CollateralAddresses\",\"name\":\"addresses\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"getCollateralParameters\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastBlockUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedInterests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxInterestsDistributed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feesAside\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"slippageFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"feesForSLPs\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"slippage\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"interestsForSLPs\",\"type\":\"uint64\"}],\"internalType\":\"struct SLPData\",\"name\":\"slpData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64[]\",\"name\":\"xFeeMint\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"yFeeMint\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"xFeeBurn\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"yFeeBurn\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"targetHAHedge\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"bonusMalusMint\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"bonusMalusBurn\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"capOnStableMinted\",\"type\":\"uint256\"}],\"internalType\":\"struct MintBurnData\",\"name\":\"feeData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64[]\",\"name\":\"xHAFeesDeposit\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"yHAFeesDeposit\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"xHAFeesWithdraw\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"yHAFeesWithdraw\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64\",\"name\":\"haBonusMalusDeposit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"haBonusMalusWithdraw\",\"type\":\"uint64\"}],\"internalType\":\"struct PerpetualManagerFeeData\",\"name\":\"perpFeeData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"maintenanceMargin\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxLeverage\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"targetHAHedge\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"limitHAHedge\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lockTime\",\"type\":\"uint64\"}],\"internalType\":\"struct PerpetualManagerParamData\",\"name\":\"perpParam\",\"type\":\"tuple\"}],\"internalType\":\"struct Parameters\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"getPoolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolManager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStablecoinAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"agToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"previewBurnAndFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"agToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"previewMintAndFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Core Team\",\"details\":\"This contract only contains view functions to be queried off-chain. It was thus not optimized for gas consumption\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getCollateralAddresses(address,address)\":{\"returns\":{\"addresses\":\"A struct with all the addresses associated in the Core module\"}},\"getCollateralParameters(address,address)\":{\"details\":\"Check out the struct `Parameters` for the meaning of the return values\",\"returns\":{\"params\":\"Struct with most of the parameters in the `StableMaster` and `PerpetualManager` contracts\"}},\"getStablecoinAddresses()\":{\"details\":\"The place of an agToken address in the list is the same as the corresponding `StableMaster` address\",\"returns\":{\"_0\":\"List of the `StableMaster` addresses of the Angle protocol\",\"_1\":\"List of the `AgToken` addresses of the protocol\"}},\"previewBurnAndFees(uint256,address,address)\":{\"details\":\"This function reverts if the burn transaction was to revert in the same conditions (without taking into account potential approval problems to the `StableMaster` contract or agToken balance prior to the call)\",\"returns\":{\"_0\":\"Amount of `collateral` that would be obtained with a burn transaction in the same block\",\"_1\":\"Percentage of fees that would be taken during a burn transaction in the same block\"}},\"previewMintAndFees(uint256,address,address)\":{\"details\":\"This function reverts if the mint transaction was to revert in the same conditions (without taking into account potential approval problems to the `StableMaster` contract)\",\"returns\":{\"_0\":\"Amount of `agToken` that would be obtained with a mint transaction in the same block\",\"_1\":\"Percentage of fees that would be taken during a mint transaction in the same block\"}}},\"title\":\"AngleHelpers\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getCollateralAddresses(address,address)\":{\"notice\":\"Returns all the addresses associated to the (`agToken`,`collateral`) pair given\"},\"getCollateralParameters(address,address)\":{\"notice\":\"Returns most of the governance parameters associated to the (`agToken`,`collateral`) pair given\"},\"getPoolManager(address,address)\":{\"notice\":\"Returns the address of the poolManager associated to an (`agToken`, `collateral`) pair in the Core module of the protocol\"},\"getStablecoinAddresses()\":{\"notice\":\"Gets the addresses of all the `StableMaster` contracts and their associated `AgToken` addresses\"},\"previewBurnAndFees(uint256,address,address)\":{\"notice\":\"Gives the amount of `collateral` you'd be getting if you were executing in the same block a burn transaction  with `amount` of `agToken` in the Core module of the Angle protocol as well as the value of the fees (in `BASE_PARAMS`) that would be applied during the burn\"},\"previewMintAndFees(uint256,address,address)\":{\"notice\":\"Gives the amount of `agToken` you'd be getting if you were executing in the same block a mint transaction with `amount` of `collateral` in the Core module of the Angle protocol as well as the value of the fees (in `BASE_PARAMS`) that would be applied during the mint\"}},\"notice\":\"Contract with view functions designed to facilitate integrations on the Core module of the Angle Protocol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ui-helpers/AngleHelpers.sol\":\"AngleHelpers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"contracts/interfaces/IAngleRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title IAngleRouter\\n/// @author Angle Core Team\\n/// @notice Interface for the `AngleRouter` contract\\n/// @dev This interface only contains functions of the `AngleRouter01` contract which are called by other contracts\\n/// of this module\\ninterface IAngleRouter {\\n    function mint(\\n        address user,\\n        uint256 amount,\\n        uint256 minStableAmount,\\n        address stablecoin,\\n        address collateral\\n    ) external;\\n\\n    function burn(\\n        address user,\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        address stablecoin,\\n        address collateral\\n    ) external;\\n\\n    function mapPoolManagers(address stableMaster, address collateral)\\n        external\\n        view\\n        returns (\\n            address poolManager,\\n            address perpetualManager,\\n            address sanToken,\\n            address gauge\\n        );\\n}\\n\",\"keccak256\":\"0x47f1ea1d47f466a66d22ef566a5c935479d3ffc59b5788609b3a37552c363444\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/coreModule/IAgTokenMainnet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title IAgTokenMainnet\\n/// @author Angle Core Team\\ninterface IAgTokenMainnet {\\n    function stableMaster() external view returns (address);\\n}\\n\",\"keccak256\":\"0x59db19bcdeacd5b64fefdecf361f245573844b9d54630ddf58f2eae84f02724a\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/coreModule/ICore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title ICore\\n/// @author Angle Core Team\\ninterface ICore {\\n    function stablecoinList() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x9737338e520087ef67ba16ad7492760ba2cbe2e94728efb5059becc0e1705255\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/coreModule/IOracleCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title IOracleCore\\n/// @author Angle Core Team\\ninterface IOracleCore {\\n    function readUpper() external view returns (uint256);\\n\\n    function readQuoteLower(uint256 baseAmount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3dbabee9d0b25fc5a99618c713baa4e2c3441c53eb7f137e3a0fea01f89aa375\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/coreModule/IPerpetualManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title IPerpetualManager\\n/// @author Angle Core Team\\ninterface IPerpetualManager {\\n    function totalHedgeAmount() external view returns (uint256);\\n\\n    function maintenanceMargin() external view returns (uint64);\\n\\n    function maxLeverage() external view returns (uint64);\\n\\n    function targetHAHedge() external view returns (uint64);\\n\\n    function limitHAHedge() external view returns (uint64);\\n\\n    function lockTime() external view returns (uint64);\\n\\n    function haBonusMalusDeposit() external view returns (uint64);\\n\\n    function haBonusMalusWithdraw() external view returns (uint64);\\n\\n    function xHAFeesDeposit(uint256) external view returns (uint64);\\n\\n    function yHAFeesDeposit(uint256) external view returns (uint64);\\n\\n    function xHAFeesWithdraw(uint256) external view returns (uint64);\\n\\n    function yHAFeesWithdraw(uint256) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xed6f9df88c73ff0774c4b98b50fc578d90f9152bd74e36315b2f224d3b44faa8\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/coreModule/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title IPoolManager\\n/// @author Angle Core Team\\ninterface IPoolManager {\\n    function feeManager() external view returns (address);\\n\\n    function strategyList(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc514e16b546b07b248a5dc75d7b056c648c5249f8b3072a68f9d90bb2f71b7eb\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/coreModule/IStableMaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"./IPerpetualManager.sol\\\";\\nimport \\\"./IOracleCore.sol\\\";\\n\\n// Struct to handle all the parameters to manage the fees\\n// related to a given collateral pool (associated to the stablecoin)\\nstruct MintBurnData {\\n    // Values of the thresholds to compute the minting fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeMint;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeMint;\\n    // Values of the thresholds to compute the burning fees\\n    // depending on HA hedge (scaled by `BASE_PARAMS`)\\n    uint64[] xFeeBurn;\\n    // Values of the fees at thresholds (scaled by `BASE_PARAMS`)\\n    uint64[] yFeeBurn;\\n    // Max proportion of collateral from users that can be covered by HAs\\n    // It is exactly the same as the parameter of the same name in `PerpetualManager`, whenever one is updated\\n    // the other changes accordingly\\n    uint64 targetHAHedge;\\n    // Minting fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusMint;\\n    // Burning fees correction set by the `FeeManager` contract: they are going to be multiplied\\n    // to the value of the fees computed using the hedge curve\\n    // Scaled by `BASE_PARAMS`\\n    uint64 bonusMalusBurn;\\n    // Parameter used to limit the number of stablecoins that can be issued using the concerned collateral\\n    uint256 capOnStableMinted;\\n}\\n\\n// Struct to handle all the variables and parameters to handle SLPs in the protocol\\n// including the fraction of interests they receive or the fees to be distributed to\\n// them\\nstruct SLPData {\\n    // Last timestamp at which the `sanRate` has been updated for SLPs\\n    uint256 lastBlockUpdated;\\n    // Fees accumulated from previous blocks and to be distributed to SLPs\\n    uint256 lockedInterests;\\n    // Max interests used to update the `sanRate` in a single block\\n    // Should be in collateral token base\\n    uint256 maxInterestsDistributed;\\n    // Amount of fees left aside for SLPs and that will be distributed\\n    // when the protocol is collateralized back again\\n    uint256 feesAside;\\n    // Part of the fees normally going to SLPs that is left aside\\n    // before the protocol is collateralized back again (depends on collateral ratio)\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippageFee;\\n    // Portion of the fees from users minting and burning\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 feesForSLPs;\\n    // Slippage factor that's applied to SLPs exiting (depends on collateral ratio)\\n    // If `slippage = BASE_PARAMS`, SLPs can get nothing, if `slippage = 0` they get their full claim\\n    // Updated by keepers and scaled by `BASE_PARAMS`\\n    uint64 slippage;\\n    // Portion of the interests from lending\\n    // that goes to SLPs (the rest goes to surplus)\\n    uint64 interestsForSLPs;\\n}\\n\\n/// @title IStableMaster\\n/// @author Angle Core Team\\ninterface IStableMaster {\\n    function agToken() external view returns (address);\\n\\n    function updateStocksUsers(uint256 amount, address poolManager) external;\\n\\n    function collateralMap(address poolManager)\\n        external\\n        view\\n        returns (\\n            address token,\\n            address sanToken,\\n            IPerpetualManager perpetualManager,\\n            IOracleCore oracle,\\n            uint256 stocksUsers,\\n            uint256 sanRate,\\n            uint256 collatBase,\\n            SLPData memory slpData,\\n            MintBurnData memory feeData\\n        );\\n\\n    function paused(bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x52864a61467d612b73fa44db0bc3875f1d2f0cc644d9fccb5b521230358da363\",\"license\":\"GPL-3.0\"},\"contracts/ui-helpers/AngleHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IAngleRouter.sol\\\";\\nimport \\\"../interfaces/coreModule/IAgTokenMainnet.sol\\\";\\nimport \\\"../interfaces/coreModule/ICore.sol\\\";\\nimport \\\"../interfaces/coreModule/IOracleCore.sol\\\";\\nimport \\\"../interfaces/coreModule/IPerpetualManager.sol\\\";\\nimport \\\"../interfaces/coreModule/IPoolManager.sol\\\";\\nimport \\\"../interfaces/coreModule/IStableMaster.sol\\\";\\n\\npragma solidity 0.8.12;\\n\\nstruct Parameters {\\n    SLPData slpData;\\n    MintBurnData feeData;\\n    PerpetualManagerFeeData perpFeeData;\\n    PerpetualManagerParamData perpParam;\\n}\\n\\nstruct PerpetualManagerFeeData {\\n    uint64[] xHAFeesDeposit;\\n    uint64[] yHAFeesDeposit;\\n    uint64[] xHAFeesWithdraw;\\n    uint64[] yHAFeesWithdraw;\\n    uint64 haBonusMalusDeposit;\\n    uint64 haBonusMalusWithdraw;\\n}\\n\\nstruct PerpetualManagerParamData {\\n    uint64 maintenanceMargin;\\n    uint64 maxLeverage;\\n    uint64 targetHAHedge;\\n    uint64 limitHAHedge;\\n    uint64 lockTime;\\n}\\n\\nstruct CollateralAddresses {\\n    address stableMaster;\\n    address poolManager;\\n    address perpetualManager;\\n    address sanToken;\\n    address oracle;\\n    address gauge;\\n    address feeManager;\\n    address[] strategies;\\n}\\n\\n/// @title AngleHelpers\\n/// @author Angle Core Team\\n/// @notice Contract with view functions designed to facilitate integrations on the Core module of the Angle Protocol\\n/// @dev This contract only contains view functions to be queried off-chain. It was thus not optimized for gas consumption\\ncontract AngleHelpers is Initializable {\\n    // ======================== Helper View Functions ==============================\\n\\n    /// @notice Gives the amount of `agToken` you'd be getting if you were executing in the same block a mint transaction\\n    /// with `amount` of `collateral` in the Core module of the Angle protocol as well as the value of the fees\\n    /// (in `BASE_PARAMS`) that would be applied during the mint\\n    /// @return Amount of `agToken` that would be obtained with a mint transaction in the same block\\n    /// @return Percentage of fees that would be taken during a mint transaction in the same block\\n    /// @dev This function reverts if the mint transaction was to revert in the same conditions (without taking into account\\n    /// potential approval problems to the `StableMaster` contract)\\n    function previewMintAndFees(\\n        uint256 amount,\\n        address agToken,\\n        address collateral\\n    ) external view returns (uint256, uint256) {\\n        return _previewMintAndFees(amount, agToken, collateral);\\n    }\\n\\n    /// @notice Gives the amount of `collateral` you'd be getting if you were executing in the same block a burn transaction\\n    ///  with `amount` of `agToken` in the Core module of the Angle protocol as well as the value of the fees\\n    /// (in `BASE_PARAMS`) that would be applied during the burn\\n    /// @return Amount of `collateral` that would be obtained with a burn transaction in the same block\\n    /// @return Percentage of fees that would be taken during a burn transaction in the same block\\n    /// @dev This function reverts if the burn transaction was to revert in the same conditions (without taking into account\\n    /// potential approval problems to the `StableMaster` contract or agToken balance prior to the call)\\n    function previewBurnAndFees(\\n        uint256 amount,\\n        address agToken,\\n        address collateral\\n    ) external view returns (uint256, uint256) {\\n        return _previewBurnAndFees(amount, agToken, collateral);\\n    }\\n\\n    /// @notice Returns all the addresses associated to the (`agToken`,`collateral`) pair given\\n    /// @return addresses A struct with all the addresses associated in the Core module\\n    function getCollateralAddresses(address agToken, address collateral)\\n        external\\n        view\\n        returns (CollateralAddresses memory addresses)\\n    {\\n        address stableMaster = IAgTokenMainnet(agToken).stableMaster();\\n        (address poolManager, address perpetualManager, address sanToken, address gauge) = ROUTER.mapPoolManagers(\\n            stableMaster,\\n            collateral\\n        );\\n        (, , , IOracleCore oracle, , , , , ) = IStableMaster(stableMaster).collateralMap(poolManager);\\n        addresses.stableMaster = stableMaster;\\n        addresses.poolManager = poolManager;\\n        addresses.perpetualManager = perpetualManager;\\n        addresses.sanToken = sanToken;\\n        addresses.gauge = gauge;\\n        addresses.oracle = address(oracle);\\n        addresses.feeManager = IPoolManager(poolManager).feeManager();\\n\\n        uint256 length = 0;\\n        while (true) {\\n            try IPoolManager(poolManager).strategyList(length) returns (address) {\\n                length += 1;\\n            } catch {\\n                break;\\n            }\\n        }\\n        address[] memory strategies = new address[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            strategies[i] = IPoolManager(poolManager).strategyList(i);\\n        }\\n        addresses.strategies = strategies;\\n    }\\n\\n    /// @notice Gets the addresses of all the `StableMaster` contracts and their associated `AgToken` addresses\\n    /// @return List of the `StableMaster` addresses of the Angle protocol\\n    /// @return List of the `AgToken` addresses of the protocol\\n    /// @dev The place of an agToken address in the list is the same as the corresponding `StableMaster` address\\n    function getStablecoinAddresses() external view returns (address[] memory, address[] memory) {\\n        address[] memory stableMasterAddresses = CORE.stablecoinList();\\n        address[] memory agTokenAddresses = new address[](stableMasterAddresses.length);\\n        for (uint256 i = 0; i < stableMasterAddresses.length; ++i) {\\n            agTokenAddresses[i] = IStableMaster(stableMasterAddresses[i]).agToken();\\n        }\\n        return (stableMasterAddresses, agTokenAddresses);\\n    }\\n\\n    /// @notice Returns most of the governance parameters associated to the (`agToken`,`collateral`) pair given\\n    /// @return params Struct with most of the parameters in the `StableMaster` and `PerpetualManager` contracts\\n    /// @dev Check out the struct `Parameters` for the meaning of the return values\\n    function getCollateralParameters(address agToken, address collateral)\\n        external\\n        view\\n        returns (Parameters memory params)\\n    {\\n        (address stableMaster, address poolManager) = _getStableMasterAndPoolManager(agToken, collateral);\\n        (\\n            ,\\n            ,\\n            IPerpetualManager perpetualManager,\\n            ,\\n            ,\\n            ,\\n            ,\\n            SLPData memory slpData,\\n            MintBurnData memory feeData\\n        ) = IStableMaster(stableMaster).collateralMap(poolManager);\\n\\n        params.slpData = slpData;\\n        params.feeData = feeData;\\n        params.perpParam.maintenanceMargin = perpetualManager.maintenanceMargin();\\n        params.perpParam.maxLeverage = perpetualManager.maxLeverage();\\n        params.perpParam.targetHAHedge = perpetualManager.targetHAHedge();\\n        params.perpParam.limitHAHedge = perpetualManager.limitHAHedge();\\n        params.perpParam.lockTime = perpetualManager.lockTime();\\n\\n        params.perpFeeData.haBonusMalusDeposit = perpetualManager.haBonusMalusDeposit();\\n        params.perpFeeData.haBonusMalusWithdraw = perpetualManager.haBonusMalusWithdraw();\\n\\n        uint256 length = 0;\\n        while (true) {\\n            try perpetualManager.xHAFeesDeposit(length) returns (uint64) {\\n                length += 1;\\n            } catch {\\n                break;\\n            }\\n        }\\n        uint64[] memory data = new uint64[](length);\\n        uint64[] memory data2 = new uint64[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            data[i] = perpetualManager.xHAFeesDeposit(i);\\n            data2[i] = perpetualManager.yHAFeesDeposit(i);\\n        }\\n        params.perpFeeData.xHAFeesDeposit = data;\\n        params.perpFeeData.yHAFeesDeposit = data2;\\n\\n        length = 0;\\n        while (true) {\\n            try perpetualManager.xHAFeesWithdraw(length) returns (uint64) {\\n                length += 1;\\n            } catch {\\n                break;\\n            }\\n        }\\n        data = new uint64[](length);\\n        data2 = new uint64[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            data[i] = perpetualManager.xHAFeesWithdraw(i);\\n            data2[i] = perpetualManager.yHAFeesWithdraw(i);\\n        }\\n        params.perpFeeData.xHAFeesWithdraw = data;\\n        params.perpFeeData.yHAFeesWithdraw = data2;\\n    }\\n\\n    /// @notice Returns the address of the poolManager associated to an (`agToken`, `collateral`) pair\\n    /// in the Core module of the protocol\\n    function getPoolManager(address agToken, address collateral) public view returns (address poolManager) {\\n        (, poolManager) = _getStableMasterAndPoolManager(agToken, collateral);\\n    }\\n\\n    // ======================== Replica Functions ==================================\\n    // These replicate what is done in the other contracts of the protocol\\n\\n    function _previewBurnAndFees(\\n        uint256 amount,\\n        address agToken,\\n        address collateral\\n    ) internal view returns (uint256 amountForUserInCollat, uint256 feePercent) {\\n        (address stableMaster, address poolManager) = _getStableMasterAndPoolManager(agToken, collateral);\\n        (\\n            address token,\\n            ,\\n            IPerpetualManager perpetualManager,\\n            IOracleCore oracle,\\n            uint256 stocksUsers,\\n            ,\\n            uint256 collatBase,\\n            ,\\n            MintBurnData memory feeData\\n        ) = IStableMaster(stableMaster).collateralMap(poolManager);\\n        if (token == address(0) || IStableMaster(stableMaster).paused(keccak256(abi.encodePacked(STABLE, poolManager))))\\n            revert NotInitialized();\\n        if (amount > stocksUsers) revert InvalidAmount();\\n\\n        if (feeData.xFeeBurn.length == 1) {\\n            feePercent = feeData.yFeeBurn[0];\\n        } else {\\n            bytes memory data = abi.encode(address(perpetualManager), feeData.targetHAHedge);\\n            uint64 hedgeRatio = _computeHedgeRatio(stocksUsers - amount, data);\\n            feePercent = _piecewiseLinear(hedgeRatio, feeData.xFeeBurn, feeData.yFeeBurn);\\n        }\\n        feePercent = (feePercent * feeData.bonusMalusBurn) / BASE_PARAMS;\\n\\n        amountForUserInCollat = (amount * (BASE_PARAMS - feePercent) * collatBase) / (oracle.readUpper() * BASE_PARAMS);\\n    }\\n\\n    function _previewMintAndFees(\\n        uint256 amount,\\n        address agToken,\\n        address collateral\\n    ) internal view returns (uint256 amountForUserInStable, uint256 feePercent) {\\n        (address stableMaster, address poolManager) = _getStableMasterAndPoolManager(agToken, collateral);\\n        (\\n            address token,\\n            ,\\n            IPerpetualManager perpetualManager,\\n            IOracleCore oracle,\\n            uint256 stocksUsers,\\n            ,\\n            ,\\n            ,\\n            MintBurnData memory feeData\\n        ) = IStableMaster(stableMaster).collateralMap(poolManager);\\n        if (token == address(0) || IStableMaster(stableMaster).paused(keccak256(abi.encodePacked(STABLE, poolManager))))\\n            revert NotInitialized();\\n\\n        amountForUserInStable = oracle.readQuoteLower(amount);\\n\\n        if (feeData.xFeeMint.length == 1) feePercent = feeData.yFeeMint[0];\\n        else {\\n            bytes memory data = abi.encode(address(perpetualManager), feeData.targetHAHedge);\\n            uint64 hedgeRatio = _computeHedgeRatio(amountForUserInStable + stocksUsers, data);\\n            feePercent = _piecewiseLinear(hedgeRatio, feeData.xFeeMint, feeData.yFeeMint);\\n        }\\n        feePercent = (feePercent * feeData.bonusMalusMint) / BASE_PARAMS;\\n\\n        amountForUserInStable = (amountForUserInStable * (BASE_PARAMS - feePercent)) / BASE_PARAMS;\\n        if (stocksUsers + amountForUserInStable > feeData.capOnStableMinted) revert InvalidAmount();\\n    }\\n\\n    // ======================== Utility Functions ==================================\\n    // These utility functions are taken from other contracts of the protocol\\n\\n    function _computeHedgeRatio(uint256 newStocksUsers, bytes memory data) internal view returns (uint64 ratio) {\\n        (address perpetualManager, uint64 targetHAHedge) = abi.decode(data, (address, uint64));\\n        uint256 totalHedgeAmount = IPerpetualManager(perpetualManager).totalHedgeAmount();\\n        newStocksUsers = (targetHAHedge * newStocksUsers) / BASE_PARAMS;\\n        if (newStocksUsers > totalHedgeAmount) ratio = uint64((totalHedgeAmount * BASE_PARAMS) / newStocksUsers);\\n        else ratio = uint64(BASE_PARAMS);\\n    }\\n\\n    function _piecewiseLinear(\\n        uint64 x,\\n        uint64[] memory xArray,\\n        uint64[] memory yArray\\n    ) internal pure returns (uint64) {\\n        if (x >= xArray[xArray.length - 1]) {\\n            return yArray[xArray.length - 1];\\n        } else if (x <= xArray[0]) {\\n            return yArray[0];\\n        } else {\\n            uint256 lower;\\n            uint256 upper = xArray.length - 1;\\n            uint256 mid;\\n            while (upper - lower > 1) {\\n                mid = lower + (upper - lower) / 2;\\n                if (xArray[mid] <= x) {\\n                    lower = mid;\\n                } else {\\n                    upper = mid;\\n                }\\n            }\\n            if (yArray[upper] > yArray[lower]) {\\n                return\\n                    yArray[lower] +\\n                    ((yArray[upper] - yArray[lower]) * (x - xArray[lower])) /\\n                    (xArray[upper] - xArray[lower]);\\n            } else {\\n                return\\n                    yArray[lower] -\\n                    ((yArray[lower] - yArray[upper]) * (x - xArray[lower])) /\\n                    (xArray[upper] - xArray[lower]);\\n            }\\n        }\\n    }\\n\\n    function _getStableMasterAndPoolManager(address agToken, address collateral)\\n        internal\\n        view\\n        returns (address stableMaster, address poolManager)\\n    {\\n        stableMaster = IAgTokenMainnet(agToken).stableMaster();\\n        (poolManager, , , ) = ROUTER.mapPoolManagers(stableMaster, collateral);\\n    }\\n\\n    // ====================== Constants and Initializers ===========================\\n\\n    IAngleRouter public constant ROUTER = IAngleRouter(0xBB755240596530be0c1DE5DFD77ec6398471561d);\\n    ICore public constant CORE = ICore(0x61ed74de9Ca5796cF2F8fD60D54160D47E30B7c3);\\n\\n    bytes32 public constant STABLE = keccak256(\\\"STABLE\\\");\\n    uint256 public constant BASE_PARAMS = 10**9;\\n\\n    error NotInitialized();\\n    error InvalidAmount();\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n}\\n\",\"keccak256\":\"0x53643834a2f5742c6e4cc8b3617f37bc66b70d07543708e0b77bb5c6d3535be9\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b620016171760201c565b15905090565b3b151590565b61304480620001126000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80636b6c077411610076578063874699361161005b57806387469936146101c55780638f3badbd146101ed5780639f48118f1461020057600080fd5b80636b6c07741461018a578063841cb35b146101a557600080fd5b806332fe7b26116100a757806332fe7b261461010257806353429e731461014257806354d9f6531461015557600080fd5b80631c90239c146100c35780631ea98352146100e2575b600080fd5b6100cb61020b565b6040516100d9929190612438565b60405180910390f35b6100f56100f036600461248b565b6103e4565b6040516100d991906124c4565b61011d73bb755240596530be0c1de5dfd77ec6398471561d81565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100d9565b61011d61015036600461248b565b6109f2565b61017c7ffb286912c6eadba541f23a3bb3e83373ab139b6e65d84e2a473c186efc2b464281565b6040519081526020016100d9565b61011d7361ed74de9ca5796cf2f8fd60d54160d47e30b7c381565b6101b86101b336600461248b565b610a06565b6040516100d9919061275b565b6101d86101d336600461288c565b6115ef565b604080519283526020830191909152016100d9565b6101d86101fb36600461288c565b611609565b61017c633b9aca0081565b60608060007361ed74de9ca5796cf2f8fd60d54160d47e30b7c373ffffffffffffffffffffffffffffffffffffffff1663b13380346040518163ffffffff1660e01b8152600401600060405180830381865afa15801561026f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526102b5919081019061299a565b90506000815167ffffffffffffffff8111156102d3576102d36128ce565b6040519080825280602002602001820160405280156102fc578160200160208202803683370190505b50905060005b82518110156103da5782818151811061031d5761031d612a39565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663ee565a636040518163ffffffff1660e01b8152600401602060405180830381865afa15801561036f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103939190612a68565b8282815181106103a5576103a5612a39565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526103d381612ab4565b9050610302565b5090939092509050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082019290925260e081019190915260008373ffffffffffffffffffffffffffffffffffffffff16636ac5dc466040518163ffffffff1660e01b8152600401602060405180830381865afa158015610474573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104989190612a68565b6040517f7c295dfa00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301528516602482015290915060009081908190819073bb755240596530be0c1de5dfd77ec6398471561d90637c295dfa90604401608060405180830381865afa15801561052a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054e9190612aed565b6040517fba8b722300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8086166004830152949850929650909450925060009187169063ba8b722390602401600060405180830381865afa1580156105c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261060e9190810190612ccd565b5050505050935050505085876000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505084876020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505083876040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082876060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818760a0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080876080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508473ffffffffffffffffffffffffffffffffffffffff1663d0fb02036040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d79190612a68565b73ffffffffffffffffffffffffffffffffffffffff1660c088015260005b6040517fa267526b0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff87169063a267526b90602401602060405180830381865afa92505050801561089a575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261089791810190612a68565b60015b6108a3576108b6565b6108ae600183612e28565b9150506107f5565b60008167ffffffffffffffff8111156108d1576108d16128ce565b6040519080825280602002602001820160405280156108fa578160200160208202803683370190505b50905060005b828110156109de576040517fa267526b0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff89169063a267526b90602401602060405180830381865afa158015610973573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109979190612a68565b8282815181106109a9576109a9612a39565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526109d781612ab4565b9050610900565b5060e0890152509598975050505050505050565b60006109fe838361161d565b949350505050565b610afe60408051610180810190915260006080820181815260a0830182905260c0830182905260e08301829052610100830182905261012083018290526101408301829052610160830191909152819081526040805161010081018252606080825260208281018290529282018190528082015260006080820181905260a0820181905260c0820181905260e082015291019081526040805160c081018252606080825260208281018290529282018190528082015260006080820181905260a082015291019081526040805160a0810182526000808252602082810182905292820181905260608201819052608082015291015290565b600080610b0b858561161d565b6040517fba8b722300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301529294509092506000918291829186169063ba8b722390602401600060405180830381865afa158015610b84573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610bca9190810190612ccd565b9850985050505050945050508186600001819052508086602001819052508273ffffffffffffffffffffffffffffffffffffffff1663d5eb05816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c579190612e40565b606087015167ffffffffffffffff9091169052604080517fae3302c2000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff85169163ae3302c29160048083019260209291908290030181865afa158015610cd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf99190612e40565b606087015167ffffffffffffffff909116602091820152604080517f8d5e19f1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff861692638d5e19f192600480820193918290030181865afa158015610d77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9b9190612e40565b86606001516040019067ffffffffffffffff16908167ffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1663324f38156040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2d9190612e40565b86606001516060019067ffffffffffffffff16908167ffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff16630d6680876040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebf9190612e40565b86606001516080019067ffffffffffffffff16908167ffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1663c0212c726040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f519190612e40565b86604001516080019067ffffffffffffffff16908167ffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff16638e2401446040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe39190612e40565b604087015167ffffffffffffffff90911660a09091015260005b6040517fc1618dda0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff85169063c1618dda90602401602060405180830381865afa9250505080156110a2575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261109f91810190612e40565b60015b6110ab576110be565b6110b6600183612e28565b915050610ffd565b60008167ffffffffffffffff8111156110d9576110d96128ce565b604051908082528060200260200182016040528015611102578160200160208202803683370190505b50905060008267ffffffffffffffff811115611120576111206128ce565b604051908082528060200260200182016040528015611149578160200160208202803683370190505b50905060005b838110156112dc576040517fc1618dda0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff88169063c1618dda90602401602060405180830381865afa1580156111c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e69190612e40565b8382815181106111f8576111f8612a39565b67ffffffffffffffff92909216602092830291909101909101526040517f142c3ba00000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff88169063142c3ba090602401602060405180830381865afa15801561127d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a19190612e40565b8282815181106112b3576112b3612a39565b67ffffffffffffffff909216602092830291909101909101526112d581612ab4565b905061114f565b5060408901805183905251602001819052600092505b6040517f49a5d3ef0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff8716906349a5d3ef90602401602060405180830381865afa925050508015611397575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261139491810190612e40565b60015b6113a0576113b3565b6113ab600185612e28565b9350506112f2565b8267ffffffffffffffff8111156113cc576113cc6128ce565b6040519080825280602002602001820160405280156113f5578160200160208202803683370190505b5091508267ffffffffffffffff811115611411576114116128ce565b60405190808252806020026020018201604052801561143a578160200160208202803683370190505b50905060005b838110156115cd576040517f49a5d3ef0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff8816906349a5d3ef90602401602060405180830381865afa1580156114b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d79190612e40565b8382815181106114e9576114e9612a39565b67ffffffffffffffff92909216602092830291909101909101526040517fd7f6328e0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff88169063d7f6328e90602401602060405180830381865afa15801561156e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115929190612e40565b8282815181106115a4576115a4612a39565b67ffffffffffffffff909216602092830291909101909101526115c681612ab4565b9050611440565b506040808a018051909101929092529051606001525094979650505050505050565b6000806115fd85858561174a565b91509150935093915050565b6000806115fd858585611b7c565b3b151590565b6000808373ffffffffffffffffffffffffffffffffffffffff16636ac5dc466040518163ffffffff1660e01b8152600401602060405180830381865afa15801561166b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168f9190612a68565b6040517f7c295dfa00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301528516602482015290925073bb755240596530be0c1de5dfd77ec6398471561d90637c295dfa90604401608060405180830381865afa158015611718573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173c9190612aed565b509396919550909350505050565b60008060008061175a868661161d565b6040517fba8b722300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8083166004830152929450909250600091829182918291829188169063ba8b722390602401600060405180830381865afa1580156117d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261181d9190810190612ccd565b9850505050955095509550509450600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061195357508673ffffffffffffffffffffffffffffffffffffffff16639e9e46667ffb286912c6eadba541f23a3bb3e83373ab139b6e65d84e2a473c186efc2b4642886040516020016118de92919091825260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602082015260340190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161191291815260200190565b602060405180830381865afa15801561192f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119539190612e5b565b1561198a576040517f87138d5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f3593ba7b000000000000000000000000000000000000000000000000000000008152600481018d905273ffffffffffffffffffffffffffffffffffffffff841690633593ba7b90602401602060405180830381865afa1580156119f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a199190612e7d565b81515190995060011415611a57578060200151600081518110611a3e57611a3e612a39565b602002602001015167ffffffffffffffff169750611ad5565b60808101516040805173ffffffffffffffffffffffffffffffffffffffff8716602082015267ffffffffffffffff90921682820152805180830382018152606090920190526000611ab1611aab858d612e28565b83611fa1565b9050611ac6818460000151856020015161208f565b67ffffffffffffffff16995050505b633b9aca008160a0015167ffffffffffffffff1689611af49190612e96565b611afe9190612f02565b9750633b9aca00611b0f8982612f16565b611b19908b612e96565b611b239190612f02565b60e0820151909950611b358a84612e28565b1115611b6d576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050935093915050565b600080600080611b8c868661161d565b915091506000806000806000808773ffffffffffffffffffffffffffffffffffffffff1663ba8b7223886040518263ffffffff1660e01b8152600401611bee919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600060405180830381865afa158015611c0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611c519190810190612ccd565b985050975050965096509650509550600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161480611d8857508773ffffffffffffffffffffffffffffffffffffffff16639e9e46667ffb286912c6eadba541f23a3bb3e83373ab139b6e65d84e2a473c186efc2b464289604051602001611d1392919091825260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602082015260340190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611d4791815260200190565b602060405180830381865afa158015611d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d889190612e5b565b15611dbf576040517f87138d5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828d1115611df9576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80604001515160011415611e37578060600151600081518110611e1e57611e1e612a39565b602002602001015167ffffffffffffffff169850611eb8565b60808101516040805173ffffffffffffffffffffffffffffffffffffffff8816602082015267ffffffffffffffff9092169082015260009060600160405160208183030381529060405290506000611e948f86611aab9190612f16565b9050611ea9818460400151856060015161208f565b67ffffffffffffffff169a5050505b633b9aca008160c0015167ffffffffffffffff168a611ed79190612e96565b611ee19190612f02565b9850633b9aca008473ffffffffffffffffffffffffffffffffffffffff1663442133bd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f579190612e7d565b611f619190612e96565b82611f708b633b9aca00612f16565b8f611f7b9190612e96565b611f859190612e96565b611f8f9190612f02565b99505050505050505050935093915050565b600080600083806020019051810190611fba9190612f2d565b9150915060008273ffffffffffffffffffffffffffffffffffffffff1663b8f368956040518163ffffffff1660e01b8152600401602060405180830381865afa15801561200b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202f9190612e7d565b9050633b9aca0061204a8767ffffffffffffffff8516612e96565b6120549190612f02565b95508086111561207e578561206d633b9aca0083612e96565b6120779190612f02565b9350612086565b633b9aca0093505b50505092915050565b600082600184516120a09190612f16565b815181106120b0576120b0612a39565b602002602001015167ffffffffffffffff168467ffffffffffffffff16106121005781600184516120e19190612f16565b815181106120f1576120f1612a39565b602002602001015190506123e0565b8260008151811061211357612113612a39565b602002602001015167ffffffffffffffff168467ffffffffffffffff161161214857816000815181106120f1576120f1612a39565b600080600185516121599190612f16565b905060005b600161216a8484612f16565b11156121d657600261217c8484612f16565b6121869190612f02565b6121909084612e28565b90508667ffffffffffffffff168682815181106121af576121af612a39565b602002602001015167ffffffffffffffff16116121ce5780925061215e565b80915061215e565b8483815181106121e8576121e8612a39565b602002602001015167ffffffffffffffff1685838151811061220c5761220c612a39565b602002602001015167ffffffffffffffff1611156123075785838151811061223657612236612a39565b602002602001015186838151811061225057612250612a39565b60200260200101516122629190612f62565b86848151811061227457612274612a39565b6020026020010151886122879190612f62565b86858151811061229957612299612a39565b60200260200101518785815181106122b3576122b3612a39565b60200260200101516122c59190612f62565b6122cf9190612f8b565b6122d99190612fbb565b8584815181106122eb576122eb612a39565b60200260200101516122fd9190612fe2565b93505050506123e0565b85838151811061231957612319612a39565b602002602001015186838151811061233357612333612a39565b60200260200101516123459190612f62565b86848151811061235757612357612a39565b60200260200101518861236a9190612f62565b86848151811061237c5761237c612a39565b602002602001015187868151811061239657612396612a39565b60200260200101516123a89190612f62565b6123b29190612f8b565b6123bc9190612fbb565b8584815181106123ce576123ce612a39565b60200260200101516122fd9190612f62565b9392505050565b600081518084526020808501945080840160005b8381101561242d57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016123fb565b509495945050505050565b60408152600061244b60408301856123e7565b828103602084015261245d81856123e7565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461248857600080fd5b50565b6000806040838503121561249e57600080fd5b82356124a981612466565b915060208301356124b981612466565b809150509250929050565b60208152600073ffffffffffffffffffffffffffffffffffffffff80845116602084015280602085015116604084015250604083015161251c606084018273ffffffffffffffffffffffffffffffffffffffff169052565b50606083015173ffffffffffffffffffffffffffffffffffffffff8116608084015250608083015173ffffffffffffffffffffffffffffffffffffffff811660a08401525060a083015173ffffffffffffffffffffffffffffffffffffffff811660c08401525060c083015173ffffffffffffffffffffffffffffffffffffffff811660e08401525060e0830151610100838101526109fe6101208401826123e7565b600081518084526020808501945080840160005b8381101561242d57815167ffffffffffffffff16875295820195908201906001016125d3565b6000610100825181855261260f828601826125bf565b9150506020830151848203602086015261262982826125bf565b9150506040830151848203604086015261264382826125bf565b9150506060830151848203606086015261265d82826125bf565b915050608083015161267b608086018267ffffffffffffffff169052565b5060a083015161269760a086018267ffffffffffffffff169052565b5060c08301516126b360c086018267ffffffffffffffff169052565b5060e083015160e08501528091505092915050565b6000815160c084526126dd60c08501826125bf565b9050602083015184820360208601526126f682826125bf565b9150506040830151848203604086015261271082826125bf565b9150506060830151848203606086015261272a82826125bf565b915050608083015167ffffffffffffffff80821660808701528060a08601511660a087015250508091505092915050565b602081526000825180516020840152602081015160408401526040810151606084015260608101516080840152608081015167ffffffffffffffff80821660a08601528060a08401511660c08601528060c08401511660e0860152505060e081015190506127d661010084018267ffffffffffffffff169052565b5060208301516101e06101208401526127f36102008401826125f9565b905060408401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08483030161014085015261282f82826126c8565b915050606084015161288461016085018267ffffffffffffffff808251168352806020830151166020840152806040830151166040840152806060830151166060840152806080830151166080840152505050565b509392505050565b6000806000606084860312156128a157600080fd5b8335925060208401356128b381612466565b915060408401356128c381612466565b809150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715612921576129216128ce565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561296e5761296e6128ce565b604052919050565b600067ffffffffffffffff821115612990576129906128ce565b5060051b60200190565b600060208083850312156129ad57600080fd5b825167ffffffffffffffff8111156129c457600080fd5b8301601f810185136129d557600080fd5b80516129e86129e382612976565b612927565b81815260059190911b82018301908381019087831115612a0757600080fd5b928401925b82841015612a2e578351612a1f81612466565b82529284019290840190612a0c565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215612a7a57600080fd5b81516123e081612466565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612ae657612ae6612a85565b5060010190565b60008060008060808587031215612b0357600080fd5b8451612b0e81612466565b6020860151909450612b1f81612466565b6040860151909350612b3081612466565b6060860151909250612b4181612466565b939692955090935050565b805167ffffffffffffffff81168114612b6457600080fd5b919050565b600082601f830112612b7a57600080fd5b81516020612b8a6129e383612976565b82815260059290921b84018101918181019086841115612ba957600080fd5b8286015b84811015612bcb57612bbe81612b4c565b8352918301918301612bad565b509695505050505050565b60006101008284031215612be957600080fd5b612bf16128fd565b9050815167ffffffffffffffff80821115612c0b57600080fd5b612c1785838601612b69565b83526020840151915080821115612c2d57600080fd5b612c3985838601612b69565b60208401526040840151915080821115612c5257600080fd5b612c5e85838601612b69565b60408401526060840151915080821115612c7757600080fd5b50612c8484828501612b69565b606083015250612c9660808301612b4c565b6080820152612ca760a08301612b4c565b60a0820152612cb860c08301612b4c565b60c082015260e082015160e082015292915050565b6000806000806000806000806000898b03610200811215612ced57600080fd5b8a51612cf881612466565b60208c0151909a50612d0981612466565b60408c0151909950612d1a81612466565b60608c0151909850612d2b81612466565b8097505060808b0151955060a08b0151945060c08b01519350610100807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2083011215612d7657600080fd5b612d7e6128fd565b60e08d01518152908c015160208201526101208c015160408201526101408c015160608201529050612db36101608c01612b4c565b6080820152612dc56101808c01612b4c565b60a0820152612dd76101a08c01612b4c565b60c0820152612de96101c08c01612b4c565b60e08201526101e08b015190925067ffffffffffffffff811115612e0c57600080fd5b612e188c828d01612bd6565b9150509295985092959850929598565b60008219821115612e3b57612e3b612a85565b500190565b600060208284031215612e5257600080fd5b6123e082612b4c565b600060208284031215612e6d57600080fd5b815180151581146123e057600080fd5b600060208284031215612e8f57600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612ece57612ece612a85565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082612f1157612f11612ed3565b500490565b600082821015612f2857612f28612a85565b500390565b60008060408385031215612f4057600080fd5b8251612f4b81612466565b9150612f5960208401612b4c565b90509250929050565b600067ffffffffffffffff83811690831681811015612f8357612f83612a85565b039392505050565b600067ffffffffffffffff80831681851681830481118215151615612fb257612fb2612a85565b02949350505050565b600067ffffffffffffffff80841680612fd657612fd6612ed3565b92169190910492915050565b600067ffffffffffffffff80831681851680830382111561300557613005612a85565b0194935050505056fea264697066735822122038a921ca843cc76dc29c483bc1f0a9227b063599516d401cdfe35d9dd4197c9864736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80636b6c077411610076578063874699361161005b57806387469936146101c55780638f3badbd146101ed5780639f48118f1461020057600080fd5b80636b6c07741461018a578063841cb35b146101a557600080fd5b806332fe7b26116100a757806332fe7b261461010257806353429e731461014257806354d9f6531461015557600080fd5b80631c90239c146100c35780631ea98352146100e2575b600080fd5b6100cb61020b565b6040516100d9929190612438565b60405180910390f35b6100f56100f036600461248b565b6103e4565b6040516100d991906124c4565b61011d73bb755240596530be0c1de5dfd77ec6398471561d81565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100d9565b61011d61015036600461248b565b6109f2565b61017c7ffb286912c6eadba541f23a3bb3e83373ab139b6e65d84e2a473c186efc2b464281565b6040519081526020016100d9565b61011d7361ed74de9ca5796cf2f8fd60d54160d47e30b7c381565b6101b86101b336600461248b565b610a06565b6040516100d9919061275b565b6101d86101d336600461288c565b6115ef565b604080519283526020830191909152016100d9565b6101d86101fb36600461288c565b611609565b61017c633b9aca0081565b60608060007361ed74de9ca5796cf2f8fd60d54160d47e30b7c373ffffffffffffffffffffffffffffffffffffffff1663b13380346040518163ffffffff1660e01b8152600401600060405180830381865afa15801561026f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526102b5919081019061299a565b90506000815167ffffffffffffffff8111156102d3576102d36128ce565b6040519080825280602002602001820160405280156102fc578160200160208202803683370190505b50905060005b82518110156103da5782818151811061031d5761031d612a39565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663ee565a636040518163ffffffff1660e01b8152600401602060405180830381865afa15801561036f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103939190612a68565b8282815181106103a5576103a5612a39565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526103d381612ab4565b9050610302565b5090939092509050565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c082019290925260e081019190915260008373ffffffffffffffffffffffffffffffffffffffff16636ac5dc466040518163ffffffff1660e01b8152600401602060405180830381865afa158015610474573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104989190612a68565b6040517f7c295dfa00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301528516602482015290915060009081908190819073bb755240596530be0c1de5dfd77ec6398471561d90637c295dfa90604401608060405180830381865afa15801561052a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054e9190612aed565b6040517fba8b722300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8086166004830152949850929650909450925060009187169063ba8b722390602401600060405180830381865afa1580156105c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261060e9190810190612ccd565b5050505050935050505085876000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505084876020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505083876040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082876060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818760a0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080876080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508473ffffffffffffffffffffffffffffffffffffffff1663d0fb02036040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d79190612a68565b73ffffffffffffffffffffffffffffffffffffffff1660c088015260005b6040517fa267526b0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff87169063a267526b90602401602060405180830381865afa92505050801561089a575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261089791810190612a68565b60015b6108a3576108b6565b6108ae600183612e28565b9150506107f5565b60008167ffffffffffffffff8111156108d1576108d16128ce565b6040519080825280602002602001820160405280156108fa578160200160208202803683370190505b50905060005b828110156109de576040517fa267526b0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff89169063a267526b90602401602060405180830381865afa158015610973573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109979190612a68565b8282815181106109a9576109a9612a39565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526109d781612ab4565b9050610900565b5060e0890152509598975050505050505050565b60006109fe838361161d565b949350505050565b610afe60408051610180810190915260006080820181815260a0830182905260c0830182905260e08301829052610100830182905261012083018290526101408301829052610160830191909152819081526040805161010081018252606080825260208281018290529282018190528082015260006080820181905260a0820181905260c0820181905260e082015291019081526040805160c081018252606080825260208281018290529282018190528082015260006080820181905260a082015291019081526040805160a0810182526000808252602082810182905292820181905260608201819052608082015291015290565b600080610b0b858561161d565b6040517fba8b722300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301529294509092506000918291829186169063ba8b722390602401600060405180830381865afa158015610b84573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610bca9190810190612ccd565b9850985050505050945050508186600001819052508086602001819052508273ffffffffffffffffffffffffffffffffffffffff1663d5eb05816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c579190612e40565b606087015167ffffffffffffffff9091169052604080517fae3302c2000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff85169163ae3302c29160048083019260209291908290030181865afa158015610cd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf99190612e40565b606087015167ffffffffffffffff909116602091820152604080517f8d5e19f1000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff861692638d5e19f192600480820193918290030181865afa158015610d77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9b9190612e40565b86606001516040019067ffffffffffffffff16908167ffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1663324f38156040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2d9190612e40565b86606001516060019067ffffffffffffffff16908167ffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff16630d6680876040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebf9190612e40565b86606001516080019067ffffffffffffffff16908167ffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1663c0212c726040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f519190612e40565b86604001516080019067ffffffffffffffff16908167ffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff16638e2401446040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe39190612e40565b604087015167ffffffffffffffff90911660a09091015260005b6040517fc1618dda0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff85169063c1618dda90602401602060405180830381865afa9250505080156110a2575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261109f91810190612e40565b60015b6110ab576110be565b6110b6600183612e28565b915050610ffd565b60008167ffffffffffffffff8111156110d9576110d96128ce565b604051908082528060200260200182016040528015611102578160200160208202803683370190505b50905060008267ffffffffffffffff811115611120576111206128ce565b604051908082528060200260200182016040528015611149578160200160208202803683370190505b50905060005b838110156112dc576040517fc1618dda0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff88169063c1618dda90602401602060405180830381865afa1580156111c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e69190612e40565b8382815181106111f8576111f8612a39565b67ffffffffffffffff92909216602092830291909101909101526040517f142c3ba00000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff88169063142c3ba090602401602060405180830381865afa15801561127d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a19190612e40565b8282815181106112b3576112b3612a39565b67ffffffffffffffff909216602092830291909101909101526112d581612ab4565b905061114f565b5060408901805183905251602001819052600092505b6040517f49a5d3ef0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff8716906349a5d3ef90602401602060405180830381865afa925050508015611397575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261139491810190612e40565b60015b6113a0576113b3565b6113ab600185612e28565b9350506112f2565b8267ffffffffffffffff8111156113cc576113cc6128ce565b6040519080825280602002602001820160405280156113f5578160200160208202803683370190505b5091508267ffffffffffffffff811115611411576114116128ce565b60405190808252806020026020018201604052801561143a578160200160208202803683370190505b50905060005b838110156115cd576040517f49a5d3ef0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff8816906349a5d3ef90602401602060405180830381865afa1580156114b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d79190612e40565b8382815181106114e9576114e9612a39565b67ffffffffffffffff92909216602092830291909101909101526040517fd7f6328e0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff88169063d7f6328e90602401602060405180830381865afa15801561156e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115929190612e40565b8282815181106115a4576115a4612a39565b67ffffffffffffffff909216602092830291909101909101526115c681612ab4565b9050611440565b506040808a018051909101929092529051606001525094979650505050505050565b6000806115fd85858561174a565b91509150935093915050565b6000806115fd858585611b7c565b3b151590565b6000808373ffffffffffffffffffffffffffffffffffffffff16636ac5dc466040518163ffffffff1660e01b8152600401602060405180830381865afa15801561166b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168f9190612a68565b6040517f7c295dfa00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301528516602482015290925073bb755240596530be0c1de5dfd77ec6398471561d90637c295dfa90604401608060405180830381865afa158015611718573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173c9190612aed565b509396919550909350505050565b60008060008061175a868661161d565b6040517fba8b722300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8083166004830152929450909250600091829182918291829188169063ba8b722390602401600060405180830381865afa1580156117d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261181d9190810190612ccd565b9850505050955095509550509450600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061195357508673ffffffffffffffffffffffffffffffffffffffff16639e9e46667ffb286912c6eadba541f23a3bb3e83373ab139b6e65d84e2a473c186efc2b4642886040516020016118de92919091825260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602082015260340190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161191291815260200190565b602060405180830381865afa15801561192f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119539190612e5b565b1561198a576040517f87138d5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f3593ba7b000000000000000000000000000000000000000000000000000000008152600481018d905273ffffffffffffffffffffffffffffffffffffffff841690633593ba7b90602401602060405180830381865afa1580156119f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a199190612e7d565b81515190995060011415611a57578060200151600081518110611a3e57611a3e612a39565b602002602001015167ffffffffffffffff169750611ad5565b60808101516040805173ffffffffffffffffffffffffffffffffffffffff8716602082015267ffffffffffffffff90921682820152805180830382018152606090920190526000611ab1611aab858d612e28565b83611fa1565b9050611ac6818460000151856020015161208f565b67ffffffffffffffff16995050505b633b9aca008160a0015167ffffffffffffffff1689611af49190612e96565b611afe9190612f02565b9750633b9aca00611b0f8982612f16565b611b19908b612e96565b611b239190612f02565b60e0820151909950611b358a84612e28565b1115611b6d576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050935093915050565b600080600080611b8c868661161d565b915091506000806000806000808773ffffffffffffffffffffffffffffffffffffffff1663ba8b7223886040518263ffffffff1660e01b8152600401611bee919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600060405180830381865afa158015611c0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611c519190810190612ccd565b985050975050965096509650509550600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161480611d8857508773ffffffffffffffffffffffffffffffffffffffff16639e9e46667ffb286912c6eadba541f23a3bb3e83373ab139b6e65d84e2a473c186efc2b464289604051602001611d1392919091825260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602082015260340190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611d4791815260200190565b602060405180830381865afa158015611d64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d889190612e5b565b15611dbf576040517f87138d5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828d1115611df9576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80604001515160011415611e37578060600151600081518110611e1e57611e1e612a39565b602002602001015167ffffffffffffffff169850611eb8565b60808101516040805173ffffffffffffffffffffffffffffffffffffffff8816602082015267ffffffffffffffff9092169082015260009060600160405160208183030381529060405290506000611e948f86611aab9190612f16565b9050611ea9818460400151856060015161208f565b67ffffffffffffffff169a5050505b633b9aca008160c0015167ffffffffffffffff168a611ed79190612e96565b611ee19190612f02565b9850633b9aca008473ffffffffffffffffffffffffffffffffffffffff1663442133bd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f579190612e7d565b611f619190612e96565b82611f708b633b9aca00612f16565b8f611f7b9190612e96565b611f859190612e96565b611f8f9190612f02565b99505050505050505050935093915050565b600080600083806020019051810190611fba9190612f2d565b9150915060008273ffffffffffffffffffffffffffffffffffffffff1663b8f368956040518163ffffffff1660e01b8152600401602060405180830381865afa15801561200b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202f9190612e7d565b9050633b9aca0061204a8767ffffffffffffffff8516612e96565b6120549190612f02565b95508086111561207e578561206d633b9aca0083612e96565b6120779190612f02565b9350612086565b633b9aca0093505b50505092915050565b600082600184516120a09190612f16565b815181106120b0576120b0612a39565b602002602001015167ffffffffffffffff168467ffffffffffffffff16106121005781600184516120e19190612f16565b815181106120f1576120f1612a39565b602002602001015190506123e0565b8260008151811061211357612113612a39565b602002602001015167ffffffffffffffff168467ffffffffffffffff161161214857816000815181106120f1576120f1612a39565b600080600185516121599190612f16565b905060005b600161216a8484612f16565b11156121d657600261217c8484612f16565b6121869190612f02565b6121909084612e28565b90508667ffffffffffffffff168682815181106121af576121af612a39565b602002602001015167ffffffffffffffff16116121ce5780925061215e565b80915061215e565b8483815181106121e8576121e8612a39565b602002602001015167ffffffffffffffff1685838151811061220c5761220c612a39565b602002602001015167ffffffffffffffff1611156123075785838151811061223657612236612a39565b602002602001015186838151811061225057612250612a39565b60200260200101516122629190612f62565b86848151811061227457612274612a39565b6020026020010151886122879190612f62565b86858151811061229957612299612a39565b60200260200101518785815181106122b3576122b3612a39565b60200260200101516122c59190612f62565b6122cf9190612f8b565b6122d99190612fbb565b8584815181106122eb576122eb612a39565b60200260200101516122fd9190612fe2565b93505050506123e0565b85838151811061231957612319612a39565b602002602001015186838151811061233357612333612a39565b60200260200101516123459190612f62565b86848151811061235757612357612a39565b60200260200101518861236a9190612f62565b86848151811061237c5761237c612a39565b602002602001015187868151811061239657612396612a39565b60200260200101516123a89190612f62565b6123b29190612f8b565b6123bc9190612fbb565b8584815181106123ce576123ce612a39565b60200260200101516122fd9190612f62565b9392505050565b600081518084526020808501945080840160005b8381101561242d57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016123fb565b509495945050505050565b60408152600061244b60408301856123e7565b828103602084015261245d81856123e7565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461248857600080fd5b50565b6000806040838503121561249e57600080fd5b82356124a981612466565b915060208301356124b981612466565b809150509250929050565b60208152600073ffffffffffffffffffffffffffffffffffffffff80845116602084015280602085015116604084015250604083015161251c606084018273ffffffffffffffffffffffffffffffffffffffff169052565b50606083015173ffffffffffffffffffffffffffffffffffffffff8116608084015250608083015173ffffffffffffffffffffffffffffffffffffffff811660a08401525060a083015173ffffffffffffffffffffffffffffffffffffffff811660c08401525060c083015173ffffffffffffffffffffffffffffffffffffffff811660e08401525060e0830151610100838101526109fe6101208401826123e7565b600081518084526020808501945080840160005b8381101561242d57815167ffffffffffffffff16875295820195908201906001016125d3565b6000610100825181855261260f828601826125bf565b9150506020830151848203602086015261262982826125bf565b9150506040830151848203604086015261264382826125bf565b9150506060830151848203606086015261265d82826125bf565b915050608083015161267b608086018267ffffffffffffffff169052565b5060a083015161269760a086018267ffffffffffffffff169052565b5060c08301516126b360c086018267ffffffffffffffff169052565b5060e083015160e08501528091505092915050565b6000815160c084526126dd60c08501826125bf565b9050602083015184820360208601526126f682826125bf565b9150506040830151848203604086015261271082826125bf565b9150506060830151848203606086015261272a82826125bf565b915050608083015167ffffffffffffffff80821660808701528060a08601511660a087015250508091505092915050565b602081526000825180516020840152602081015160408401526040810151606084015260608101516080840152608081015167ffffffffffffffff80821660a08601528060a08401511660c08601528060c08401511660e0860152505060e081015190506127d661010084018267ffffffffffffffff169052565b5060208301516101e06101208401526127f36102008401826125f9565b905060408401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08483030161014085015261282f82826126c8565b915050606084015161288461016085018267ffffffffffffffff808251168352806020830151166020840152806040830151166040840152806060830151166060840152806080830151166080840152505050565b509392505050565b6000806000606084860312156128a157600080fd5b8335925060208401356128b381612466565b915060408401356128c381612466565b809150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715612921576129216128ce565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561296e5761296e6128ce565b604052919050565b600067ffffffffffffffff821115612990576129906128ce565b5060051b60200190565b600060208083850312156129ad57600080fd5b825167ffffffffffffffff8111156129c457600080fd5b8301601f810185136129d557600080fd5b80516129e86129e382612976565b612927565b81815260059190911b82018301908381019087831115612a0757600080fd5b928401925b82841015612a2e578351612a1f81612466565b82529284019290840190612a0c565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215612a7a57600080fd5b81516123e081612466565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612ae657612ae6612a85565b5060010190565b60008060008060808587031215612b0357600080fd5b8451612b0e81612466565b6020860151909450612b1f81612466565b6040860151909350612b3081612466565b6060860151909250612b4181612466565b939692955090935050565b805167ffffffffffffffff81168114612b6457600080fd5b919050565b600082601f830112612b7a57600080fd5b81516020612b8a6129e383612976565b82815260059290921b84018101918181019086841115612ba957600080fd5b8286015b84811015612bcb57612bbe81612b4c565b8352918301918301612bad565b509695505050505050565b60006101008284031215612be957600080fd5b612bf16128fd565b9050815167ffffffffffffffff80821115612c0b57600080fd5b612c1785838601612b69565b83526020840151915080821115612c2d57600080fd5b612c3985838601612b69565b60208401526040840151915080821115612c5257600080fd5b612c5e85838601612b69565b60408401526060840151915080821115612c7757600080fd5b50612c8484828501612b69565b606083015250612c9660808301612b4c565b6080820152612ca760a08301612b4c565b60a0820152612cb860c08301612b4c565b60c082015260e082015160e082015292915050565b6000806000806000806000806000898b03610200811215612ced57600080fd5b8a51612cf881612466565b60208c0151909a50612d0981612466565b60408c0151909950612d1a81612466565b60608c0151909850612d2b81612466565b8097505060808b0151955060a08b0151945060c08b01519350610100807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2083011215612d7657600080fd5b612d7e6128fd565b60e08d01518152908c015160208201526101208c015160408201526101408c015160608201529050612db36101608c01612b4c565b6080820152612dc56101808c01612b4c565b60a0820152612dd76101a08c01612b4c565b60c0820152612de96101c08c01612b4c565b60e08201526101e08b015190925067ffffffffffffffff811115612e0c57600080fd5b612e188c828d01612bd6565b9150509295985092959850929598565b60008219821115612e3b57612e3b612a85565b500190565b600060208284031215612e5257600080fd5b6123e082612b4c565b600060208284031215612e6d57600080fd5b815180151581146123e057600080fd5b600060208284031215612e8f57600080fd5b5051919050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612ece57612ece612a85565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082612f1157612f11612ed3565b500490565b600082821015612f2857612f28612a85565b500390565b60008060408385031215612f4057600080fd5b8251612f4b81612466565b9150612f5960208401612b4c565b90509250929050565b600067ffffffffffffffff83811690831681811015612f8357612f83612a85565b039392505050565b600067ffffffffffffffff80831681851681830481118215151615612fb257612fb2612a85565b02949350505050565b600067ffffffffffffffff80841680612fd657612fd6612ed3565b92169190910492915050565b600067ffffffffffffffff80831681851680830382111561300557613005612a85565b0194935050505056fea264697066735822122038a921ca843cc76dc29c483bc1f0a9227b063599516d401cdfe35d9dd4197c9864736f6c634300080c0033",
  "devdoc": {
    "author": "Angle Core Team",
    "details": "This contract only contains view functions to be queried off-chain. It was thus not optimized for gas consumption",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getCollateralAddresses(address,address)": {
        "returns": {
          "addresses": "A struct with all the addresses associated in the Core module"
        }
      },
      "getCollateralParameters(address,address)": {
        "details": "Check out the struct `Parameters` for the meaning of the return values",
        "returns": {
          "params": "Struct with most of the parameters in the `StableMaster` and `PerpetualManager` contracts"
        }
      },
      "getStablecoinAddresses()": {
        "details": "The place of an agToken address in the list is the same as the corresponding `StableMaster` address",
        "returns": {
          "_0": "List of the `StableMaster` addresses of the Angle protocol",
          "_1": "List of the `AgToken` addresses of the protocol"
        }
      },
      "previewBurnAndFees(uint256,address,address)": {
        "details": "This function reverts if the burn transaction was to revert in the same conditions (without taking into account potential approval problems to the `StableMaster` contract or agToken balance prior to the call)",
        "returns": {
          "_0": "Amount of `collateral` that would be obtained with a burn transaction in the same block",
          "_1": "Percentage of fees that would be taken during a burn transaction in the same block"
        }
      },
      "previewMintAndFees(uint256,address,address)": {
        "details": "This function reverts if the mint transaction was to revert in the same conditions (without taking into account potential approval problems to the `StableMaster` contract)",
        "returns": {
          "_0": "Amount of `agToken` that would be obtained with a mint transaction in the same block",
          "_1": "Percentage of fees that would be taken during a mint transaction in the same block"
        }
      }
    },
    "title": "AngleHelpers",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getCollateralAddresses(address,address)": {
        "notice": "Returns all the addresses associated to the (`agToken`,`collateral`) pair given"
      },
      "getCollateralParameters(address,address)": {
        "notice": "Returns most of the governance parameters associated to the (`agToken`,`collateral`) pair given"
      },
      "getPoolManager(address,address)": {
        "notice": "Returns the address of the poolManager associated to an (`agToken`, `collateral`) pair in the Core module of the protocol"
      },
      "getStablecoinAddresses()": {
        "notice": "Gets the addresses of all the `StableMaster` contracts and their associated `AgToken` addresses"
      },
      "previewBurnAndFees(uint256,address,address)": {
        "notice": "Gives the amount of `collateral` you'd be getting if you were executing in the same block a burn transaction  with `amount` of `agToken` in the Core module of the Angle protocol as well as the value of the fees (in `BASE_PARAMS`) that would be applied during the burn"
      },
      "previewMintAndFees(uint256,address,address)": {
        "notice": "Gives the amount of `agToken` you'd be getting if you were executing in the same block a mint transaction with `amount` of `collateral` in the Core module of the Angle protocol as well as the value of the fees (in `BASE_PARAMS`) that would be applied during the mint"
      }
    },
    "notice": "Contract with view functions designed to facilitate integrations on the Core module of the Angle Protocol",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 772,
        "contract": "contracts/ui-helpers/AngleHelpers.sol:AngleHelpers",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 775,
        "contract": "contracts/ui-helpers/AngleHelpers.sol:AngleHelpers",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}