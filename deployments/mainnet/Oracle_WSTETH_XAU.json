{
  "address": "0x576e414fB89C54a21422b0A6feBd6AE2348F42e4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_stalePeriod",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidChainlinkRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernorOrGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotVaultManagerOrGovernor",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_stalePeriod",
          "type": "uint32"
        }
      ],
      "name": "StalePeriodUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STETH",
      "outputs": [
        {
          "internalType": "contract IStETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_stalePeriod",
          "type": "uint32"
        }
      ],
      "name": "changeStalePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "circuitChainlink",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "read",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quoteAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stalePeriod",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "contract ITreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x75e70cc987dbd9badb53e554ca3e48f06bc7dc904e114d8054365a01b7f0cc08",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0x576e414fB89C54a21422b0A6feBd6AE2348F42e4",
    "transactionIndex": 87,
    "gasUsed": "769757",
    "logsBloom": "0x
    "blockHash": "0xca5d8bc9b8b05ee1f6421aae5c3aa4b8ffd92f2b6a0b219d44f5c850fb4ef3f0",
    "transactionHash": "0x75e70cc987dbd9badb53e554ca3e48f06bc7dc904e114d8054365a01b7f0cc08",
    "logs": [],
    "blockNumber": 16626130,
    "cumulativeGasUsed": "8127473",
    "status": 1,
    "byzantium": true
  },
  "args": [
    108000,
    "0x19F925a26A3a8eeE2438603CB04F39cbC007EfFB"
  ],
  "numDeployments": 1,
  "solcInputHash": "67093b4a6e335f95b976e3bf91551d41",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_stalePeriod\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidChainlinkRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernorOrGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVaultManagerOrGovernor\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_stalePeriod\",\"type\":\"uint32\"}],\"name\":\"StalePeriodUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STETH\",\"outputs\":[{\"internalType\":\"contract IStETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_stalePeriod\",\"type\":\"uint32\"}],\"name\":\"changeStalePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circuitChainlink\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"read\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stalePeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Labs, Inc.\",\"kind\":\"dev\",\"methods\":{\"changeStalePeriod(uint32)\":{\"params\":{\"_stalePeriod\":\"New stale period (in seconds)\"}},\"read()\":{\"details\":\"For instance if the out currency is EUR (and hence agEUR), then the base of the returned value is 10**18\",\"returns\":{\"quoteAmount\":\"The current rate between the in-currency and out-currency in the base of the out currency\"}},\"setTreasury(address)\":{\"details\":\"This function can be called by an approved `VaultManager` contract which can call this function after being requested to do so by a `treasury` contractIn some situations (like reactor contracts), the `VaultManager` may not directly be linked to the `oracle` contract and as such we may need governors to be able to call this function as well\",\"params\":{\"_treasury\":\"Address of the new treasury contract\"}}},\"title\":\"OracleWSTETHXAUChainlink\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeStalePeriod(uint32)\":{\"notice\":\"Changes the stale period\"},\"circuitChainlink()\":{\"notice\":\"Array with the list of Chainlink feeds in the order in which they are read\"},\"read()\":{\"notice\":\"Reads the rate from the Chainlink circuit and other data provided\"},\"setTreasury(address)\":{\"notice\":\"Changes the treasury contract\"},\"stalePeriod()\":{\"notice\":\"Represent the maximum amount of time (in seconds) between each Chainlink update before the price feed is considered stale\"},\"treasury()\":{\"notice\":\"Reference to the `treasury` contract handling this `VaultManager`\"}},\"notice\":\"Gives the price of wSTETH in XAU in base 18\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/implementations/mainnet/XAU/OracleWSTETHXAUChainlink.sol\":\"OracleWSTETHXAUChainlink\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"contracts/interfaces/IAgToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title IAgToken\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the stablecoins `AgToken` contracts\\n/// @dev This interface only contains functions of the `AgToken` contract which are called by other contracts\\n/// of this module or of the first module of the Angle Protocol\\ninterface IAgToken is IERC20Upgradeable {\\n    // ======================= Minter Role Only Functions ===========================\\n\\n    /// @notice Lets the `StableMaster` contract or another whitelisted contract mint agTokens\\n    /// @param account Address to mint to\\n    /// @param amount Amount to mint\\n    /// @dev The contracts allowed to issue agTokens are the `StableMaster` contract, `VaultManager` contracts\\n    /// associated to this stablecoin as well as the flash loan module (if activated) and potentially contracts\\n    /// whitelisted by governance\\n    function mint(address account, uint256 amount) external;\\n\\n    /// @notice Burns `amount` tokens from a `burner` address after being asked to by `sender`\\n    /// @param amount Amount of tokens to burn\\n    /// @param burner Address to burn from\\n    /// @param sender Address which requested the burn from `burner`\\n    /// @dev This method is to be called by a contract with the minter right after being requested\\n    /// to do so by a `sender` address willing to burn tokens from another `burner` address\\n    /// @dev The method checks the allowance between the `sender` and the `burner`\\n    function burnFrom(\\n        uint256 amount,\\n        address burner,\\n        address sender\\n    ) external;\\n\\n    /// @notice Burns `amount` tokens from a `burner` address\\n    /// @param amount Amount of tokens to burn\\n    /// @param burner Address to burn from\\n    /// @dev This method is to be called by a contract with a minter right on the AgToken after being\\n    /// requested to do so by an address willing to burn tokens from its address\\n    function burnSelf(uint256 amount, address burner) external;\\n\\n    // ========================= Treasury Only Functions ===========================\\n\\n    /// @notice Adds a minter in the contract\\n    /// @param minter Minter address to add\\n    /// @dev Zero address checks are performed directly in the `Treasury` contract\\n    function addMinter(address minter) external;\\n\\n    /// @notice Removes a minter from the contract\\n    /// @param minter Minter address to remove\\n    /// @dev This function can also be called by a minter wishing to revoke itself\\n    function removeMinter(address minter) external;\\n\\n    /// @notice Sets a new treasury contract\\n    /// @param _treasury New treasury address\\n    function setTreasury(address _treasury) external;\\n\\n    // ========================= External functions ================================\\n\\n    /// @notice Checks whether an address has the right to mint agTokens\\n    /// @param minter Address for which the minting right should be checked\\n    /// @return Whether the address has the right to mint agTokens or not\\n    function isMinter(address minter) external view returns (bool);\\n\\n    /// @notice Get the associated treasury\\n    function treasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd671dbd00b28a86b839fd455ada4d1ef9203694d06142be76853e00a91f80b5f\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICoreBorrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title ICoreBorrow\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the `CoreBorrow` contract\\n/// @dev This interface only contains functions of the `CoreBorrow` contract which are called by other contracts\\n/// of this module\\ninterface ICoreBorrow {\\n    /// @notice Checks if an address corresponds to a treasury of a stablecoin with a flash loan\\n    /// module initialized on it\\n    /// @param treasury Address to check\\n    /// @return Whether the address has the `FLASHLOANER_TREASURY_ROLE` or not\\n    function isFlashLoanerTreasury(address treasury) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GOVERNOR_ROLE` or not\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor or a guardian of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GUARDIAN_ROLE` or not\\n    /// @dev Governance should make sure when adding a governor to also give this governor the guardian\\n    /// role by calling the `addGovernor` function\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x10249210cbf522775f040baf981d7d037472168ce2746d87473ac7c29a34e62e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFlashAngle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"./IAgToken.sol\\\";\\nimport \\\"./ICoreBorrow.sol\\\";\\n\\n/// @title IFlashAngle\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the `FlashAngle` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module\\ninterface IFlashAngle {\\n    /// @notice Reference to the `CoreBorrow` contract managing the FlashLoan module\\n    function core() external view returns (ICoreBorrow);\\n\\n    /// @notice Sends the fees taken from flash loans to the treasury contract associated to the stablecoin\\n    /// @param stablecoin Stablecoin from which profits should be sent\\n    /// @return balance Amount of profits sent\\n    /// @dev This function can only be called by the treasury contract\\n    function accrueInterestToTreasury(IAgToken stablecoin) external returns (uint256 balance);\\n\\n    /// @notice Adds support for a stablecoin\\n    /// @param _treasury Treasury associated to the stablecoin to add support for\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function addStablecoinSupport(address _treasury) external;\\n\\n    /// @notice Removes support for a stablecoin\\n    /// @param _treasury Treasury associated to the stablecoin to remove support for\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function removeStablecoinSupport(address _treasury) external;\\n\\n    /// @notice Sets a new core contract\\n    /// @param _core Core contract address to set\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function setCore(address _core) external;\\n}\\n\",\"keccak256\":\"0x39b0097f695b9e934bccdc72676c91513f1077cc5d0fd151908fd25a7c5cfbe4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/// @title IOracle\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the `Oracle` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module\\ninterface IOracle {\\n    /// @notice Reads the rate from the Chainlink circuit and other data provided\\n    /// @return quoteAmount The current rate between the in-currency and out-currency in the base\\n    /// of the out currency\\n    /// @dev For instance if the out currency is EUR (and hence agEUR), then the base of the returned\\n    /// value is 10**18\\n    function read() external view returns (uint256);\\n\\n    /// @notice Changes the treasury contract\\n    /// @param _treasury Address of the new treasury contract\\n    /// @dev This function can be called by an approved `VaultManager` contract which can call\\n    /// this function after being requested to do so by a `treasury` contract\\n    /// @dev In some situations (like reactor contracts), the `VaultManager` may not directly be linked\\n    /// to the `oracle` contract and as such we may need governors to be able to call this function as well\\n    function setTreasury(address _treasury) external;\\n\\n    /// @notice Reference to the `treasury` contract handling this `VaultManager`\\n    function treasury() external view returns (ITreasury treasury);\\n\\n    /// @notice Array with the list of Chainlink feeds in the order in which they are read\\n    function circuitChainlink() external view returns (AggregatorV3Interface[] memory);\\n}\\n\",\"keccak256\":\"0x66fe2bb27f26b86e5832fc7d1ebd320cac8b3d79c5998ce148cf7279b2b359be\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"./IAgToken.sol\\\";\\nimport \\\"./ICoreBorrow.sol\\\";\\nimport \\\"./IFlashAngle.sol\\\";\\n\\n/// @title ITreasury\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the `Treasury` contract\\n/// @dev This interface only contains functions of the `Treasury` which are called by other contracts\\n/// of this module\\ninterface ITreasury {\\n    /// @notice Stablecoin handled by this `treasury` contract\\n    function stablecoin() external view returns (IAgToken);\\n\\n    /// @notice Checks whether a given address has the  governor role\\n    /// @param admin Address to check\\n    /// @return Whether the address has the governor role\\n    /// @dev Access control is only kept in the `CoreBorrow` contract\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether a given address has the guardian or the governor role\\n    /// @param admin Address to check\\n    /// @return Whether the address has the guardian or the governor role\\n    /// @dev Access control is only kept in the `CoreBorrow` contract which means that this function\\n    /// queries the `CoreBorrow` contract\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether a given address has well been initialized in this contract\\n    /// as a `VaultManager`\\n    /// @param _vaultManager Address to check\\n    /// @return Whether the address has been initialized or not\\n    function isVaultManager(address _vaultManager) external view returns (bool);\\n\\n    /// @notice Sets a new flash loan module for this stablecoin\\n    /// @param _flashLoanModule Reference to the new flash loan module\\n    /// @dev This function removes the minting right to the old flash loan module and grants\\n    /// it to the new module\\n    function setFlashLoanModule(address _flashLoanModule) external;\\n}\\n\",\"keccak256\":\"0x624733dae1bfb98721ba994573aed10997f7448c893b791ed985300531c361fd\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/lido/IStETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title IStETH\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the `StETH` contract\\n/// @dev This interface only contains functions of the `StETH` which are called by other contracts\\n/// of this module\\ninterface IStETH {\\n    function getPooledEthByShares(uint256 _sharesAmount) external view returns (uint256);\\n\\n    event Submitted(address sender, uint256 amount, address referral);\\n\\n    function submit(address) external payable returns (uint256);\\n\\n    function getSharesByPooledEth(uint256 _ethAmount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6943f531d9648953692c83b228e4aa795c8b09d465f3eb5307a4705a788c1cc1\",\"license\":\"GPL-3.0\"},\"contracts/oracle/BaseOracleChainlinkMulti.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n                  *                                                  \\u2588                              \\n                *****                                               \\u2593\\u2593\\u2593                             \\n                  *                                               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                         \\n                                   *            ///.           \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                       \\n                                 *****        ////////            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                          \\n                                   *       /////////////            \\u2593\\u2593\\u2593                             \\n                     \\u2593\\u2593                  //////////////////          \\u2588         \\u2593\\u2593                   \\n                   \\u2593\\u2593  \\u2593\\u2593             ///////////////////////                \\u2593\\u2593   \\u2593\\u2593                \\n                \\u2593\\u2593       \\u2593\\u2593        ////////////////////////////           \\u2593\\u2593        \\u2593\\u2593              \\n              \\u2593\\u2593            \\u2593\\u2593    /////////\\u2593\\u2593\\u2593///////\\u2593\\u2593\\u2593/////////       \\u2593\\u2593             \\u2593\\u2593            \\n           \\u2593\\u2593                 ,////////////////////////////////////// \\u2593\\u2593                 \\u2593\\u2593         \\n        \\u2593\\u2593                  //////////////////////////////////////////                     \\u2593\\u2593      \\n      \\u2593\\u2593                  //////////////////////\\u2593\\u2593\\u2593\\u2593/////////////////////                          \\n                       ,////////////////////////////////////////////////////                        \\n                    .//////////////////////////////////////////////////////////                     \\n                     .//////////////////////////\\u2588\\u2588.,//////////////////////////\\u2588                     \\n                       .//////////////////////\\u2588\\u2588\\u2588\\u2588..,./////////////////////\\u2588\\u2588                       \\n                        ...////////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588.....,.////////////////\\u2588\\u2588\\u2588                        \\n                          ,.,////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 ........,///////////\\u2588\\u2588\\u2588\\u2588                          \\n                            .,.,//////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588      ,.......///////\\u2588\\u2588\\u2588\\u2588                            \\n                               ,..//\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588           ........./\\u2588\\u2588\\u2588\\u2588                               \\n                                 ..,\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                .....,\\u2588\\u2588\\u2588                                 \\n                                    .\\u2588\\u2588                     ,.,\\u2588                                    \\n                                                                                                    \\n                                                                                                    \\n                                                                                                    \\n               \\u2593\\u2593            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n             \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593               \\u2593\\u2593               \\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593         \\n           \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593             \\n          \\u2593\\u2593\\u2593        \\u2593\\u2593      \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n*/\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\n\\n/// @title BaseOracleChainlinkMulti\\n/// @author Angle Labs, Inc.\\n/// @notice Base Contract to be overriden by all contracts of the protocol\\n/// @dev This base contract concerns an oracle that uses Chainlink with multiple pools to read from\\n/// @dev All gas-efficient implementation of the `OracleChainlinkMulti` contract should inherit from this\\nabstract contract BaseOracleChainlinkMulti is IOracle {\\n    // ========================= Parameters and References =========================\\n\\n    /// @inheritdoc IOracle\\n    ITreasury public override treasury;\\n    /// @notice Represent the maximum amount of time (in seconds) between each Chainlink update\\n    /// before the price feed is considered stale\\n    uint32 public stalePeriod;\\n\\n    // =================================== Event ===================================\\n\\n    event StalePeriodUpdated(uint32 _stalePeriod);\\n\\n    // =================================== Errors ===================================\\n\\n    error InvalidChainlinkRate();\\n    error NotGovernorOrGuardian();\\n    error NotVaultManagerOrGovernor();\\n\\n    /// @notice Constructor for an oracle using Chainlink with multiple pools to read from\\n    /// @param _stalePeriod Minimum feed update frequency for the oracle to not revert\\n    /// @param _treasury Treasury associated to the VaultManager which reads from this feed\\n    constructor(uint32 _stalePeriod, address _treasury) {\\n        stalePeriod = _stalePeriod;\\n        treasury = ITreasury(_treasury);\\n    }\\n\\n    // ============================= Reading Oracles ===============================\\n\\n    /// @inheritdoc IOracle\\n    function read() external view virtual override returns (uint256 quoteAmount);\\n\\n    /// @inheritdoc IOracle\\n    function circuitChainlink() public view virtual returns (AggregatorV3Interface[] memory);\\n\\n    /// @notice Reads a Chainlink feed using a quote amount and converts the quote amount to\\n    /// the out-currency\\n    /// @param quoteAmount The amount for which to compute the price expressed with base decimal\\n    /// @param feed Chainlink feed to query\\n    /// @param multiplied Whether the ratio outputted by Chainlink should be multiplied or divided\\n    /// to the `quoteAmount`\\n    /// @param decimals Number of decimals of the corresponding Chainlink pair\\n    /// @return The `quoteAmount` converted in out-currency\\n    function _readChainlinkFeed(\\n        uint256 quoteAmount,\\n        AggregatorV3Interface feed,\\n        uint8 multiplied,\\n        uint256 decimals\\n    ) internal view returns (uint256) {\\n        (uint80 roundId, int256 ratio, , uint256 updatedAt, uint80 answeredInRound) = feed.latestRoundData();\\n        if (ratio <= 0 || roundId > answeredInRound || block.timestamp - updatedAt > stalePeriod)\\n            revert InvalidChainlinkRate();\\n        uint256 castedRatio = uint256(ratio);\\n        // Checking whether we should multiply or divide by the ratio computed\\n        if (multiplied == 1) return (quoteAmount * castedRatio) / (10**decimals);\\n        else return (quoteAmount * (10**decimals)) / castedRatio;\\n    }\\n\\n    // ======================= Governance Related Functions ========================\\n\\n    /// @notice Changes the stale period\\n    /// @param _stalePeriod New stale period (in seconds)\\n    function changeStalePeriod(uint32 _stalePeriod) external {\\n        if (!treasury.isGovernorOrGuardian(msg.sender)) revert NotGovernorOrGuardian();\\n        stalePeriod = _stalePeriod;\\n        emit StalePeriodUpdated(_stalePeriod);\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function setTreasury(address _treasury) external override {\\n        if (!treasury.isVaultManager(msg.sender) && !treasury.isGovernor(msg.sender))\\n            revert NotVaultManagerOrGovernor();\\n        treasury = ITreasury(_treasury);\\n    }\\n}\\n\",\"keccak256\":\"0x3bbb2f3b4847967dba6f94d98e05b228c66aee49a218d8e64dd7478016771779\",\"license\":\"GPL-3.0\"},\"contracts/oracle/BaseOracleChainlinkMultiTwoFeeds.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"./BaseOracleChainlinkMulti.sol\\\";\\n\\n/// @title BaseOracleChainlinkMultiTwoFeeds\\n/// @author Angle Labs, Inc.\\n/// @notice Base contract for an oracle that reads into two Chainlink feeds (including an EUR/USD feed) which both have\\n/// 8 decimals\\nabstract contract BaseOracleChainlinkMultiTwoFeeds is BaseOracleChainlinkMulti {\\n    constructor(uint32 _stalePeriod, address _treasury) BaseOracleChainlinkMulti(_stalePeriod, _treasury) {}\\n\\n    /// @notice Returns the quote amount of the oracle contract\\n    function _getQuoteAmount() internal view virtual returns (uint256) {\\n        return 10**18;\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function read() external view virtual override returns (uint256 quoteAmount) {\\n        quoteAmount = _getQuoteAmount();\\n        AggregatorV3Interface[] memory _circuitChainlink = circuitChainlink();\\n        uint8[2] memory circuitChainIsMultiplied = [1, 0];\\n        uint8[2] memory chainlinkDecimals = [8, 8];\\n        uint256 circuitLength = _circuitChainlink.length;\\n        for (uint256 i; i < circuitLength; ++i) {\\n            quoteAmount = _readChainlinkFeed(\\n                quoteAmount,\\n                _circuitChainlink[i],\\n                circuitChainIsMultiplied[i],\\n                chainlinkDecimals[i]\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xebb59af75b56f0a458717897371327c3373c6e260b2589d22485ff3a026a3f4e\",\"license\":\"GPL-3.0\"},\"contracts/oracle/implementations/mainnet/XAU/OracleWSTETHXAUChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"../../../BaseOracleChainlinkMultiTwoFeeds.sol\\\";\\nimport \\\"../../../../interfaces/external/lido/IStETH.sol\\\";\\n\\n/// @title OracleWSTETHXAUChainlink\\n/// @author Angle Labs, Inc.\\n/// @notice Gives the price of wSTETH in XAU in base 18\\ncontract OracleWSTETHXAUChainlink is BaseOracleChainlinkMultiTwoFeeds {\\n    string public constant DESCRIPTION = \\\"wSTETH/XAU Oracle\\\";\\n    IStETH public constant STETH = IStETH(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84);\\n\\n    constructor(uint32 _stalePeriod, address _treasury) BaseOracleChainlinkMultiTwoFeeds(_stalePeriod, _treasury) {}\\n\\n    /// @inheritdoc IOracle\\n    function circuitChainlink() public pure override returns (AggregatorV3Interface[] memory) {\\n        AggregatorV3Interface[] memory _circuitChainlink = new AggregatorV3Interface[](2);\\n        // Oracle stETH/USD\\n        _circuitChainlink[0] = AggregatorV3Interface(0xCfE54B5cD566aB89272946F602D76Ea879CAb4a8);\\n        // Oracle XAU/USD\\n        _circuitChainlink[1] = AggregatorV3Interface(0x214eD9Da11D2fbe465a6fc601a91E62EbEc1a0D6);\\n        return _circuitChainlink;\\n    }\\n\\n    /// @inheritdoc BaseOracleChainlinkMultiTwoFeeds\\n    function _getQuoteAmount() internal view override returns (uint256) {\\n        return STETH.getPooledEthByShares(1 ether);\\n    }\\n}\\n\",\"keccak256\":\"0x4a2fcfc851174cdc82857b1c3b05c27d4ec21eb1855e99488b4b7ffcbd5949e8\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610d63380380610d6383398101604081905261002f91610071565b600080546001600160c01b031916600160a01b63ffffffff94909416939093026001600160a01b031916929092176001600160a01b03919091161790556100c0565b6000806040838503121561008457600080fd5b825163ffffffff8116811461009857600080fd5b60208401519092506001600160a01b03811681146100b557600080fd5b809150509250929050565b610c94806100cf6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a5b36a361161005b578063a5b36a361461011b578063e00bfe5014610158578063f0f4426014610173578063f1ae88561461018657600080fd5b80634994cc671461008d57806357de26a4146100ab57806361d027b3146100c1578063630914d114610106575b600080fd5b6100956101cf565b6040516100a2919061085e565b60405180910390f35b6100b36102a8565b6040519081526020016100a2565b6000546100e19073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a2565b6101196101143660046108b8565b610365565b005b6000546101439074010000000000000000000000000000000000000000900463ffffffff1681565b60405163ffffffff90911681526020016100a2565b6100e173ae7ab96520de3a18e5e111b5eaab095312d7fe8481565b6101196101813660046108e5565b6104b0565b6101c26040518060400160405280601181526020017f7753544554482f584155204f7261636c6500000000000000000000000000000081525081565b6040516100a2919061091b565b6040805160028082526060808301845292600092919060208301908036833701905050905073cfe54b5cd566ab89272946f602d76ea879cab4a88160008151811061021c5761021c610987565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073214ed9da11d2fbe465a6fc601a91e62ebec1a0d68160018151811061027e5761027e610987565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152919050565b60006102b261065c565b905060006102be6101cf565b6040805180820182526001815260006020808301829052835180850190945260088085529084015283519394509092905b8181101561035d5761034b8686838151811061030d5761030d610987565b602002602001015186846002811061032757610327610987565b602002015186856002811061033e5761033e610987565b602002015160ff166106f8565b9550610356816109e5565b90506102ef565b505050505090565b6000546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa1580156103d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f79190610a1d565b61042d576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000063ffffffff8416908102919091179091556040519081527f4040b15332969bfd8b2035c1a701c8e13f2b5d62ce89b311684a601b2eb44e019060200160405180910390a150565b6000546040517f676a553e00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063676a553e90602401602060405180830381865afa15801561051e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105429190610a1d565b1580156105de57506000546040517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063e43581b890602401602060405180830381865afa1580156105b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dc9190610a1d565b155b15610615576040517fb05b9b9f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6040517f7a28fb88000000000000000000000000000000000000000000000000000000008152670de0b6b3a7640000600482015260009073ae7ab96520de3a18e5e111b5eaab095312d7fe8490637a28fb8890602401602060405180830381865afa1580156106cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f39190610a3f565b905090565b60008060008060008773ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561074b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076f9190610a77565b94509450509350935060008313158061079f57508069ffffffffffffffffffff168469ffffffffffffffffffff16115b806107d2575060005474010000000000000000000000000000000000000000900463ffffffff166107d08342610ac7565b115b15610809576040517fae19356300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8260ff88166001036108405761082087600a610c00565b61082a828c610c0c565b6108349190610c23565b95505050505050610856565b8061084c88600a610c00565b61082a908c610c0c565b949350505050565b6020808252825182820181905260009190848201906040850190845b818110156108ac57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161087a565b50909695505050505050565b6000602082840312156108ca57600080fd5b813563ffffffff811681146108de57600080fd5b9392505050565b6000602082840312156108f757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146108de57600080fd5b600060208083528351808285015260005b818110156109485785810183015185820160400152820161092c565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a1657610a166109b6565b5060010190565b600060208284031215610a2f57600080fd5b815180151581146108de57600080fd5b600060208284031215610a5157600080fd5b5051919050565b805169ffffffffffffffffffff81168114610a7257600080fd5b919050565b600080600080600060a08688031215610a8f57600080fd5b610a9886610a58565b9450602086015193506040860151925060608601519150610abb60808701610a58565b90509295509295909350565b81810381811115610ada57610ada6109b6565b92915050565b600181815b80851115610b3957817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610b1f57610b1f6109b6565b80851615610b2c57918102915b93841c9390800290610ae5565b509250929050565b600082610b5057506001610ada565b81610b5d57506000610ada565b8160018114610b735760028114610b7d57610b99565b6001915050610ada565b60ff841115610b8e57610b8e6109b6565b50506001821b610ada565b5060208310610133831016604e8410600b8410161715610bbc575081810a610ada565b610bc68383610ae0565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610bf857610bf86109b6565b029392505050565b60006108de8383610b41565b8082028115828204841417610ada57610ada6109b6565b600082610c59577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea264697066735822122067bbbaf0132b5bec4bf960795e81a2cf5f39fa9a4a814b4ec92a0d1178afc34e64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063a5b36a361161005b578063a5b36a361461011b578063e00bfe5014610158578063f0f4426014610173578063f1ae88561461018657600080fd5b80634994cc671461008d57806357de26a4146100ab57806361d027b3146100c1578063630914d114610106575b600080fd5b6100956101cf565b6040516100a2919061085e565b60405180910390f35b6100b36102a8565b6040519081526020016100a2565b6000546100e19073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a2565b6101196101143660046108b8565b610365565b005b6000546101439074010000000000000000000000000000000000000000900463ffffffff1681565b60405163ffffffff90911681526020016100a2565b6100e173ae7ab96520de3a18e5e111b5eaab095312d7fe8481565b6101196101813660046108e5565b6104b0565b6101c26040518060400160405280601181526020017f7753544554482f584155204f7261636c6500000000000000000000000000000081525081565b6040516100a2919061091b565b6040805160028082526060808301845292600092919060208301908036833701905050905073cfe54b5cd566ab89272946f602d76ea879cab4a88160008151811061021c5761021c610987565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073214ed9da11d2fbe465a6fc601a91e62ebec1a0d68160018151811061027e5761027e610987565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152919050565b60006102b261065c565b905060006102be6101cf565b6040805180820182526001815260006020808301829052835180850190945260088085529084015283519394509092905b8181101561035d5761034b8686838151811061030d5761030d610987565b602002602001015186846002811061032757610327610987565b602002015186856002811061033e5761033e610987565b602002015160ff166106f8565b9550610356816109e5565b90506102ef565b505050505090565b6000546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa1580156103d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f79190610a1d565b61042d576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000063ffffffff8416908102919091179091556040519081527f4040b15332969bfd8b2035c1a701c8e13f2b5d62ce89b311684a601b2eb44e019060200160405180910390a150565b6000546040517f676a553e00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063676a553e90602401602060405180830381865afa15801561051e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105429190610a1d565b1580156105de57506000546040517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063e43581b890602401602060405180830381865afa1580156105b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dc9190610a1d565b155b15610615576040517fb05b9b9f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6040517f7a28fb88000000000000000000000000000000000000000000000000000000008152670de0b6b3a7640000600482015260009073ae7ab96520de3a18e5e111b5eaab095312d7fe8490637a28fb8890602401602060405180830381865afa1580156106cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f39190610a3f565b905090565b60008060008060008773ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561074b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076f9190610a77565b94509450509350935060008313158061079f57508069ffffffffffffffffffff168469ffffffffffffffffffff16115b806107d2575060005474010000000000000000000000000000000000000000900463ffffffff166107d08342610ac7565b115b15610809576040517fae19356300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8260ff88166001036108405761082087600a610c00565b61082a828c610c0c565b6108349190610c23565b95505050505050610856565b8061084c88600a610c00565b61082a908c610c0c565b949350505050565b6020808252825182820181905260009190848201906040850190845b818110156108ac57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010161087a565b50909695505050505050565b6000602082840312156108ca57600080fd5b813563ffffffff811681146108de57600080fd5b9392505050565b6000602082840312156108f757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146108de57600080fd5b600060208083528351808285015260005b818110156109485785810183015185820160400152820161092c565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a1657610a166109b6565b5060010190565b600060208284031215610a2f57600080fd5b815180151581146108de57600080fd5b600060208284031215610a5157600080fd5b5051919050565b805169ffffffffffffffffffff81168114610a7257600080fd5b919050565b600080600080600060a08688031215610a8f57600080fd5b610a9886610a58565b9450602086015193506040860151925060608601519150610abb60808701610a58565b90509295509295909350565b81810381811115610ada57610ada6109b6565b92915050565b600181815b80851115610b3957817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610b1f57610b1f6109b6565b80851615610b2c57918102915b93841c9390800290610ae5565b509250929050565b600082610b5057506001610ada565b81610b5d57506000610ada565b8160018114610b735760028114610b7d57610b99565b6001915050610ada565b60ff841115610b8e57610b8e6109b6565b50506001821b610ada565b5060208310610133831016604e8410600b8410161715610bbc575081810a610ada565b610bc68383610ae0565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610bf857610bf86109b6565b029392505050565b60006108de8383610b41565b8082028115828204841417610ada57610ada6109b6565b600082610c59577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea264697066735822122067bbbaf0132b5bec4bf960795e81a2cf5f39fa9a4a814b4ec92a0d1178afc34e64736f6c63430008110033",
  "devdoc": {
    "author": "Angle Labs, Inc.",
    "kind": "dev",
    "methods": {
      "changeStalePeriod(uint32)": {
        "params": {
          "_stalePeriod": "New stale period (in seconds)"
        }
      },
      "read()": {
        "details": "For instance if the out currency is EUR (and hence agEUR), then the base of the returned value is 10**18",
        "returns": {
          "quoteAmount": "The current rate between the in-currency and out-currency in the base of the out currency"
        }
      },
      "setTreasury(address)": {
        "details": "This function can be called by an approved `VaultManager` contract which can call this function after being requested to do so by a `treasury` contractIn some situations (like reactor contracts), the `VaultManager` may not directly be linked to the `oracle` contract and as such we may need governors to be able to call this function as well",
        "params": {
          "_treasury": "Address of the new treasury contract"
        }
      }
    },
    "title": "OracleWSTETHXAUChainlink",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeStalePeriod(uint32)": {
        "notice": "Changes the stale period"
      },
      "circuitChainlink()": {
        "notice": "Array with the list of Chainlink feeds in the order in which they are read"
      },
      "read()": {
        "notice": "Reads the rate from the Chainlink circuit and other data provided"
      },
      "setTreasury(address)": {
        "notice": "Changes the treasury contract"
      },
      "stalePeriod()": {
        "notice": "Represent the maximum amount of time (in seconds) between each Chainlink update before the price feed is considered stale"
      },
      "treasury()": {
        "notice": "Reference to the `treasury` contract handling this `VaultManager`"
      }
    },
    "notice": "Gives the price of wSTETH in XAU in base 18",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27844,
        "contract": "contracts/oracle/implementations/mainnet/XAU/OracleWSTETHXAUChainlink.sol:OracleWSTETHXAUChainlink",
        "label": "treasury",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ITreasury)19724"
      },
      {
        "astId": 27847,
        "contract": "contracts/oracle/implementations/mainnet/XAU/OracleWSTETHXAUChainlink.sol:OracleWSTETHXAUChainlink",
        "label": "stalePeriod",
        "offset": 20,
        "slot": "0",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_contract(ITreasury)19724": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}