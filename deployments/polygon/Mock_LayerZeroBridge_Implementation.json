{
  "address": "0xb74d948e463e5390a76cD2e63b78E48dA027398b",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEndpoint",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernorOrGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        }
      ],
      "name": "ReceiveFromChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        }
      ],
      "name": "SendToChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canonicalToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_useZro",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "estimateSendFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lzEndpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "isTrustedRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "nonblockingLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "pause",
          "type": "bool"
        }
      ],
      "name": "pauseSendTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "sendWithPermit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdrawFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdf46c01a381188f0e4e6bbd7297194da02861be76433278d29b8064688b424cc",
  "receipt": {
    "to": null,
    "from": "0xEd42E58A303E20523A695CB31ac31df26C50397B",
    "contractAddress": "0xb74d948e463e5390a76cD2e63b78E48dA027398b",
    "transactionIndex": 0,
    "gasUsed": "2701773",
    "logsBloom": "0x
    "blockHash": "0x91ec698148133787e973d870be0580af37624d84ced19cde309fdfcd67015ec9",
    "transactionHash": "0xdf46c01a381188f0e4e6bbd7297194da02861be76433278d29b8064688b424cc",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 30323917,
        "transactionHash": "0xdf46c01a381188f0e4e6bbd7297194da02861be76433278d29b8064688b424cc",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ed42e58a303e20523a695cb31ac31df26c50397b",
          "0x0000000000000000000000002a998cc0bb43dc510e523fe33c8f1c04bf607a1e"
        ],
        "data": "0x000000000000000000000000000000000000000000000000064cf9f122e96e2f00000000000000000000000000000000000000000000000077f297ae1532683b000000000000000000000000000000000000000000002461af2eaad93a382d4100000000000000000000000000000000000000000000000071a59dbcf248fa0c000000000000000000000000000000000000000000002461b57ba4ca5d219b70",
        "logIndex": 0,
        "blockHash": "0x91ec698148133787e973d870be0580af37624d84ced19cde309fdfcd67015ec9"
      }
    ],
    "blockNumber": 30323917,
    "cumulativeGasUsed": "2701773",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a02d50cf6d909256c07dcb36a8119563",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpoint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernorOrGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"ReceiveFromChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"SendToChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canonicalToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useZro\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateSendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"pauseSendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"sendWithPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Core Team, forked from https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/token/oft/OFT.sol\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"estimateSendFee(uint16,bytes,uint256,bool,bytes)\":{\"params\":{\"_adapterParams\":\"flexible bytes array to indicate messaging adapter services in L0\",\"_amount\":\"amount of the tokens to transfer\",\"_dstChainId\":\"L0 defined chain id to send tokens too\",\"_toAddress\":\"dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\",\"_useZro\":\"indicates to use zro to pay L0 fees\"}},\"initialize(address,address)\":{\"params\":{\"_lzEndpoint\":\"Layer zero endpoint to pass messages\",\"_treasury\":\"Address of the treasury contract used for access control\"}},\"lzReceive(uint16,bytes,uint64,bytes)\":{\"params\":{\"_nonce\":\"Nounce of the message\",\"_payload\":\"Data: recipient address and amount\",\"_srcAddress\":\"Sender of the source chain\",\"_srcChainId\":\"ChainId of the source chain - LayerZero standard\"}},\"nonblockingLzReceive(uint16,bytes,uint64,bytes)\":{\"details\":\"public for the needs of try / catch but effectively internal\",\"params\":{\"_nonce\":\"Nounce of the message\",\"_payload\":\"Data: recipient address and amount\",\"_srcAddress\":\"Sender of the source chain\",\"_srcChainId\":\"ChainId of the source chain - LayerZero standard\"}},\"pauseSendTokens(bool)\":{\"params\":{\"pause\":\"Future pause status\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"retryMessage(uint16,bytes,uint64,bytes)\":{\"params\":{\"_nonce\":\"Nounce of the message\",\"_payload\":\"Data: recipient address and amount\",\"_srcAddress\":\"Sender of the source chain\",\"_srcChainId\":\"ChainId of the source chain - LayerZero standard\"}},\"send(uint16,bytes,uint256,address,address,bytes)\":{\"params\":{\"_adapterParams\":\"is a flexible bytes array to indicate messaging adapter services\",\"_amount\":\"the quantity of tokens in wei\",\"_dstChainId\":\"the destination chain identifier\",\"_refundAddress\":\"the address LayerZero refunds if too much message fee is sent\",\"_toAddress\":\"can be any size depending on the `dstChainId`.\",\"_zroPaymentAddress\":\"set to address(0x0) if not paying in ZRO (LayerZero Token)\"}},\"sendWithPermit(uint16,bytes,uint256,address,address,bytes,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `v`, `r`, and `s` parameters are used as signature data\",\"params\":{\"_adapterParams\":\"Flexible bytes array to indicate messaging adapter services\",\"_amount\":\"Quantity of tokens in wei\",\"_dstChainId\":\"The destination chain identifier\",\"_refundAddress\":\"Address LayerZero refunds if too much message fee is sent\",\"_toAddress\":\"Can be any size depending on the `dstChainId`.\",\"_zroPaymentAddress\":\"Set to address(0x0) if not paying in ZRO (LayerZero Token)\",\"deadline\":\"Deadline parameter for the signature to be valid\"}},\"setTrustedRemote(uint16,bytes)\":{\"details\":\"Used for both receiving and sending messageThere can only be one trusted source per chainAllows owner to set it multiple times.\",\"params\":{\"_srcAddress\":\"Address on the source chain\",\"_srcChainId\":\"ChainId of the source chain - LayerZero standard\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"sweep(uint256,address)\":{\"params\":{\"amount\":\"Amount to withdraw from balance\",\"recipient\":\"Address to withdraw from\"}},\"withdraw(uint256,address)\":{\"params\":{\"amount\":\"Amount to withdraw\",\"recipient\":\"Address to send the canonical token to\"},\"returns\":{\"_0\":\"The amount of canonical token sent\"}},\"withdrawFor(uint256,address)\":{\"params\":{\"amount\":\"Amount to withdraw\",\"recipient\":\"Address to withdraw for\"},\"returns\":{\"_0\":\"The amount of canonical token sent\"}}},\"stateVariables\":{\"canonicalToken\":{\"details\":\"Immutable\"}},\"title\":\"LayerZeroBridge\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Maps an address to the amount of token bridged but not received\"},\"canonicalToken()\":{\"notice\":\"Address of the bridgeable token\"},\"estimateSendFee(uint16,bytes,uint256,bool,bytes)\":{\"notice\":\"Estimates send token `_tokenId` to (`_dstChainId`, `_toAddress`)\"},\"failedMessages(uint16,bytes,uint64)\":{\"notice\":\"Maps chainIds to failed messages to retry them\"},\"forceResumeReceive(uint16,bytes)\":{\"notice\":\"Unpauses the receive functionalities\"},\"getConfig(uint16,uint16,address,uint256)\":{\"notice\":\"Fetches the default LZ config\"},\"initialize(address,address)\":{\"notice\":\"Initializes the contract\"},\"isTrustedRemote(uint16,bytes)\":{\"notice\":\"Checks if the `_srcAddress` corresponds to the trusted source\"},\"lzEndpoint()\":{\"notice\":\"Layer Zero endpoint\"},\"lzReceive(uint16,bytes,uint64,bytes)\":{\"notice\":\"Receives a message from the LZ endpoint and process it\"},\"nonblockingLzReceive(uint16,bytes,uint64,bytes)\":{\"notice\":\"Handles message receptions in a non blocking way\"},\"pauseSendTokens(bool)\":{\"notice\":\"Pauses bridging through the contract\"},\"retryMessage(uint16,bytes,uint64,bytes)\":{\"notice\":\"Retries a message that previously failed and was stored\"},\"send(uint16,bytes,uint256,address,address,bytes)\":{\"notice\":\"Sends `_amount` amount of token to (`_dstChainId`, `_toAddress`)\"},\"sendWithPermit(uint16,bytes,uint256,address,address,bytes,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Sends `_amount` amount of token to (`_dstChainId`, `_toAddress`)\"},\"setConfig(uint16,uint16,uint256,bytes)\":{\"notice\":\"Overrides the default LZ config\"},\"setReceiveVersion(uint16)\":{\"notice\":\"Overrides the default LZ config\"},\"setSendVersion(uint16)\":{\"notice\":\"Overrides the default LZ config\"},\"setTrustedRemote(uint16,bytes)\":{\"notice\":\"Sets the corresponding address on an other chain.\"},\"sweep(uint256,address)\":{\"notice\":\"Decreases the balance of an address\"},\"treasury()\":{\"notice\":\"Reference to the treasury contract to fetch access control\"},\"trustedRemoteLookup(uint16)\":{\"notice\":\"Maps chainIds to their OFT address\"},\"withdraw(uint256,address)\":{\"notice\":\"Withdraws amount of canonical token from the `msg.sender` balance and sends it to the recipient\"},\"withdrawFor(uint256,address)\":{\"notice\":\"Withdraws amount of `token` from the contract and sends it to the recipient\"}},\"notice\":\"Contract to be deployed on Ethereum for bridging an AgToken using a bridge intermediate token and LayerZero\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/agToken/layerZero/LayerZeroBridge.sol\":\"LayerZeroBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/agToken/layerZero/LayerZeroBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./utils/OFTCore.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\n/// @title LayerZeroBridge\\n/// @author Angle Core Team, forked from https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/token/oft/OFT.sol\\n/// @notice Contract to be deployed on Ethereum for bridging an AgToken using a bridge intermediate token and LayerZero\\ncontract LayerZeroBridge is OFTCore, PausableUpgradeable {\\n    /// @notice Address of the bridgeable token\\n    /// @dev Immutable\\n    IERC20 public canonicalToken;\\n\\n    /// @notice Maps an address to the amount of token bridged but not received\\n    mapping(address => uint256) public balanceOf;\\n\\n    // ============================= Constructor ===================================\\n\\n    /// @notice Initializes the contract\\n    /// @param _lzEndpoint Layer zero endpoint to pass messages\\n    /// @param _treasury Address of the treasury contract used for access control\\n    function initialize(address _lzEndpoint, address _treasury) external initializer {\\n        __LzAppUpgradeable_init(_lzEndpoint, _treasury);\\n        canonicalToken = IERC20(address(ITreasury(_treasury).stablecoin()));\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    // ==================== External Permissionless Functions ======================\\n\\n    /// @inheritdoc OFTCore\\n    function sendWithPermit(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable override {\\n        IERC20Permit(address(canonicalToken)).permit(msg.sender, address(this), _amount, deadline, v, r, s);\\n        send(_dstChainId, _toAddress, _amount, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    /// @inheritdoc OFTCore\\n    function withdraw(uint256 amount, address recipient) external override returns (uint256) {\\n        return _withdraw(amount, msg.sender, recipient);\\n    }\\n\\n    /// @notice Withdraws amount of `token` from the contract and sends it to the recipient\\n    /// @param amount Amount to withdraw\\n    /// @param recipient Address to withdraw for\\n    /// @return The amount of canonical token sent\\n    function withdrawFor(uint256 amount, address recipient) external returns (uint256) {\\n        return _withdraw(amount, recipient, recipient);\\n    }\\n\\n    // ========================== Internal Functions ===============================\\n\\n    /// @notice Withdraws `amount` from the balance of the `from` address and sends these tokens to the `to` address\\n    /// @dev It's important to make sure that `from` is either the `msg.sender` or that `from` and `to` are the same \\n    /// addresses\\n    function _withdraw(uint256 amount, address from, address to) internal whenNotPaused returns(uint256) {\\n        balanceOf[from] = balanceOf[from] - amount; // Will overflow if the amount is too big\\n        canonicalToken.transfer(to, amount);\\n        return amount;\\n    }\\n\\n    /// @inheritdoc OFTCore\\n    function _debitFrom(\\n        uint16,\\n        bytes memory,\\n        uint256 _amount\\n    ) internal override whenNotPaused returns (uint256) {\\n        // No need to use safeTransferFrom as we know this implementation reverts on failure\\n        canonicalToken.transferFrom(msg.sender, address(this), _amount);\\n        return _amount;\\n    }\\n\\n    /// @inheritdoc OFTCore\\n    function _creditTo(\\n        uint16,\\n        address _toAddress,\\n        uint256 _amount\\n    ) internal override whenNotPaused returns (uint256) {\\n        // Should never revert as all the LayerZero bridge tokens come from\\n        // this contract\\n        uint256 balance = canonicalToken.balanceOf(address(this));\\n        if (balance < _amount) {\\n            balanceOf[_toAddress] = _amount - balance;\\n            if (balance > 0) canonicalToken.transfer(_toAddress, balance);\\n        } else {\\n            canonicalToken.transfer(_toAddress, _amount);\\n        }\\n        return _amount;\\n    }\\n\\n    // ========================= View Functions ====================================\\n\\n    /// @inheritdoc ERC165Upgradeable\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IOFTCore).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    // ======================= Governance Functions ================================\\n\\n    /// @notice Pauses bridging through the contract\\n    /// @param pause Future pause status\\n    function pauseSendTokens(bool pause) external onlyGovernorOrGuardian {\\n        pause ? _pause() : _unpause();\\n    }\\n\\n    /// @notice Decreases the balance of an address\\n    /// @param amount Amount to withdraw from balance\\n    /// @param recipient Address to withdraw from\\n    function sweep(uint256 amount, address recipient) external onlyGovernorOrGuardian {\\n        balanceOf[recipient] = balanceOf[recipient] - amount; // Will overflow if the amount is too big\\n    }\\n\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x5e20d317df35f5a102575340946b4b6101e5f7744cb59b692e7e151abe5efeef\",\"license\":\"MIT\"},\"contracts/agToken/layerZero/utils/IOFTCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n * @dev Forked from https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/token/oft/IOFTCore.sol\\n */\\ninterface IOFTCore is IERC165 {\\n    /// @notice Estimates send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n    /// @param _dstChainId L0 defined chain id to send tokens too\\n    /// @param _toAddress dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n    /// @param _amount amount of the tokens to transfer\\n    /// @param _useZro indicates to use zro to pay L0 fees\\n    /// @param _adapterParams flexible bytes array to indicate messaging adapter services in L0\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint256 _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\n\\n    /// @notice Sends `_amount` amount of token to (`_dstChainId`, `_toAddress`)\\n    /// @param _dstChainId the destination chain identifier\\n    /// @param _toAddress can be any size depending on the `dstChainId`.\\n    /// @param _amount the quantity of tokens in wei\\n    /// @param _refundAddress the address LayerZero refunds if too much message fee is sent\\n    /// @param _zroPaymentAddress set to address(0x0) if not paying in ZRO (LayerZero Token)\\n    /// @param _adapterParams is a flexible bytes array to indicate messaging adapter services\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    /// @notice Sends `_amount` amount of token to (`_dstChainId`, `_toAddress`)\\n    /// @param _dstChainId The destination chain identifier\\n    /// @param _toAddress Can be any size depending on the `dstChainId`.\\n    /// @param _amount Quantity of tokens in wei\\n    /// @param _refundAddress Address LayerZero refunds if too much message fee is sent\\n    /// @param _zroPaymentAddress Set to address(0x0) if not paying in ZRO (LayerZero Token)\\n    /// @param _adapterParams Flexible bytes array to indicate messaging adapter services\\n    /// @param deadline Deadline parameter for the signature to be valid\\n    /// @dev The `v`, `r`, and `s` parameters are used as signature data\\n    function sendWithPermit(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Withdraws amount of canonical token from the `msg.sender` balance and sends it to the recipient\\n    /// @param amount Amount to withdraw\\n    /// @param recipient Address to send the canonical token to\\n    /// @return The amount of canonical token sent\\n    function withdraw(uint256 amount, address recipient) external returns (uint256);\\n\\n    /// @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n    /// `_nonce` is the outbound nonce\\n    event SendToChain(\\n        address indexed _sender,\\n        uint16 indexed _dstChainId,\\n        bytes indexed _toAddress,\\n        uint256 _amount,\\n        uint64 _nonce\\n    );\\n\\n    /// @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n    /// `_nonce` is the inbound nonce.\\n    event ReceiveFromChain(\\n        uint16 indexed _srcChainId,\\n        bytes indexed _srcAddress,\\n        address indexed _toAddress,\\n        uint256 _amount,\\n        uint64 _nonce\\n    );\\n}\\n\\n/// @dev Interface of the OFT standard\\ninterface IOFT is IOFTCore, IERC20 {\\n\\n}\\n\",\"keccak256\":\"0xc842220b3a6db2e560e350d98ccb482a325ec1cbc3acfc6ff24604b1c1c89021\",\"license\":\"MIT\"},\"contracts/agToken/layerZero/utils/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../../interfaces/external/layerZero/ILayerZeroReceiver.sol\\\";\\nimport \\\"../../../interfaces/external/layerZero/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"../../../interfaces/external/layerZero/ILayerZeroEndpoint.sol\\\";\\nimport \\\"../../../interfaces/ITreasury.sol\\\";\\n\\n/// @title NonblockingLzApp\\n/// @author Angle Core Team, forked from https://github.com/LayerZero-Labs/solidity-examples/\\n/// @notice Base contract for bridging using LayerZero\\nabstract contract NonblockingLzApp is Initializable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    /// @notice Layer Zero endpoint\\n    ILayerZeroEndpoint public lzEndpoint;\\n\\n    /// @notice Maps chainIds to failed messages to retry them\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    /// @notice Maps chainIds to their OFT address\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n\\n    /// @notice Reference to the treasury contract to fetch access control\\n    address public treasury;\\n\\n    // ================================== Events ===================================\\n\\n    event SetTrustedRemote(uint16 _srcChainId, bytes _srcAddress);\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload);\\n\\n    // =============================== Errors ================================\\n\\n    error NotGovernor();\\n    error NotGovernorOrGuardian();\\n    error InvalidEndpoint();\\n    error InvalidSource();\\n    error InvalidCaller();\\n    error InvalidPayload();\\n    error ZeroAddress();\\n\\n    // ============================= Constructor ===================================\\n\\n    //solhint-disable-next-line\\n    function __LzAppUpgradeable_init(address _endpoint, address _treasury) internal {\\n        if (_endpoint == address(0) || _treasury == address(0)) revert ZeroAddress();\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n        treasury = _treasury;\\n    }\\n\\n    // =============================== Modifiers ===================================\\n\\n    /// @notice Checks whether the `msg.sender` has the governor role or the guardian role\\n    modifier onlyGovernorOrGuardian() {\\n        if (!ITreasury(treasury).isGovernorOrGuardian(msg.sender)) revert NotGovernorOrGuardian();\\n        _;\\n    }\\n\\n    // ==================== External Permissionless Functions ======================\\n\\n    /// @notice Receives a message from the LZ endpoint and process it\\n    /// @param _srcChainId ChainId of the source chain - LayerZero standard\\n    /// @param _srcAddress Sender of the source chain\\n    /// @param _nonce Nounce of the message\\n    /// @param _payload Data: recipient address and amount\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        if (msg.sender != address(lzEndpoint)) revert InvalidEndpoint();\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        if (_srcAddress.length != trustedRemote.length || keccak256(_srcAddress) != keccak256(trustedRemote))\\n            revert InvalidSource();\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    /// @notice Retries a message that previously failed and was stored\\n    /// @param _srcChainId ChainId of the source chain - LayerZero standard\\n    /// @param _srcAddress Sender of the source chain\\n    /// @param _nonce Nounce of the message\\n    /// @param _payload Data: recipient address and amount\\n    function retryMessage(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        if (payloadHash == bytes32(0) || keccak256(_payload) != payloadHash) revert InvalidPayload();\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // ============================= Internal Functions ===================================\\n\\n    /// @notice Handles message receptions in a non blocking way\\n    /// @param _srcChainId ChainId of the source chain - LayerZero standard\\n    /// @param _srcAddress Sender of the source chain\\n    /// @param _nonce Nounce of the message\\n    /// @param _payload Data: recipient address and amount\\n    /// @dev public for the needs of try / catch but effectively internal\\n    function nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) public virtual {\\n        // only internal transaction\\n        if (msg.sender != address(this)) revert InvalidCaller();\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    /// @notice Handles message receptions in a non blocking way\\n    /// @param _srcChainId ChainId of the source chain - LayerZero standard\\n    /// @param _srcAddress Sender of the source chain\\n    /// @param _nonce Nounce of the message\\n    /// @param _payload Data: recipient address and amount\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    /// @notice Handles message receptions in a blocking way\\n    /// @param _srcChainId ChainId of the source chain - LayerZero standard\\n    /// @param _srcAddress Sender of the source chain\\n    /// @param _nonce Nounce of the message\\n    /// @param _payload Data: recipient address and amount\\n    function _blockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal {\\n        // try-catch all errors/exceptions\\n        try this.nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload) {\\n            // do nothing\\n        } catch {\\n            // error / exception\\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\\n        }\\n    }\\n\\n    /// @notice Sends a message to the LZ endpoint and process it\\n    /// @param _dstChainId L0 defined chain id to send tokens too\\n    /// @param _payload Data: recipient address and amount\\n    /// @param _refundAddress Address LayerZero refunds if too much message fee is sent\\n    /// @param _zroPaymentAddress Set to address(0x0) if not paying in ZRO (LayerZero Token)\\n    /// @param _adapterParams Flexible bytes array to indicate messaging adapter services in L0\\n    function _lzSend(\\n        uint16 _dstChainId,\\n        bytes memory _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams\\n    ) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        if (trustedRemote.length == 0) revert InvalidSource();\\n        //solhint-disable-next-line\\n        lzEndpoint.send{ value: msg.value }(\\n            _dstChainId,\\n            trustedRemote,\\n            _payload,\\n            _refundAddress,\\n            _zroPaymentAddress,\\n            _adapterParams\\n        );\\n    }\\n\\n    // ======================= Governance Functions ================================\\n\\n    /// @notice Sets the corresponding address on an other chain.\\n    /// @param _srcChainId ChainId of the source chain - LayerZero standard\\n    /// @param _srcAddress Address on the source chain\\n    /// @dev Used for both receiving and sending message\\n    /// @dev There can only be one trusted source per chain\\n    /// @dev Allows owner to set it multiple times.\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external onlyGovernorOrGuardian {\\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\\n    }\\n\\n    /// @notice Fetches the default LZ config\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address,\\n        uint256 _configType\\n    ) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    /// @notice Overrides the default LZ config\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint256 _configType,\\n        bytes calldata _config\\n    ) external override onlyGovernorOrGuardian {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    /// @notice Overrides the default LZ config\\n    function setSendVersion(uint16 _version) external override onlyGovernorOrGuardian {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    /// @notice Overrides the default LZ config\\n    function setReceiveVersion(uint16 _version) external override onlyGovernorOrGuardian {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    /// @notice Unpauses the receive functionalities\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress)\\n        external\\n        override\\n        onlyGovernorOrGuardian\\n    {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // ======================= View Functions ================================\\n\\n    /// @notice Checks if the `_srcAddress` corresponds to the trusted source\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0xe13a9a80746518afaad6414b85282ebf970fc3103eebb9b5c9193099b51ab620\",\"license\":\"MIT\"},\"contracts/agToken/layerZero/utils/OFTCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./NonblockingLzApp.sol\\\";\\nimport \\\"./IOFTCore.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\n\\n/// @title OFTCore\\n/// @author Forked from https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/token/oft/OFTCore.sol\\n/// but with slight modifications from the Angle Core Team which added return values to the `_creditTo` and `_debitFrom` functions\\n/// @notice Base contract for bridging using LayerZero\\nabstract contract OFTCore is NonblockingLzApp, ERC165Upgradeable, IOFTCore {\\n    // ==================== External Permissionless Functions ======================\\n\\n    /// @inheritdoc IOFTCore\\n    function sendWithPermit(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable virtual;\\n\\n    /// @inheritdoc IOFTCore\\n    function send(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams\\n    ) public payable virtual {\\n        _amount = _debitFrom(_dstChainId, _toAddress, _amount);\\n\\n        bytes memory payload = abi.encode(_toAddress, _amount);\\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n\\n        uint64 nonce = lzEndpoint.getOutboundNonce(_dstChainId, address(this));\\n        emit SendToChain(msg.sender, _dstChainId, _toAddress, _amount, nonce);\\n    }\\n\\n    /// @inheritdoc IOFTCore\\n    function withdraw(uint256 amount, address recipient) external virtual returns (uint256);\\n\\n    // =========================== Internal Functions ==============================\\n\\n    /// @inheritdoc NonblockingLzApp\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual override {\\n        // decode and load the toAddress\\n        (bytes memory toAddressBytes, uint256 amount) = abi.decode(_payload, (bytes, uint256));\\n        address toAddress;\\n        //solhint-disable-next-line\\n        assembly {\\n            toAddress := mload(add(toAddressBytes, 20))\\n        }\\n        amount = _creditTo(_srcChainId, toAddress, amount);\\n\\n        emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, amount, _nonce);\\n    }\\n\\n    /// @notice Makes accountability when bridging from this contract\\n    /// @param _dstChainId ChainId of the destination chain - LayerZero standard\\n    /// @param _toAddress Recipient on the destination chain\\n    /// @param _amount Amount to bridge\\n    function _debitFrom(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount\\n    ) internal virtual returns (uint256);\\n\\n    /// @notice Makes accountability when bridging to this contract\\n    /// @param _srcChainId ChainId of the source chain - LayerZero standard\\n    /// @param _toAddress Recipient on this chain\\n    /// @param _amount Amount to bridge\\n    function _creditTo(\\n        uint16 _srcChainId,\\n        address _toAddress,\\n        uint256 _amount\\n    ) internal virtual returns (uint256);\\n\\n    // ========================== View Functions ===================================\\n\\n    /// @inheritdoc ERC165Upgradeable\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Upgradeable, IERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOFTCore).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @inheritdoc IOFTCore\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount,\\n        bool _useZro,\\n        bytes memory _adapterParams\\n    ) public view virtual override returns (uint256 nativeFee, uint256 zroFee) {\\n        // mock the payload for send()\\n        bytes memory payload = abi.encode(_toAddress, _amount);\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x66b720ba9878e99c606ed540a60562237117db479f3db01ac70b9b19075d35a5\",\"license\":\"MIT\"},\"contracts/interfaces/IAgToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title IAgToken\\n/// @author Angle Core Team\\n/// @notice Interface for the stablecoins `AgToken` contracts\\n/// @dev This interface only contains functions of the `AgToken` contract which are called by other contracts\\n/// of this module or of the first module of the Angle Protocol\\ninterface IAgToken is IERC20Upgradeable {\\n    // ======================= Minter Role Only Functions ===========================\\n\\n    /// @notice Lets the `StableMaster` contract or another whitelisted contract mint agTokens\\n    /// @param account Address to mint to\\n    /// @param amount Amount to mint\\n    /// @dev The contracts allowed to issue agTokens are the `StableMaster` contract, `VaultManager` contracts\\n    /// associated to this stablecoin as well as the flash loan module (if activated) and potentially contracts\\n    /// whitelisted by governance\\n    function mint(address account, uint256 amount) external;\\n\\n    /// @notice Burns `amount` tokens from a `burner` address after being asked to by `sender`\\n    /// @param amount Amount of tokens to burn\\n    /// @param burner Address to burn from\\n    /// @param sender Address which requested the burn from `burner`\\n    /// @dev This method is to be called by a contract with the minter right after being requested\\n    /// to do so by a `sender` address willing to burn tokens from another `burner` address\\n    /// @dev The method checks the allowance between the `sender` and the `burner`\\n    function burnFrom(\\n        uint256 amount,\\n        address burner,\\n        address sender\\n    ) external;\\n\\n    /// @notice Burns `amount` tokens from a `burner` address\\n    /// @param amount Amount of tokens to burn\\n    /// @param burner Address to burn from\\n    /// @dev This method is to be called by a contract with a minter right on the AgToken after being\\n    /// requested to do so by an address willing to burn tokens from its address\\n    function burnSelf(uint256 amount, address burner) external;\\n\\n    // ========================= Treasury Only Functions ===========================\\n\\n    /// @notice Adds a minter in the contract\\n    /// @param minter Minter address to add\\n    /// @dev Zero address checks are performed directly in the `Treasury` contract\\n    function addMinter(address minter) external;\\n\\n    /// @notice Removes a minter from the contract\\n    /// @param minter Minter address to remove\\n    /// @dev This function can also be called by a minter wishing to revoke itself\\n    function removeMinter(address minter) external;\\n\\n    /// @notice Sets a new treasury contract\\n    /// @param _treasury New treasury address\\n    function setTreasury(address _treasury) external;\\n\\n    // ========================= External functions ================================\\n\\n    /// @notice Checks whether an address has the right to mint agTokens\\n    /// @param minter Address for which the minting right should be checked\\n    /// @return Whether the address has the right to mint agTokens or not\\n    function isMinter(address minter) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcd50d86128e457543483981ea6127cb8dac03584b919614352aa89d7e991405c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICoreBorrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\n/// @title ICoreBorrow\\n/// @author Angle Core Team\\n/// @notice Interface for the `CoreBorrow` contract\\n/// @dev This interface only contains functions of the `CoreBorrow` contract which are called by other contracts\\n/// of this module\\ninterface ICoreBorrow {\\n    /// @notice Checks if an address corresponds to a treasury of a stablecoin with a flash loan\\n    /// module initialized on it\\n    /// @param treasury Address to check\\n    /// @return Whether the address has the `FLASHLOANER_TREASURY_ROLE` or not\\n    function isFlashLoanerTreasury(address treasury) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GOVERNOR_ROLE` or not\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor or a guardian of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GUARDIAN_ROLE` or not\\n    /// @dev Governance should make sure when adding a governor to also give this governor the guardian\\n    /// role by calling the `addGovernor` function\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x25b65b3f506ca91745a444502a36f0556585d82d9d60f4bd32fbcaabc12840d4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFlashAngle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IAgToken.sol\\\";\\nimport \\\"./ICoreBorrow.sol\\\";\\n\\n/// @title IFlashAngle\\n/// @author Angle Core Team\\n/// @notice Interface for the `FlashAngle` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module\\ninterface IFlashAngle {\\n    /// @notice Reference to the `CoreBorrow` contract managing the FlashLoan module\\n    function core() external view returns (ICoreBorrow);\\n\\n    /// @notice Sends the fees taken from flash loans to the treasury contract associated to the stablecoin\\n    /// @param stablecoin Stablecoin from which profits should be sent\\n    /// @return balance Amount of profits sent\\n    /// @dev This function can only be called by the treasury contract\\n    function accrueInterestToTreasury(IAgToken stablecoin) external returns (uint256 balance);\\n\\n    /// @notice Adds support for a stablecoin\\n    /// @param _treasury Treasury associated to the stablecoin to add support for\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function addStablecoinSupport(address _treasury) external;\\n\\n    /// @notice Removes support for a stablecoin\\n    /// @param _treasury Treasury associated to the stablecoin to remove support for\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function removeStablecoinSupport(address _treasury) external;\\n\\n    /// @notice Sets a new core contract\\n    /// @param _core Core contract address to set\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function setCore(address _core) external;\\n}\\n\",\"keccak256\":\"0xc17654e512897efe41e3f1173c07dd4676e8c699a72b859d14b473d1e8300e45\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IAgToken.sol\\\";\\nimport \\\"./ICoreBorrow.sol\\\";\\nimport \\\"./IFlashAngle.sol\\\";\\n\\n/// @title ITreasury\\n/// @author Angle Core Team\\n/// @notice Interface for the `Treasury` contract\\n/// @dev This interface only contains functions of the `Treasury` which are called by other contracts\\n/// of this module\\ninterface ITreasury {\\n    /// @notice Stablecoin handled by this `treasury` contract\\n    function stablecoin() external view returns (IAgToken);\\n\\n    /// @notice Checks whether a given address has the  governor role\\n    /// @param admin Address to check\\n    /// @return Whether the address has the governor role\\n    /// @dev Access control is only kept in the `CoreBorrow` contract\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether a given address has the guardian or the governor role\\n    /// @param admin Address to check\\n    /// @return Whether the address has the guardian or the governor role\\n    /// @dev Access control is only kept in the `CoreBorrow` contract which means that this function\\n    /// queries the `CoreBorrow` contract\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether a given address has well been initialized in this contract\\n    /// as a `VaultManager``\\n    /// @param _vaultManager Address to check\\n    /// @return Whether the address has been initialized or not\\n    function isVaultManager(address _vaultManager) external view returns (bool);\\n\\n    /// @notice Sets a new flash loan module for this stablecoin\\n    /// @param _flashLoanModule Reference to the new flash loan module\\n    /// @dev This function removes the minting right to the old flash loan module and grants\\n    /// it to the new module\\n    function setFlashLoanModule(address _flashLoanModule) external;\\n}\\n\",\"keccak256\":\"0xced9b7256fcbedc75682037e11ce51fe9116e5604794b8545e00dea0607629cc\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/layerZero/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint256 _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint256 _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x9db927cd0092069df6a94a18c70f9eb915223ce703e3f1acf37b74f33336c90d\",\"license\":\"MIT\"},\"contracts/interfaces/external/layerZero/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0xac1966c1229bd4dc36b6c69eeb94a537bd9aa2198d7623b9ba7f8f7dbe79bb4c\",\"license\":\"MIT\"},\"contracts/interfaces/external/layerZero/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint256 _configType,\\n        bytes calldata _config\\n    ) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0x3593d932a05620902af8c87a3e18b05a28b11a5f8ec1e7b1967fa401fbd562ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b6200182b1760201c565b15905090565b3b151590565b612fc880620001126000396000f3fe60806040526004361061019f5760003560e01c806366ad5c8a116100e1578063cbf9b84b1161008a578063eb8d72b711610064578063eb8d72b714610517578063eed33cef14610537578063f18789221461054a578063f5ecbdbc1461056a57600080fd5b8063cbf9b84b146104b7578063ceb76b55146104d7578063d1deba1f1461050457600080fd5b806385edd8ae116100bb57806385edd8ae14610451578063b353aaa714610464578063cbed8b9c1461049757600080fd5b806366ad5c8a146103d757806370a08231146103f75780637533d7881461042457600080fd5b80633576f6cc1161014e578063485cc95511610128578063485cc955146102fe5780635b8c41e61461031e5780635c975abb1461036d57806361d027b31461038557600080fd5b80633576f6cc1461029e5780633d8b38f6146102be57806342d65a8d146102de57600080fd5b806307e0db171161017f57806307e0db171461022957806310ddb137146102495780632a205e3d1461026957600080fd5b80621d3567146101a4578062f714ce146101c657806301ffc9a7146101f9575b600080fd5b3480156101b057600080fd5b506101c46101bf36600461258e565b61058a565b005b3480156101d257600080fd5b506101e66101e1366004612644565b6106e8565b6040519081526020015b60405180910390f35b34801561020557600080fd5b50610219610214366004612674565b6106fc565b60405190151581526020016101f0565b34801561023557600080fd5b506101c46102443660046126b6565b610758565b34801561025557600080fd5b506101c46102643660046126b6565b6108a9565b34801561027557600080fd5b506102896102843660046126df565b6109d0565b604080519283526020830191909152016101f0565b3480156102aa57600080fd5b506101e66102b9366004612644565b610ac8565b3480156102ca57600080fd5b506102196102d93660046127bb565b610ad5565b3480156102ea57600080fd5b506101c46102f93660046127bb565b610ba1565b34801561030a57600080fd5b506101c461031936600461280e565b610cff565b34801561032a57600080fd5b506101e661033936600461283c565b6001602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561037957600080fd5b5060c85460ff16610219565b34801561039157600080fd5b506003546103b29073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f0565b3480156103e357600080fd5b506101c46103f236600461258e565b610ee0565b34801561040357600080fd5b506101e661041236600461289e565b60fb6020526000908152604090205481565b34801561043057600080fd5b5061044461043f3660046126b6565b610f2b565b6040516101f09190612931565b6101c461045f366004612955565b610fc5565b34801561047057600080fd5b506000546103b29062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b3480156104a357600080fd5b506101c46104b2366004612a24565b61108d565b3480156104c357600080fd5b506101c46104d2366004612644565b6111f1565b3480156104e357600080fd5b5060fa546103b29073ffffffffffffffffffffffffffffffffffffffff1681565b6101c461051236600461258e565b611314565b34801561052357600080fd5b506101c46105323660046127bb565b6113fa565b6101c4610545366004612a93565b611521565b34801561055657600080fd5b506101c4610565366004612b39565b61166e565b34801561057657600080fd5b50610444610585366004612b56565b61174e565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff1633146105e1576040517ff1cbb56700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff8416600090815260026020526040812080546105ff90612ba3565b80601f016020809104026020016040519081016040528092919081815260200182805461062b90612ba3565b80156106785780601f1061064d57610100808354040283529160200191610678565b820191906000526020600020905b81548152906001019060200180831161065b57829003601f168201915b505050505090508051845114158061069e57508080519060200120848051906020012014155b156106d5576040517f8154374b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106e185858585611831565b5050505050565b60006106f583338461193c565b9392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41e9aeb2000000000000000000000000000000000000000000000000000000001480610752575061075282611a9d565b92915050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa1580156107c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ea9190612bf7565b610820576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517f07e0db1700000000000000000000000000000000000000000000000000000000815261ffff831660048201526201000090910473ffffffffffffffffffffffffffffffffffffffff16906307e0db17906024015b600060405180830381600087803b15801561089557600080fd5b505af11580156106e1573d6000803e3d6000fd5b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015610917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093b9190612bf7565b610971576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517f10ddb13700000000000000000000000000000000000000000000000000000000815261ffff831660048201526201000090910473ffffffffffffffffffffffffffffffffffffffff16906310ddb1379060240161087b565b600080600086866040516020016109e8929190612c14565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152908290526000547f40a7bb1000000000000000000000000000000000000000000000000000000000835290925062010000900473ffffffffffffffffffffffffffffffffffffffff16906340a7bb1090610a79908b90309086908b908b90600401612c36565b6040805180830381865afa158015610a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab99190612c95565b92509250509550959350505050565b60006106f583838461193c565b61ffff831660009081526002602052604081208054829190610af690612ba3565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2290612ba3565b8015610b6f5780601f10610b4457610100808354040283529160200191610b6f565b820191906000526020600020905b815481529060010190602001808311610b5257829003601f168201915b505050505090508383604051610b86929190612cb9565b60405180910390208180519060200120149150509392505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015610c0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c339190612bf7565b610c69576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517f42d65a8d0000000000000000000000000000000000000000000000000000000081526201000090910473ffffffffffffffffffffffffffffffffffffffff16906342d65a8d90610cc890869086908690600401612d12565b600060405180830381600087803b158015610ce257600080fd5b505af1158015610cf6573d6000803e3d6000fd5b50505050505050565b600054610100900460ff16610d1a5760005460ff1615610d1e565b303b155b610daf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff16158015610dee57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b610df88383611b34565b8173ffffffffffffffffffffffffffffffffffffffff1663e9cbd8226040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e679190612d30565b60fa80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790558015610edb57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050565b333014610f19576040517f48f5c3ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f2584848484611c17565b50505050565b60026020526000908152604090208054610f4490612ba3565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7090612ba3565b8015610fbd5780601f10610f9257610100808354040283529160200191610fbd565b820191906000526020600020905b815481529060010190602001808311610fa057829003601f168201915b505050505081565b60fa546040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018a90526064810186905260ff8516608482015260a4810184905260c4810183905273ffffffffffffffffffffffffffffffffffffffff9091169063d505accf9060e401600060405180830381600087803b15801561105b57600080fd5b505af115801561106f573d6000803e3d6000fd5b505050506110818a8a8a8a8a8a611521565b50505050505050505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa1580156110fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111f9190612bf7565b611155576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517fcbed8b9c0000000000000000000000000000000000000000000000000000000081526201000090910473ffffffffffffffffffffffffffffffffffffffff169063cbed8b9c906111b89088908890889088908890600401612d4d565b600060405180830381600087803b1580156111d257600080fd5b505af11580156111e6573d6000803e3d6000fd5b505050505050505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa15801561125f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112839190612bf7565b6112b9576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260fb60205260409020546112ea908390612d86565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260fb602052604090205550565b61ffff84166000908152600160205260408082209051611335908690612dc4565b908152604080516020928190038301902067ffffffffffffffff86166000908152925290205490508015806113705750815160208301208114155b156113a7576040517f7c6953f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff851660009081526001602052604080822090516113c8908790612dc4565b908152604080516020928190038301902067ffffffffffffffff8716600090815292529020556106e185858585611c17565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015611468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148c9190612bf7565b6114c2576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff831660009081526002602052604090206114e0908383612390565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab83838360405161151493929190612d12565b60405180910390a1505050565b61152c868686611cc2565b935060008585604051602001611543929190612c14565b60405160208183030381529060405290506115618782868686611de1565b600080546040517f7a14574800000000000000000000000000000000000000000000000000000000815261ffff8a1660048201523060248201526201000090910473ffffffffffffffffffffffffffffffffffffffff1690637a14574890604401602060405180830381865afa1580156115df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116039190612de0565b9050866040516116139190612dc4565b6040805191829003822088835267ffffffffffffffff841660208401529161ffff8b169133917f024797cc77ce15dc717112d54fb1df125fdfd8c81344fb046c5e074427ce1543910160405180910390a45050505050505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa1580156116dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117009190612bf7565b611736576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061174657611743611f5c565b50565b61174361203d565b6000546040517ff5ecbdbc00000000000000000000000000000000000000000000000000000000815261ffff8087166004830152851660248201523060448201526064810183905260609162010000900473ffffffffffffffffffffffffffffffffffffffff169063f5ecbdbc90608401600060405180830381865afa1580156117dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526118229190810190612e4a565b95945050505050565b3b151590565b6040517f66ad5c8a00000000000000000000000000000000000000000000000000000000815230906366ad5c8a90611873908790879087908790600401612e7f565b600060405180830381600087803b15801561188d57600080fd5b505af192505050801561189e575060015b610f25578080519060200120600160008661ffff1661ffff168152602001908152602001600020846040516118d39190612dc4565b90815260408051918290036020908101832067ffffffffffffffff87166000908152915220919091557fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d9061192f908690869086908690612e7f565b60405180910390a1610f25565b600061194a60c85460ff1690565b156119b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610da6565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260fb60205260409020546119e2908590612d86565b73ffffffffffffffffffffffffffffffffffffffff848116600090815260fb6020526040908190209290925560fa5491517fa9059cbb00000000000000000000000000000000000000000000000000000000815284821660048201526024810187905291169063a9059cbb906044016020604051808303816000875af1158015611a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a949190612bf7565b50929392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41e9aeb200000000000000000000000000000000000000000000000000000000148061075257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610752565b73ffffffffffffffffffffffffffffffffffffffff82161580611b6b575073ffffffffffffffffffffffffffffffffffffffff8116155b15611ba2576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff94851602179055600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909216179055565b60008082806020019051810190611c2e9190612ebe565b60148201519193509150611c438782846120fd565b91508073ffffffffffffffffffffffffffffffffffffffff1686604051611c6a9190612dc4565b6040805191829003822085835267ffffffffffffffff891660208401529161ffff8b16917f64e10c37f404d128982dce114f5d233c14c5c7f6d8db93099e3d99dacb9e27ba910160405180910390a450505050505050565b6000611cd060c85460ff1690565b15611d37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610da6565b60fa546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810184905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af1158015611db4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd89190612bf7565b50909392505050565b61ffff851660009081526002602052604081208054611dff90612ba3565b80601f0160208091040260200160405190810160405280929190818152602001828054611e2b90612ba3565b8015611e785780601f10611e4d57610100808354040283529160200191611e78565b820191906000526020600020905b815481529060010190602001808311611e5b57829003601f168201915b50505050509050805160001415611ebb576040517f8154374b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517fc58031000000000000000000000000000000000000000000000000000000000081526201000090910473ffffffffffffffffffffffffffffffffffffffff169063c5803100903490611f22908a9086908b908b908b908b90600401612f05565b6000604051808303818588803b158015611f3b57600080fd5b505af1158015611f4f573d6000803e3d6000fd5b5050505050505050505050565b60c85460ff16611fc8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610da6565b60c880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60c85460ff16156120aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610da6565b60c880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120133390565b600061210b60c85460ff1690565b15612172576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610da6565b60fa546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156121e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122059190612f79565b9050828110156122e9576122198184612d86565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260fb602052604090205580156122e45760fa546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af11580156122be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e29190612bf7565b505b611dd8565b60fa546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690529091169063a9059cbb906044016020604051808303816000875af1158015612362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123869190612bf7565b5050909392505050565b82805461239c90612ba3565b90600052602060002090601f0160209004810192826123be5760008555612422565b82601f106123f5578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555612422565b82800160010185558215612422579182015b82811115612422578235825591602001919060010190612407565b5061242e929150612432565b5090565b5b8082111561242e5760008155600101612433565b803561ffff8116811461245957600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156124d4576124d461245e565b604052919050565b600067ffffffffffffffff8211156124f6576124f661245e565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261253357600080fd5b8135612546612541826124dc565b61248d565b81815284602083860101111561255b57600080fd5b816020850160208301376000918101602001919091529392505050565b67ffffffffffffffff8116811461174357600080fd5b600080600080608085870312156125a457600080fd5b6125ad85612447565b9350602085013567ffffffffffffffff808211156125ca57600080fd5b6125d688838901612522565b9450604087013591506125e882612578565b909250606086013590808211156125fe57600080fd5b5061260b87828801612522565b91505092959194509250565b73ffffffffffffffffffffffffffffffffffffffff8116811461174357600080fd5b803561245981612617565b6000806040838503121561265757600080fd5b82359150602083013561266981612617565b809150509250929050565b60006020828403121561268657600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146106f557600080fd5b6000602082840312156126c857600080fd5b6106f582612447565b801515811461174357600080fd5b600080600080600060a086880312156126f757600080fd5b61270086612447565b9450602086013567ffffffffffffffff8082111561271d57600080fd5b61272989838a01612522565b95506040880135945060608801359150612742826126d1565b9092506080870135908082111561275857600080fd5b5061276588828901612522565b9150509295509295909350565b60008083601f84011261278457600080fd5b50813567ffffffffffffffff81111561279c57600080fd5b6020830191508360208285010111156127b457600080fd5b9250929050565b6000806000604084860312156127d057600080fd5b6127d984612447565b9250602084013567ffffffffffffffff8111156127f557600080fd5b61280186828701612772565b9497909650939450505050565b6000806040838503121561282157600080fd5b823561282c81612617565b9150602083013561266981612617565b60008060006060848603121561285157600080fd5b61285a84612447565b9250602084013567ffffffffffffffff81111561287657600080fd5b61288286828701612522565b925050604084013561289381612578565b809150509250925092565b6000602082840312156128b057600080fd5b81356106f581612617565b60005b838110156128d65781810151838201526020016128be565b83811115610f255750506000910152565b600081518084526128ff8160208601602086016128bb565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006106f560208301846128e7565b803560ff8116811461245957600080fd5b6000806000806000806000806000806101408b8d03121561297557600080fd5b61297e8b612447565b995060208b013567ffffffffffffffff8082111561299b57600080fd5b6129a78e838f01612522565b9a5060408d013599506129bc60608e01612639565b98506129ca60808e01612639565b975060a08d01359150808211156129e057600080fd5b506129ed8d828e01612522565b95505060c08b01359350612a0360e08c01612944565b92506101008b013591506101208b013590509295989b9194979a5092959850565b600080600080600060808688031215612a3c57600080fd5b612a4586612447565b9450612a5360208701612447565b935060408601359250606086013567ffffffffffffffff811115612a7657600080fd5b612a8288828901612772565b969995985093965092949392505050565b60008060008060008060c08789031215612aac57600080fd5b612ab587612447565b9550602087013567ffffffffffffffff80821115612ad257600080fd5b612ade8a838b01612522565b96506040890135955060608901359150612af782612617565b909350608088013590612b0982612617565b90925060a08801359080821115612b1f57600080fd5b50612b2c89828a01612522565b9150509295509295509295565b600060208284031215612b4b57600080fd5b81356106f5816126d1565b60008060008060808587031215612b6c57600080fd5b612b7585612447565b9350612b8360208601612447565b92506040850135612b9381612617565b9396929550929360600135925050565b600181811c90821680612bb757607f821691505b60208210811415612bf1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060208284031215612c0957600080fd5b81516106f5816126d1565b604081526000612c2760408301856128e7565b90508260208301529392505050565b61ffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015260a060408201526000612c6f60a08301866128e7565b84151560608401528281036080840152612c8981856128e7565b98975050505050505050565b60008060408385031215612ca857600080fd5b505080516020909101519092909150565b8183823760009101908152919050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b61ffff84168152604060208201526000611822604083018486612cc9565b600060208284031215612d4257600080fd5b81516106f581612617565b600061ffff808816835280871660208401525084604083015260806060830152612d7b608083018486612cc9565b979650505050505050565b600082821015612dbf577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500390565b60008251612dd68184602087016128bb565b9190910192915050565b600060208284031215612df257600080fd5b81516106f581612578565b600082601f830112612e0e57600080fd5b8151612e1c612541826124dc565b818152846020838601011115612e3157600080fd5b612e428260208301602087016128bb565b949350505050565b600060208284031215612e5c57600080fd5b815167ffffffffffffffff811115612e7357600080fd5b612e4284828501612dfd565b61ffff85168152608060208201526000612e9c60808301866128e7565b67ffffffffffffffff851660408401528281036060840152612d7b81856128e7565b60008060408385031215612ed157600080fd5b825167ffffffffffffffff811115612ee857600080fd5b612ef485828601612dfd565b925050602083015190509250929050565b61ffff8716815260c060208201526000612f2260c08301886128e7565b8281036040840152612f3481886128e7565b73ffffffffffffffffffffffffffffffffffffffff87811660608601528616608085015283810360a08501529050612f6c81856128e7565b9998505050505050505050565b600060208284031215612f8b57600080fd5b505191905056fea264697066735822122053f74afde4f243e8429cdf29e77079055b1c1be72179cd08a7852bac86e0528164736f6c634300080c0033",
  "deployedBytecode": "0x60806040526004361061019f5760003560e01c806366ad5c8a116100e1578063cbf9b84b1161008a578063eb8d72b711610064578063eb8d72b714610517578063eed33cef14610537578063f18789221461054a578063f5ecbdbc1461056a57600080fd5b8063cbf9b84b146104b7578063ceb76b55146104d7578063d1deba1f1461050457600080fd5b806385edd8ae116100bb57806385edd8ae14610451578063b353aaa714610464578063cbed8b9c1461049757600080fd5b806366ad5c8a146103d757806370a08231146103f75780637533d7881461042457600080fd5b80633576f6cc1161014e578063485cc95511610128578063485cc955146102fe5780635b8c41e61461031e5780635c975abb1461036d57806361d027b31461038557600080fd5b80633576f6cc1461029e5780633d8b38f6146102be57806342d65a8d146102de57600080fd5b806307e0db171161017f57806307e0db171461022957806310ddb137146102495780632a205e3d1461026957600080fd5b80621d3567146101a4578062f714ce146101c657806301ffc9a7146101f9575b600080fd5b3480156101b057600080fd5b506101c46101bf36600461258e565b61058a565b005b3480156101d257600080fd5b506101e66101e1366004612644565b6106e8565b6040519081526020015b60405180910390f35b34801561020557600080fd5b50610219610214366004612674565b6106fc565b60405190151581526020016101f0565b34801561023557600080fd5b506101c46102443660046126b6565b610758565b34801561025557600080fd5b506101c46102643660046126b6565b6108a9565b34801561027557600080fd5b506102896102843660046126df565b6109d0565b604080519283526020830191909152016101f0565b3480156102aa57600080fd5b506101e66102b9366004612644565b610ac8565b3480156102ca57600080fd5b506102196102d93660046127bb565b610ad5565b3480156102ea57600080fd5b506101c46102f93660046127bb565b610ba1565b34801561030a57600080fd5b506101c461031936600461280e565b610cff565b34801561032a57600080fd5b506101e661033936600461283c565b6001602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561037957600080fd5b5060c85460ff16610219565b34801561039157600080fd5b506003546103b29073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f0565b3480156103e357600080fd5b506101c46103f236600461258e565b610ee0565b34801561040357600080fd5b506101e661041236600461289e565b60fb6020526000908152604090205481565b34801561043057600080fd5b5061044461043f3660046126b6565b610f2b565b6040516101f09190612931565b6101c461045f366004612955565b610fc5565b34801561047057600080fd5b506000546103b29062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b3480156104a357600080fd5b506101c46104b2366004612a24565b61108d565b3480156104c357600080fd5b506101c46104d2366004612644565b6111f1565b3480156104e357600080fd5b5060fa546103b29073ffffffffffffffffffffffffffffffffffffffff1681565b6101c461051236600461258e565b611314565b34801561052357600080fd5b506101c46105323660046127bb565b6113fa565b6101c4610545366004612a93565b611521565b34801561055657600080fd5b506101c4610565366004612b39565b61166e565b34801561057657600080fd5b50610444610585366004612b56565b61174e565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff1633146105e1576040517ff1cbb56700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff8416600090815260026020526040812080546105ff90612ba3565b80601f016020809104026020016040519081016040528092919081815260200182805461062b90612ba3565b80156106785780601f1061064d57610100808354040283529160200191610678565b820191906000526020600020905b81548152906001019060200180831161065b57829003601f168201915b505050505090508051845114158061069e57508080519060200120848051906020012014155b156106d5576040517f8154374b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106e185858585611831565b5050505050565b60006106f583338461193c565b9392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41e9aeb2000000000000000000000000000000000000000000000000000000001480610752575061075282611a9d565b92915050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa1580156107c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ea9190612bf7565b610820576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517f07e0db1700000000000000000000000000000000000000000000000000000000815261ffff831660048201526201000090910473ffffffffffffffffffffffffffffffffffffffff16906307e0db17906024015b600060405180830381600087803b15801561089557600080fd5b505af11580156106e1573d6000803e3d6000fd5b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015610917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093b9190612bf7565b610971576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517f10ddb13700000000000000000000000000000000000000000000000000000000815261ffff831660048201526201000090910473ffffffffffffffffffffffffffffffffffffffff16906310ddb1379060240161087b565b600080600086866040516020016109e8929190612c14565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152908290526000547f40a7bb1000000000000000000000000000000000000000000000000000000000835290925062010000900473ffffffffffffffffffffffffffffffffffffffff16906340a7bb1090610a79908b90309086908b908b90600401612c36565b6040805180830381865afa158015610a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab99190612c95565b92509250509550959350505050565b60006106f583838461193c565b61ffff831660009081526002602052604081208054829190610af690612ba3565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2290612ba3565b8015610b6f5780601f10610b4457610100808354040283529160200191610b6f565b820191906000526020600020905b815481529060010190602001808311610b5257829003601f168201915b505050505090508383604051610b86929190612cb9565b60405180910390208180519060200120149150509392505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015610c0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c339190612bf7565b610c69576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517f42d65a8d0000000000000000000000000000000000000000000000000000000081526201000090910473ffffffffffffffffffffffffffffffffffffffff16906342d65a8d90610cc890869086908690600401612d12565b600060405180830381600087803b158015610ce257600080fd5b505af1158015610cf6573d6000803e3d6000fd5b50505050505050565b600054610100900460ff16610d1a5760005460ff1615610d1e565b303b155b610daf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff16158015610dee57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b610df88383611b34565b8173ffffffffffffffffffffffffffffffffffffffff1663e9cbd8226040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e679190612d30565b60fa80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790558015610edb57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050565b333014610f19576040517f48f5c3ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f2584848484611c17565b50505050565b60026020526000908152604090208054610f4490612ba3565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7090612ba3565b8015610fbd5780601f10610f9257610100808354040283529160200191610fbd565b820191906000526020600020905b815481529060010190602001808311610fa057829003601f168201915b505050505081565b60fa546040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018a90526064810186905260ff8516608482015260a4810184905260c4810183905273ffffffffffffffffffffffffffffffffffffffff9091169063d505accf9060e401600060405180830381600087803b15801561105b57600080fd5b505af115801561106f573d6000803e3d6000fd5b505050506110818a8a8a8a8a8a611521565b50505050505050505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa1580156110fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111f9190612bf7565b611155576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517fcbed8b9c0000000000000000000000000000000000000000000000000000000081526201000090910473ffffffffffffffffffffffffffffffffffffffff169063cbed8b9c906111b89088908890889088908890600401612d4d565b600060405180830381600087803b1580156111d257600080fd5b505af11580156111e6573d6000803e3d6000fd5b505050505050505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa15801561125f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112839190612bf7565b6112b9576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260fb60205260409020546112ea908390612d86565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260fb602052604090205550565b61ffff84166000908152600160205260408082209051611335908690612dc4565b908152604080516020928190038301902067ffffffffffffffff86166000908152925290205490508015806113705750815160208301208114155b156113a7576040517f7c6953f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff851660009081526001602052604080822090516113c8908790612dc4565b908152604080516020928190038301902067ffffffffffffffff8716600090815292529020556106e185858585611c17565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015611468573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148c9190612bf7565b6114c2576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff831660009081526002602052604090206114e0908383612390565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab83838360405161151493929190612d12565b60405180910390a1505050565b61152c868686611cc2565b935060008585604051602001611543929190612c14565b60405160208183030381529060405290506115618782868686611de1565b600080546040517f7a14574800000000000000000000000000000000000000000000000000000000815261ffff8a1660048201523060248201526201000090910473ffffffffffffffffffffffffffffffffffffffff1690637a14574890604401602060405180830381865afa1580156115df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116039190612de0565b9050866040516116139190612dc4565b6040805191829003822088835267ffffffffffffffff841660208401529161ffff8b169133917f024797cc77ce15dc717112d54fb1df125fdfd8c81344fb046c5e074427ce1543910160405180910390a45050505050505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa1580156116dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117009190612bf7565b611736576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061174657611743611f5c565b50565b61174361203d565b6000546040517ff5ecbdbc00000000000000000000000000000000000000000000000000000000815261ffff8087166004830152851660248201523060448201526064810183905260609162010000900473ffffffffffffffffffffffffffffffffffffffff169063f5ecbdbc90608401600060405180830381865afa1580156117dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526118229190810190612e4a565b95945050505050565b3b151590565b6040517f66ad5c8a00000000000000000000000000000000000000000000000000000000815230906366ad5c8a90611873908790879087908790600401612e7f565b600060405180830381600087803b15801561188d57600080fd5b505af192505050801561189e575060015b610f25578080519060200120600160008661ffff1661ffff168152602001908152602001600020846040516118d39190612dc4565b90815260408051918290036020908101832067ffffffffffffffff87166000908152915220919091557fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d9061192f908690869086908690612e7f565b60405180910390a1610f25565b600061194a60c85460ff1690565b156119b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610da6565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260fb60205260409020546119e2908590612d86565b73ffffffffffffffffffffffffffffffffffffffff848116600090815260fb6020526040908190209290925560fa5491517fa9059cbb00000000000000000000000000000000000000000000000000000000815284821660048201526024810187905291169063a9059cbb906044016020604051808303816000875af1158015611a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a949190612bf7565b50929392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41e9aeb200000000000000000000000000000000000000000000000000000000148061075257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610752565b73ffffffffffffffffffffffffffffffffffffffff82161580611b6b575073ffffffffffffffffffffffffffffffffffffffff8116155b15611ba2576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff94851602179055600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909216179055565b60008082806020019051810190611c2e9190612ebe565b60148201519193509150611c438782846120fd565b91508073ffffffffffffffffffffffffffffffffffffffff1686604051611c6a9190612dc4565b6040805191829003822085835267ffffffffffffffff891660208401529161ffff8b16917f64e10c37f404d128982dce114f5d233c14c5c7f6d8db93099e3d99dacb9e27ba910160405180910390a450505050505050565b6000611cd060c85460ff1690565b15611d37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610da6565b60fa546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810184905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af1158015611db4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd89190612bf7565b50909392505050565b61ffff851660009081526002602052604081208054611dff90612ba3565b80601f0160208091040260200160405190810160405280929190818152602001828054611e2b90612ba3565b8015611e785780601f10611e4d57610100808354040283529160200191611e78565b820191906000526020600020905b815481529060010190602001808311611e5b57829003601f168201915b50505050509050805160001415611ebb576040517f8154374b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517fc58031000000000000000000000000000000000000000000000000000000000081526201000090910473ffffffffffffffffffffffffffffffffffffffff169063c5803100903490611f22908a9086908b908b908b908b90600401612f05565b6000604051808303818588803b158015611f3b57600080fd5b505af1158015611f4f573d6000803e3d6000fd5b5050505050505050505050565b60c85460ff16611fc8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610da6565b60c880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60c85460ff16156120aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610da6565b60c880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120133390565b600061210b60c85460ff1690565b15612172576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610da6565b60fa546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156121e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122059190612f79565b9050828110156122e9576122198184612d86565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260fb602052604090205580156122e45760fa546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af11580156122be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e29190612bf7565b505b611dd8565b60fa546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690529091169063a9059cbb906044016020604051808303816000875af1158015612362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123869190612bf7565b5050909392505050565b82805461239c90612ba3565b90600052602060002090601f0160209004810192826123be5760008555612422565b82601f106123f5578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555612422565b82800160010185558215612422579182015b82811115612422578235825591602001919060010190612407565b5061242e929150612432565b5090565b5b8082111561242e5760008155600101612433565b803561ffff8116811461245957600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156124d4576124d461245e565b604052919050565b600067ffffffffffffffff8211156124f6576124f661245e565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261253357600080fd5b8135612546612541826124dc565b61248d565b81815284602083860101111561255b57600080fd5b816020850160208301376000918101602001919091529392505050565b67ffffffffffffffff8116811461174357600080fd5b600080600080608085870312156125a457600080fd5b6125ad85612447565b9350602085013567ffffffffffffffff808211156125ca57600080fd5b6125d688838901612522565b9450604087013591506125e882612578565b909250606086013590808211156125fe57600080fd5b5061260b87828801612522565b91505092959194509250565b73ffffffffffffffffffffffffffffffffffffffff8116811461174357600080fd5b803561245981612617565b6000806040838503121561265757600080fd5b82359150602083013561266981612617565b809150509250929050565b60006020828403121561268657600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146106f557600080fd5b6000602082840312156126c857600080fd5b6106f582612447565b801515811461174357600080fd5b600080600080600060a086880312156126f757600080fd5b61270086612447565b9450602086013567ffffffffffffffff8082111561271d57600080fd5b61272989838a01612522565b95506040880135945060608801359150612742826126d1565b9092506080870135908082111561275857600080fd5b5061276588828901612522565b9150509295509295909350565b60008083601f84011261278457600080fd5b50813567ffffffffffffffff81111561279c57600080fd5b6020830191508360208285010111156127b457600080fd5b9250929050565b6000806000604084860312156127d057600080fd5b6127d984612447565b9250602084013567ffffffffffffffff8111156127f557600080fd5b61280186828701612772565b9497909650939450505050565b6000806040838503121561282157600080fd5b823561282c81612617565b9150602083013561266981612617565b60008060006060848603121561285157600080fd5b61285a84612447565b9250602084013567ffffffffffffffff81111561287657600080fd5b61288286828701612522565b925050604084013561289381612578565b809150509250925092565b6000602082840312156128b057600080fd5b81356106f581612617565b60005b838110156128d65781810151838201526020016128be565b83811115610f255750506000910152565b600081518084526128ff8160208601602086016128bb565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006106f560208301846128e7565b803560ff8116811461245957600080fd5b6000806000806000806000806000806101408b8d03121561297557600080fd5b61297e8b612447565b995060208b013567ffffffffffffffff8082111561299b57600080fd5b6129a78e838f01612522565b9a5060408d013599506129bc60608e01612639565b98506129ca60808e01612639565b975060a08d01359150808211156129e057600080fd5b506129ed8d828e01612522565b95505060c08b01359350612a0360e08c01612944565b92506101008b013591506101208b013590509295989b9194979a5092959850565b600080600080600060808688031215612a3c57600080fd5b612a4586612447565b9450612a5360208701612447565b935060408601359250606086013567ffffffffffffffff811115612a7657600080fd5b612a8288828901612772565b969995985093965092949392505050565b60008060008060008060c08789031215612aac57600080fd5b612ab587612447565b9550602087013567ffffffffffffffff80821115612ad257600080fd5b612ade8a838b01612522565b96506040890135955060608901359150612af782612617565b909350608088013590612b0982612617565b90925060a08801359080821115612b1f57600080fd5b50612b2c89828a01612522565b9150509295509295509295565b600060208284031215612b4b57600080fd5b81356106f5816126d1565b60008060008060808587031215612b6c57600080fd5b612b7585612447565b9350612b8360208601612447565b92506040850135612b9381612617565b9396929550929360600135925050565b600181811c90821680612bb757607f821691505b60208210811415612bf1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060208284031215612c0957600080fd5b81516106f5816126d1565b604081526000612c2760408301856128e7565b90508260208301529392505050565b61ffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015260a060408201526000612c6f60a08301866128e7565b84151560608401528281036080840152612c8981856128e7565b98975050505050505050565b60008060408385031215612ca857600080fd5b505080516020909101519092909150565b8183823760009101908152919050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b61ffff84168152604060208201526000611822604083018486612cc9565b600060208284031215612d4257600080fd5b81516106f581612617565b600061ffff808816835280871660208401525084604083015260806060830152612d7b608083018486612cc9565b979650505050505050565b600082821015612dbf577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500390565b60008251612dd68184602087016128bb565b9190910192915050565b600060208284031215612df257600080fd5b81516106f581612578565b600082601f830112612e0e57600080fd5b8151612e1c612541826124dc565b818152846020838601011115612e3157600080fd5b612e428260208301602087016128bb565b949350505050565b600060208284031215612e5c57600080fd5b815167ffffffffffffffff811115612e7357600080fd5b612e4284828501612dfd565b61ffff85168152608060208201526000612e9c60808301866128e7565b67ffffffffffffffff851660408401528281036060840152612d7b81856128e7565b60008060408385031215612ed157600080fd5b825167ffffffffffffffff811115612ee857600080fd5b612ef485828601612dfd565b925050602083015190509250929050565b61ffff8716815260c060208201526000612f2260c08301886128e7565b8281036040840152612f3481886128e7565b73ffffffffffffffffffffffffffffffffffffffff87811660608601528616608085015283810360a08501529050612f6c81856128e7565b9998505050505050505050565b600060208284031215612f8b57600080fd5b505191905056fea264697066735822122053f74afde4f243e8429cdf29e77079055b1c1be72179cd08a7852bac86e0528164736f6c634300080c0033",
  "devdoc": {
    "author": "Angle Core Team, forked from https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/token/oft/OFT.sol",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "estimateSendFee(uint16,bytes,uint256,bool,bytes)": {
        "params": {
          "_adapterParams": "flexible bytes array to indicate messaging adapter services in L0",
          "_amount": "amount of the tokens to transfer",
          "_dstChainId": "L0 defined chain id to send tokens too",
          "_toAddress": "dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain",
          "_useZro": "indicates to use zro to pay L0 fees"
        }
      },
      "initialize(address,address)": {
        "params": {
          "_lzEndpoint": "Layer zero endpoint to pass messages",
          "_treasury": "Address of the treasury contract used for access control"
        }
      },
      "lzReceive(uint16,bytes,uint64,bytes)": {
        "params": {
          "_nonce": "Nounce of the message",
          "_payload": "Data: recipient address and amount",
          "_srcAddress": "Sender of the source chain",
          "_srcChainId": "ChainId of the source chain - LayerZero standard"
        }
      },
      "nonblockingLzReceive(uint16,bytes,uint64,bytes)": {
        "details": "public for the needs of try / catch but effectively internal",
        "params": {
          "_nonce": "Nounce of the message",
          "_payload": "Data: recipient address and amount",
          "_srcAddress": "Sender of the source chain",
          "_srcChainId": "ChainId of the source chain - LayerZero standard"
        }
      },
      "pauseSendTokens(bool)": {
        "params": {
          "pause": "Future pause status"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "retryMessage(uint16,bytes,uint64,bytes)": {
        "params": {
          "_nonce": "Nounce of the message",
          "_payload": "Data: recipient address and amount",
          "_srcAddress": "Sender of the source chain",
          "_srcChainId": "ChainId of the source chain - LayerZero standard"
        }
      },
      "send(uint16,bytes,uint256,address,address,bytes)": {
        "params": {
          "_adapterParams": "is a flexible bytes array to indicate messaging adapter services",
          "_amount": "the quantity of tokens in wei",
          "_dstChainId": "the destination chain identifier",
          "_refundAddress": "the address LayerZero refunds if too much message fee is sent",
          "_toAddress": "can be any size depending on the `dstChainId`.",
          "_zroPaymentAddress": "set to address(0x0) if not paying in ZRO (LayerZero Token)"
        }
      },
      "sendWithPermit(uint16,bytes,uint256,address,address,bytes,uint256,uint8,bytes32,bytes32)": {
        "details": "The `v`, `r`, and `s` parameters are used as signature data",
        "params": {
          "_adapterParams": "Flexible bytes array to indicate messaging adapter services",
          "_amount": "Quantity of tokens in wei",
          "_dstChainId": "The destination chain identifier",
          "_refundAddress": "Address LayerZero refunds if too much message fee is sent",
          "_toAddress": "Can be any size depending on the `dstChainId`.",
          "_zroPaymentAddress": "Set to address(0x0) if not paying in ZRO (LayerZero Token)",
          "deadline": "Deadline parameter for the signature to be valid"
        }
      },
      "setTrustedRemote(uint16,bytes)": {
        "details": "Used for both receiving and sending messageThere can only be one trusted source per chainAllows owner to set it multiple times.",
        "params": {
          "_srcAddress": "Address on the source chain",
          "_srcChainId": "ChainId of the source chain - LayerZero standard"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "sweep(uint256,address)": {
        "params": {
          "amount": "Amount to withdraw from balance",
          "recipient": "Address to withdraw from"
        }
      },
      "withdraw(uint256,address)": {
        "params": {
          "amount": "Amount to withdraw",
          "recipient": "Address to send the canonical token to"
        },
        "returns": {
          "_0": "The amount of canonical token sent"
        }
      },
      "withdrawFor(uint256,address)": {
        "params": {
          "amount": "Amount to withdraw",
          "recipient": "Address to withdraw for"
        },
        "returns": {
          "_0": "The amount of canonical token sent"
        }
      }
    },
    "stateVariables": {
      "canonicalToken": {
        "details": "Immutable"
      }
    },
    "title": "LayerZeroBridge",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Maps an address to the amount of token bridged but not received"
      },
      "canonicalToken()": {
        "notice": "Address of the bridgeable token"
      },
      "estimateSendFee(uint16,bytes,uint256,bool,bytes)": {
        "notice": "Estimates send token `_tokenId` to (`_dstChainId`, `_toAddress`)"
      },
      "failedMessages(uint16,bytes,uint64)": {
        "notice": "Maps chainIds to failed messages to retry them"
      },
      "forceResumeReceive(uint16,bytes)": {
        "notice": "Unpauses the receive functionalities"
      },
      "getConfig(uint16,uint16,address,uint256)": {
        "notice": "Fetches the default LZ config"
      },
      "initialize(address,address)": {
        "notice": "Initializes the contract"
      },
      "isTrustedRemote(uint16,bytes)": {
        "notice": "Checks if the `_srcAddress` corresponds to the trusted source"
      },
      "lzEndpoint()": {
        "notice": "Layer Zero endpoint"
      },
      "lzReceive(uint16,bytes,uint64,bytes)": {
        "notice": "Receives a message from the LZ endpoint and process it"
      },
      "nonblockingLzReceive(uint16,bytes,uint64,bytes)": {
        "notice": "Handles message receptions in a non blocking way"
      },
      "pauseSendTokens(bool)": {
        "notice": "Pauses bridging through the contract"
      },
      "retryMessage(uint16,bytes,uint64,bytes)": {
        "notice": "Retries a message that previously failed and was stored"
      },
      "send(uint16,bytes,uint256,address,address,bytes)": {
        "notice": "Sends `_amount` amount of token to (`_dstChainId`, `_toAddress`)"
      },
      "sendWithPermit(uint16,bytes,uint256,address,address,bytes,uint256,uint8,bytes32,bytes32)": {
        "notice": "Sends `_amount` amount of token to (`_dstChainId`, `_toAddress`)"
      },
      "setConfig(uint16,uint16,uint256,bytes)": {
        "notice": "Overrides the default LZ config"
      },
      "setReceiveVersion(uint16)": {
        "notice": "Overrides the default LZ config"
      },
      "setSendVersion(uint16)": {
        "notice": "Overrides the default LZ config"
      },
      "setTrustedRemote(uint16,bytes)": {
        "notice": "Sets the corresponding address on an other chain."
      },
      "sweep(uint256,address)": {
        "notice": "Decreases the balance of an address"
      },
      "treasury()": {
        "notice": "Reference to the treasury contract to fetch access control"
      },
      "trustedRemoteLookup(uint16)": {
        "notice": "Maps chainIds to their OFT address"
      },
      "withdraw(uint256,address)": {
        "notice": "Withdraws amount of canonical token from the `msg.sender` balance and sends it to the recipient"
      },
      "withdrawFor(uint256,address)": {
        "notice": "Withdraws amount of `token` from the contract and sends it to the recipient"
      }
    },
    "notice": "Contract to be deployed on Ethereum for bridging an AgToken using a bridge intermediate token and LayerZero",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 772,
        "contract": "contracts/agToken/layerZero/LayerZeroBridge.sol:LayerZeroBridge",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 775,
        "contract": "contracts/agToken/layerZero/LayerZeroBridge.sol:LayerZeroBridge",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9890,
        "contract": "contracts/agToken/layerZero/LayerZeroBridge.sol:LayerZeroBridge",
        "label": "lzEndpoint",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ILayerZeroEndpoint)15086"
      },
      {
        "astId": 9899,
        "contract": "contracts/agToken/layerZero/LayerZeroBridge.sol:LayerZeroBridge",
        "label": "failedMessages",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"
      },
      {
        "astId": 9904,
        "contract": "contracts/agToken/layerZero/LayerZeroBridge.sol:LayerZeroBridge",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 9907,
        "contract": "contracts/agToken/layerZero/LayerZeroBridge.sol:LayerZeroBridge",
        "label": "treasury",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10386,
        "contract": "contracts/agToken/layerZero/LayerZeroBridge.sol:LayerZeroBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 3454,
        "contract": "contracts/agToken/layerZero/LayerZeroBridge.sol:LayerZeroBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "50",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10634,
        "contract": "contracts/agToken/layerZero/LayerZeroBridge.sol:LayerZeroBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "100",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2592,
        "contract": "contracts/agToken/layerZero/LayerZeroBridge.sol:LayerZeroBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "150",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 860,
        "contract": "contracts/agToken/layerZero/LayerZeroBridge.sol:LayerZeroBridge",
        "label": "_paused",
        "offset": 0,
        "slot": "200",
        "type": "t_bool"
      },
      {
        "astId": 951,
        "contract": "contracts/agToken/layerZero/LayerZeroBridge.sol:LayerZeroBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9063,
        "contract": "contracts/agToken/layerZero/LayerZeroBridge.sol:LayerZeroBridge",
        "label": "canonicalToken",
        "offset": 0,
        "slot": "250",
        "type": "t_contract(IERC20)5408"
      },
      {
        "astId": 9068,
        "contract": "contracts/agToken/layerZero/LayerZeroBridge.sol:LayerZeroBridge",
        "label": "balanceOf",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9382,
        "contract": "contracts/agToken/layerZero/LayerZeroBridge.sol:LayerZeroBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)48_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)5408": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILayerZeroEndpoint)15086": {
        "encoding": "inplace",
        "label": "contract ILayerZeroEndpoint",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bytes32)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}