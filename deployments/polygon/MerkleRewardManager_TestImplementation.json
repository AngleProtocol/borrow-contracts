{
  "address": "0x4e4C68B5De42aFE4fDceFE4e2F9dA684822cBa18",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidParam",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidReward",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernorOrGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userFeeRebate",
          "type": "uint256"
        }
      ],
      "name": "FeeRebateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fees",
          "type": "uint256"
        }
      ],
      "name": "FeesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_merkleRootDistributor",
          "type": "address"
        }
      ],
      "name": "MerkleRootDistributorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "uniV3Pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "positionWrappers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "propToken1",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "propToken2",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "propFees",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "outOfRangeIncentivized",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "epochStart",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numEpoch",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "incentivizeOutOfRange",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "boostedReward",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "boostingAddress",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct RewardDistribution",
          "name": "reward",
          "type": "tuple"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "NewReward",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EPOCH_DURATION",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coreBorrow",
      "outputs": [
        {
          "internalType": "contract ICoreBorrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "uniV3Pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "positionWrappers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "propToken1",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "propToken2",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "propFees",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "outOfRangeIncentivized",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "epochStart",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numEpoch",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "incentivizeOutOfRange",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "boostedReward",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "boostingAddress",
              "type": "address"
            }
          ],
          "internalType": "struct RewardDistribution",
          "name": "reward",
          "type": "tuple"
        }
      ],
      "name": "depositReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "uniV3Pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "positionWrappers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "propToken1",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "propToken2",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "propFees",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "outOfRangeIncentivized",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "epochStart",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numEpoch",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "incentivizeOutOfRange",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "boostedReward",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "boostingAddress",
              "type": "address"
            }
          ],
          "internalType": "struct RewardDistribution[]",
          "name": "rewards",
          "type": "tuple[]"
        }
      ],
      "name": "depositRewards",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeRebate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "uniV3Pool",
          "type": "address"
        }
      ],
      "name": "getActivePoolRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "uniV3Pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "positionWrappers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "propToken1",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "propToken2",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "propFees",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "outOfRangeIncentivized",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "epochStart",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numEpoch",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "incentivizeOutOfRange",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "boostedReward",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "boostingAddress",
              "type": "address"
            }
          ],
          "internalType": "struct RewardDistribution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "uniV3Pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "positionWrappers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "propToken1",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "propToken2",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "propFees",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "outOfRangeIncentivized",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "epochStart",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numEpoch",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "incentivizeOutOfRange",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "boostedReward",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "boostingAddress",
              "type": "address"
            }
          ],
          "internalType": "struct RewardDistribution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "uniV3Pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "positionWrappers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "propToken1",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "propToken2",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "propFees",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "outOfRangeIncentivized",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "epochStart",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numEpoch",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "incentivizeOutOfRange",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "boostedReward",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "boostingAddress",
              "type": "address"
            }
          ],
          "internalType": "struct RewardDistribution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "uniV3Pool",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "epoch",
          "type": "uint32"
        }
      ],
      "name": "getPoolRewardsForEpoch",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "uniV3Pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "positionWrappers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "propToken1",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "propToken2",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "propFees",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "outOfRangeIncentivized",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "epochStart",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numEpoch",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "incentivizeOutOfRange",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "boostedReward",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "boostingAddress",
              "type": "address"
            }
          ],
          "internalType": "struct RewardDistribution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "epoch",
          "type": "uint32"
        }
      ],
      "name": "getRewardsForEpoch",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "uniV3Pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "positionWrappers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "propToken1",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "propToken2",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "propFees",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "outOfRangeIncentivized",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "epochStart",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numEpoch",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "incentivizeOutOfRange",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "boostedReward",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "boostingAddress",
              "type": "address"
            }
          ],
          "internalType": "struct RewardDistribution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICoreBorrow",
          "name": "_coreBorrow",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_merkleRootDistributor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fees",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRootDistributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "recoverFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardList",
      "outputs": [
        {
          "internalType": "address",
          "name": "uniV3Pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "propToken1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "propToken2",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "propFees",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "outOfRangeIncentivized",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "epochStart",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "numEpoch",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "incentivizeOutOfRange",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "boostedReward",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "boostingAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fees",
          "type": "uint256"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_merkleRootDistributor",
          "type": "address"
        }
      ],
      "name": "setNewMerkleRootDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "userFeeRebate",
          "type": "uint256"
        }
      ],
      "name": "setUserFeeRebate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb080a16e32d52ea974536586e7cd754fc4209925c839a812ae5262e7aae1beac",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0x4e4C68B5De42aFE4fDceFE4e2F9dA684822cBa18",
    "transactionIndex": 15,
    "gasUsed": "2522148",
    "logsBloom": "0x
    "blockHash": "0xb7c25955efb61cb839be6fac50eedba541a082e4de9d47d9eae51866811bf477",
    "transactionHash": "0xb080a16e32d52ea974536586e7cd754fc4209925c839a812ae5262e7aae1beac",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 35317185,
        "transactionHash": "0xb080a16e32d52ea974536586e7cd754fc4209925c839a812ae5262e7aae1beac",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fda462548ce04282f4b6d6619823a7c64fdc0185",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x000000000000000000000000000000000000000000000000017b4d847b002e800000000000000000000000000000000000000000000000007fcca26f9d6abcb200000000000000000000000000000000000000000000079bdd5088dea6dc50b10000000000000000000000000000000000000000000000007e5154eb226a8e3200000000000000000000000000000000000000000000079bdecbd66321dc7f31",
        "logIndex": 64,
        "blockHash": "0xb7c25955efb61cb839be6fac50eedba541a082e4de9d47d9eae51866811bf477"
      }
    ],
    "blockNumber": 35317185,
    "cumulativeGasUsed": "4687890",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "aad92c4a5e15e0f359a587eb615111b1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernorOrGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userFeeRebate\",\"type\":\"uint256\"}],\"name\":\"FeeRebateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"FeesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_merkleRootDistributor\",\"type\":\"address\"}],\"name\":\"MerkleRootDistributorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"uniV3Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"positionWrappers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"propToken1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propToken2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propFees\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"outOfRangeIncentivized\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"epochStart\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numEpoch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"incentivizeOutOfRange\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"boostedReward\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"boostingAddress\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct RewardDistribution\",\"name\":\"reward\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NewReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EPOCH_DURATION\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreBorrow\",\"outputs\":[{\"internalType\":\"contract ICoreBorrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"uniV3Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"positionWrappers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"propToken1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propToken2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propFees\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"outOfRangeIncentivized\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"epochStart\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numEpoch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"incentivizeOutOfRange\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"boostedReward\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"boostingAddress\",\"type\":\"address\"}],\"internalType\":\"struct RewardDistribution\",\"name\":\"reward\",\"type\":\"tuple\"}],\"name\":\"depositReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"uniV3Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"positionWrappers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"propToken1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propToken2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propFees\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"outOfRangeIncentivized\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"epochStart\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numEpoch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"incentivizeOutOfRange\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"boostedReward\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"boostingAddress\",\"type\":\"address\"}],\"internalType\":\"struct RewardDistribution[]\",\"name\":\"rewards\",\"type\":\"tuple[]\"}],\"name\":\"depositRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeRebate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniV3Pool\",\"type\":\"address\"}],\"name\":\"getActivePoolRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"uniV3Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"positionWrappers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"propToken1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propToken2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propFees\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"outOfRangeIncentivized\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"epochStart\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numEpoch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"incentivizeOutOfRange\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"boostedReward\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"boostingAddress\",\"type\":\"address\"}],\"internalType\":\"struct RewardDistribution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"uniV3Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"positionWrappers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"propToken1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propToken2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propFees\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"outOfRangeIncentivized\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"epochStart\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numEpoch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"incentivizeOutOfRange\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"boostedReward\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"boostingAddress\",\"type\":\"address\"}],\"internalType\":\"struct RewardDistribution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"uniV3Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"positionWrappers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"propToken1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propToken2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propFees\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"outOfRangeIncentivized\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"epochStart\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numEpoch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"incentivizeOutOfRange\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"boostedReward\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"boostingAddress\",\"type\":\"address\"}],\"internalType\":\"struct RewardDistribution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uniV3Pool\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"getPoolRewardsForEpoch\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"uniV3Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"positionWrappers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"propToken1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propToken2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propFees\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"outOfRangeIncentivized\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"epochStart\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numEpoch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"incentivizeOutOfRange\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"boostedReward\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"boostingAddress\",\"type\":\"address\"}],\"internalType\":\"struct RewardDistribution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"getRewardsForEpoch\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"uniV3Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"positionWrappers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"propToken1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propToken2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propFees\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"outOfRangeIncentivized\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"epochStart\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numEpoch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"incentivizeOutOfRange\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"boostedReward\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"boostingAddress\",\"type\":\"address\"}],\"internalType\":\"struct RewardDistribution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICoreBorrow\",\"name\":\"_coreBorrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_merkleRootDistributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRootDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"recoverFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"uniV3Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"propToken1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propToken2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"propFees\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"outOfRangeIncentivized\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"epochStart\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numEpoch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"incentivizeOutOfRange\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"boostedReward\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"boostingAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fees\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_merkleRootDistributor\",\"type\":\"address\"}],\"name\":\"setNewMerkleRootDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userFeeRebate\",\"type\":\"uint256\"}],\"name\":\"setUserFeeRebate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Labs, Inc.\",\"kind\":\"dev\",\"methods\":{\"depositReward((address,address,address[],uint256,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32,address))\":{\"details\":\"It's important to make sure that the address specified as a UniV3 pool is effectively a pool otherwise they will not be handled by the distribution script and rewards may be lostThe `positionWrappers` specified in the `reward` struct need to be supported by the scriptIf the pool incentivized contains agEUR, then no fees are taken on the rewards\",\"returns\":{\"rewardAmount\":\"How many rewards are actually taken into consideration in the contract\"}},\"depositRewards((address,address,address[],uint256,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32,address)[])\":{\"returns\":{\"_0\":\"List of all the reward amounts actually deposited for each `reward` in the `rewards` list\"}}},\"title\":\"MerkleRewardManagerPolygon\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"EPOCH_DURATION()\":{\"notice\":\"Epoch duration\"},\"coreBorrow()\":{\"notice\":\"`CoreBorrow` contract handling access control\"},\"depositReward((address,address,address[],uint256,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32,address))\":{\"notice\":\"Deposits a reward `reward` to incentivize a given UniswapV3 pool for a specific period of time\"},\"depositRewards((address,address,address[],uint256,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32,address)[])\":{\"notice\":\"Same as the function above but for multiple rewards at once\"},\"feeRebate(address)\":{\"notice\":\"Maps an address to the rebate\"},\"fees()\":{\"notice\":\"Value (in base 10**9) of the fees taken when adding rewards for a pool which does not have agEUR in it\"},\"getActivePoolRewards(address)\":{\"notice\":\"Returns the list of all currently active rewards for a specific UniswapV3 pool\"},\"getActiveRewards()\":{\"notice\":\"Returns the list of all currently active rewards on UniswapV3 pool\"},\"getAllRewards()\":{\"notice\":\"Returns the list of all rewards ever distributed or to be distributed\"},\"getPoolRewardsForEpoch(address,uint32)\":{\"notice\":\"Returns the list of all the rewards that were or that are going to be live at a specific epoch and for a specific pool\"},\"getRewardsForEpoch(uint32)\":{\"notice\":\"Returns the list of all the rewards that were or that are going to be live at a specific epoch\"},\"merkleRootDistributor()\":{\"notice\":\"User contract for distributing rewards\"},\"recoverFees(address[],address)\":{\"notice\":\"Recovers fees accrued on the contract for a list of `tokens`\"},\"rewardList(uint256)\":{\"notice\":\"List of all rewards ever distributed or to be distributed in the contract\"},\"setFees(uint256)\":{\"notice\":\"Sets the fees on deposit\"},\"setNewMerkleRootDistributor(address)\":{\"notice\":\"Sets a new `merkleRootDistributor` to which rewards should be distributed\"},\"setUserFeeRebate(address,uint256)\":{\"notice\":\"Sets fee rebates for a given user\"}},\"notice\":\"Polygon implementation of the MerkleRewardManager contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol\":\"MerkleRewardManagerPolygon\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"contracts/interfaces/ICoreBorrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\n/// @title ICoreBorrow\\n/// @author Angle Core Team\\n/// @notice Interface for the `CoreBorrow` contract\\n/// @dev This interface only contains functions of the `CoreBorrow` contract which are called by other contracts\\n/// of this module\\ninterface ICoreBorrow {\\n    /// @notice Checks if an address corresponds to a treasury of a stablecoin with a flash loan\\n    /// module initialized on it\\n    /// @param treasury Address to check\\n    /// @return Whether the address has the `FLASHLOANER_TREASURY_ROLE` or not\\n    function isFlashLoanerTreasury(address treasury) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GOVERNOR_ROLE` or not\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor or a guardian of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GUARDIAN_ROLE` or not\\n    /// @dev Governance should make sure when adding a governor to also give this governor the guardian\\n    /// role by calling the `addGovernor` function\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x25b65b3f506ca91745a444502a36f0556585d82d9d60f4bd32fbcaabc12840d4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/uniswap/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3Pool {\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n}\\n\",\"keccak256\":\"0x816bb693e4cd6d03a0ab5e1434a681caedbed37926f2c6e2d2aaefe59d185bb8\",\"license\":\"GPL-2.0-or-later\"},\"contracts/merkleRootDistributor/MerkleRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/external/uniswap/IUniswapV3Pool.sol\\\";\\nimport \\\"../interfaces/ICoreBorrow.sol\\\";\\n\\n/* TODO for the script\\n- check whether the uniV3 pool is actually one or not\\n- automatically ERC20 token addresses which own the position\\n- what happens if rewards sent to a pool with no fees accruing in the week at all\\n*/\\n\\nstruct RewardDistribution {\\n    // Address of the UniswapV3 pool that needs to be incentivized\\n    address uniV3Pool;\\n    // Address of the reward token for the incentives\\n    address token;\\n    // List of all UniV3 position wrappers to consider for this contract\\n    // (this can include addresses of Arrakis or Gamma smart contracts for instance)\\n    address[] positionWrappers;\\n    // Amount of `token` to distribute\\n    uint256 amount;\\n    // In the incentivization formula, how much of the fees should go to holders of token1\\n    // in base 10**4\\n    uint32 propToken1;\\n    // Proportion for holding token2 (in base 10**4)\\n    uint32 propToken2;\\n    // Proportion for providing a useful liquidity (in base 10**4) that generates fees\\n    uint32 propFees;\\n    // Whether out of range liquidity should still be incentivized or not\\n    uint32 outOfRangeIncentivized;\\n    // Timestamp at which the incentivization should start\\n    uint32 epochStart;\\n    // Amount of epochs for which incentivization should last\\n    uint32 numEpoch;\\n    // Whether out of range liquidity should be incentivized or not\\n    // This should be equal to 1 if out of range liquidity should still be incentivized\\n    // and 0 otherwise\\n    uint32 incentivizeOutOfRange;\\n    // How much more addresses with a maximum boost can get with respect to addresses\\n    // which do not have a boost (in base 4). In the case of Curve where addresses get 2.5x more\\n    // this would be 25000\\n    uint32 boostedReward;\\n    // Address of the token which dictates who gets boosted rewards or not. This is optional\\n    // and if the zero address is given no boost will be taken into account\\n    address boostingAddress;\\n}\\n\\n/// @title MerkleRewardManager\\n/// @author Angle Labs, Inc.\\n/// @notice Manages the distribution of rewards across different UniswapV3 pools\\n/// @dev This contract is mostly a helper for APIs getting built on top and helping in Angle\\n/// UniswapV3 incentivization scheme\\nabstract contract MerkleRewardManager is Initializable {\\n    using SafeERC20 for IERC20;\\n\\n    // ============================ CONSTANT / VARIABLES ===========================\\n    /// @notice Epoch duration\\n    uint32 public constant EPOCH_DURATION = 24 * 3600 * 7;\\n\\n    /// @notice `CoreBorrow` contract handling access control\\n    ICoreBorrow public coreBorrow;\\n    /// @notice User contract for distributing rewards\\n    address public merkleRootDistributor;\\n    /// @notice List of all rewards ever distributed or to be distributed in the contract\\n    RewardDistribution[] public rewardList;\\n    /// @notice Value (in base 10**9) of the fees taken when adding rewards for a pool which does not\\n    /// have agEUR in it\\n    uint256 public fees;\\n    /// @notice Maps an address to the rebate\\n    mapping(address => uint256) public feeRebate;\\n\\n    uint256[47] private __gap;\\n\\n    // ============================== ERRORS / EVENTS ==============================\\n\\n    event FeesSet(uint256 _fees);\\n    event MerkleRootDistributorUpdated(address indexed _merkleRootDistributor);\\n    event NewReward(RewardDistribution reward, address indexed sender);\\n    event FeeRebateUpdated(address indexed user, uint256 userFeeRebate);\\n\\n    error InvalidReward();\\n    error InvalidParam();\\n    error NotGovernorOrGuardian();\\n    error ZeroAddress();\\n\\n    // ================================== MODIFIER =================================\\n\\n    /// @notice Checks whether the `msg.sender` has the governor role or the guardian role\\n    modifier onlyGovernorOrGuardian() {\\n        if (!coreBorrow.isGovernorOrGuardian(msg.sender)) revert NotGovernorOrGuardian();\\n        _;\\n    }\\n\\n    // ================================ CONSTRUCTOR ================================\\n\\n    constructor() initializer {}\\n\\n    function initialize(\\n        ICoreBorrow _coreBorrow,\\n        address _merkleRootDistributor,\\n        uint256 _fees\\n    ) public initializer {\\n        if (address(_coreBorrow) == address(0) || _merkleRootDistributor == address(0)) revert ZeroAddress();\\n        if (_fees > 10**9) revert InvalidParam();\\n        merkleRootDistributor = _merkleRootDistributor;\\n        coreBorrow = _coreBorrow;\\n        fees = _fees;\\n    }\\n\\n    // ============================== DEPOSIT FUNCTION =============================\\n\\n    /// @notice Deposits a reward `reward` to incentivize a given UniswapV3 pool for a specific period of time\\n    /// @return rewardAmount How many rewards are actually taken into consideration in the contract\\n    /// @dev It's important to make sure that the address specified as a UniV3 pool is effectively a pool\\n    /// otherwise they will not be handled by the distribution script and rewards may be lost\\n    /// @dev The `positionWrappers` specified in the `reward` struct need to be supported by the script\\n    /// @dev If the pool incentivized contains agEUR, then no fees are taken on the rewards\\n    function depositReward(RewardDistribution memory reward) external returns (uint256 rewardAmount) {\\n        return _depositReward(reward);\\n    }\\n\\n    /// @notice Same as the function above but for multiple rewards at once\\n    /// @return List of all the reward amounts actually deposited for each `reward` in the `rewards` list\\n    function depositRewards(RewardDistribution[] memory rewards) external returns (uint256[] memory) {\\n        uint256[] memory rewardAmounts = new uint256[](rewards.length);\\n        for (uint256 i = 0; i < rewards.length; ) {\\n            rewardAmounts[i] = _depositReward(rewards[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return rewardAmounts;\\n    }\\n\\n    /// @notice Internal version of `depositReward`\\n    function _depositReward(RewardDistribution memory reward) internal returns (uint256 rewardAmount) {\\n        uint32 epochStart = _getRoundedEpoch(reward.epochStart);\\n        reward.epochStart = epochStart;\\n        // Reward will not be accepted in the following conditions:\\n        if (\\n            // if epoch parameters would lead to a past distribution\\n            epochStart + EPOCH_DURATION < block.timestamp ||\\n            // if the amount of epochs for which this incentive should last is zero\\n            reward.numEpoch == 0 ||\\n            // if the amount to use to incentivize is still 0\\n            reward.amount == 0 ||\\n            // if the reward parameters are not correctly specified\\n            reward.propFees + reward.propToken1 + reward.propToken2 != 10**4 ||\\n            // if boosted addresses get less than non-boosted addresses in case of\\n            (reward.boostingAddress != address(0) && reward.boostedReward < 10**4)\\n        ) revert InvalidReward();\\n        rewardAmount = reward.amount;\\n        address agEURAddress = _agEUR();\\n        // Computing fees: these are waive for whitelisted addresses and if there is agEUR in a pool\\n        uint256 userFeeRebate = feeRebate[msg.sender];\\n        if (\\n            userFeeRebate < 10**9 &&\\n            IUniswapV3Pool(reward.uniV3Pool).token0() != agEURAddress &&\\n            IUniswapV3Pool(reward.uniV3Pool).token1() != agEURAddress\\n        ) {\\n            uint256 _fees = (fees * (10**9 - userFeeRebate)) / 10**9;\\n            uint256 rewardAmountMinusFees = (rewardAmount * (10**9 - _fees)) / 10**9;\\n            IERC20(reward.token).safeTransferFrom(msg.sender, address(this), rewardAmount - rewardAmountMinusFees);\\n            rewardAmount = rewardAmountMinusFees;\\n            reward.amount = rewardAmount;\\n        }\\n\\n        IERC20(reward.token).safeTransferFrom(msg.sender, merkleRootDistributor, rewardAmount);\\n        rewardList.push(reward);\\n        emit NewReward(reward, msg.sender);\\n    }\\n\\n    // ================================= UI HELPERS ================================\\n    // These functions are not to be queried on-chain and hence are not optimized for gas consumption\\n\\n    /// @notice Returns the list of all rewards ever distributed or to be distributed\\n    function getAllRewards() external view returns (RewardDistribution[] memory) {\\n        return rewardList;\\n    }\\n\\n    /// @notice Returns the list of all currently active rewards on UniswapV3 pool\\n    function getActiveRewards() external view returns (RewardDistribution[] memory) {\\n        return _getRewardsForEpoch(_getRoundedEpoch(uint32(block.timestamp)));\\n    }\\n\\n    /// @notice Returns the list of all the rewards that were or that are going to be live at\\n    /// a specific epoch\\n    function getRewardsForEpoch(uint32 epoch) external view returns (RewardDistribution[] memory) {\\n        return _getRewardsForEpoch(_getRoundedEpoch(epoch));\\n    }\\n\\n    /// @notice Returns the list of all currently active rewards for a specific UniswapV3 pool\\n    function getActivePoolRewards(address uniV3Pool) external view returns (RewardDistribution[] memory) {\\n        return _getPoolRewardsForEpoch(uniV3Pool, _getRoundedEpoch(uint32(block.timestamp)));\\n    }\\n\\n    /// @notice Returns the list of all the rewards that were or that are going to be live at a\\n    /// specific epoch and for a specific pool\\n    function getPoolRewardsForEpoch(address uniV3Pool, uint32 epoch)\\n        external\\n        view\\n        returns (RewardDistribution[] memory)\\n    {\\n        return _getPoolRewardsForEpoch(uniV3Pool, _getRoundedEpoch(epoch));\\n    }\\n\\n    // ============================ GOVERNANCE FUNCTIONS ===========================\\n\\n    /// @notice Sets a new `merkleRootDistributor` to which rewards should be distributed\\n    function setNewMerkleRootDistributor(address _merkleRootDistributor) external onlyGovernorOrGuardian {\\n        if (_merkleRootDistributor == address(0)) revert InvalidParam();\\n        merkleRootDistributor = _merkleRootDistributor;\\n        emit MerkleRootDistributorUpdated(_merkleRootDistributor);\\n    }\\n\\n    /// @notice Sets the fees on deposit\\n    function setFees(uint256 _fees) external onlyGovernorOrGuardian {\\n        if (_fees >= 10**9) revert InvalidParam();\\n        fees = _fees;\\n        emit FeesSet(_fees);\\n    }\\n\\n    /// @notice Sets fee rebates for a given user\\n    function setUserFeeRebate(address user, uint256 userFeeRebate) external onlyGovernorOrGuardian {\\n        feeRebate[user] = userFeeRebate;\\n        emit FeeRebateUpdated(user, userFeeRebate);\\n    }\\n\\n    /// @notice Recovers fees accrued on the contract for a list of `tokens`\\n    function recoverFees(IERC20[] memory tokens, address to) external onlyGovernorOrGuardian {\\n        for (uint256 i = 0; i < tokens.length; ) {\\n            uint256 amount = tokens[i].balanceOf(address(this));\\n            tokens[i].safeTransfer(to, amount);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // ============================== INTERNAL HELPERS =============================\\n\\n    /// @notice Returns the agEUR address on the corresponding chain\\n    function _agEUR() internal view virtual returns (address);\\n\\n    /// @notice Rounds an `epoch` timestamp to the start of the corresponding period\\n    function _getRoundedEpoch(uint32 epoch) internal pure returns (uint32) {\\n        return (epoch / EPOCH_DURATION) * EPOCH_DURATION;\\n    }\\n\\n    /// @notice Checks whether `reward` was live at `roundedEpoch`\\n    function _isRewardLiveForEpoch(RewardDistribution storage reward, uint32 roundedEpoch)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        uint256 rewardEpochStart = reward.epochStart;\\n        return rewardEpochStart <= roundedEpoch && rewardEpochStart + reward.numEpoch * EPOCH_DURATION > roundedEpoch;\\n    }\\n\\n    /// @notice Gets the list of all active rewards during the epoch which started at `epochStart`\\n    function _getRewardsForEpoch(uint32 epochStart) internal view returns (RewardDistribution[] memory) {\\n        uint256 length;\\n        for (uint32 i = 0; i < rewardList.length; ) {\\n            RewardDistribution storage reward = rewardList[i];\\n            if (_isRewardLiveForEpoch(reward, epochStart)) length += 1;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        RewardDistribution[] memory activeRewards = new RewardDistribution[](length);\\n        uint256 j;\\n        for (uint32 i = 0; i < rewardList.length && j < length; ) {\\n            RewardDistribution storage reward = rewardList[i];\\n            if (_isRewardLiveForEpoch(reward, epochStart)) {\\n                activeRewards[j] = reward;\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return activeRewards;\\n    }\\n\\n    /// @notice Gets the list of all active rewards for `uniV3Pool` during the epoch which started at `epochStart`\\n    function _getPoolRewardsForEpoch(address uniV3Pool, uint32 epochStart)\\n        internal\\n        view\\n        returns (RewardDistribution[] memory)\\n    {\\n        uint256 length;\\n        for (uint32 i = 0; i < rewardList.length; ) {\\n            RewardDistribution storage reward = rewardList[i];\\n            if (reward.uniV3Pool == uniV3Pool && _isRewardLiveForEpoch(reward, epochStart)) length += 1;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        RewardDistribution[] memory activeRewards = new RewardDistribution[](length);\\n        uint256 j;\\n        for (uint32 i = 0; i < rewardList.length && j < length; ) {\\n            RewardDistribution storage reward = rewardList[i];\\n            if (reward.uniV3Pool == uniV3Pool && _isRewardLiveForEpoch(reward, epochStart)) {\\n                activeRewards[j] = reward;\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return activeRewards;\\n    }\\n}\\n\",\"keccak256\":\"0x242fac07755031f61dd9dc6f07b834963f41ce3105f5df9abe967a7495296583\",\"license\":\"GPL-3.0\"},\"contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"../MerkleRewardManager.sol\\\";\\n\\n/// @title MerkleRewardManagerPolygon\\n/// @author Angle Labs, Inc.\\n/// @notice Polygon implementation of the MerkleRewardManager contract\\ncontract MerkleRewardManagerPolygon is MerkleRewardManager {\\n    /// @notice Returns the agEUR address on the corresponding chain\\n    function _agEUR() internal pure override returns (address) {\\n        return 0xE0B52e49357Fd4DAf2c15e02058DCE6BC0057db4;\\n    }\\n}\\n\",\"keccak256\":\"0x165afca8fd8286184084b7427d614140b4a6657d89868dd13a1ab0c10f684630\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b62000fad1760201c565b15905090565b3b151590565b612c7e80620001126000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80634699fb4a116100b25780638ac5907b116100815780639bd2776e116100665780639bd2776e1461032d578063a70b9f0c14610340578063feba1ed21461035f57600080fd5b80638ac5907b146103045780639af1d35a1461032457600080fd5b80634699fb4a1461029d57806350930332146102b0578063677da670146102c35780637b509055146102e357600080fd5b80631794bb3c116101095780632e17b590116100ee5780632e17b5901461026f5780633d18678e1461028257806345b35f561461029557600080fd5b80631794bb3c146102115780631b0c24d51461022457600080fd5b80630241d8f91461013b57806310d666771461015057806310ee535f146101e9578063141df503146101fe575b600080fd5b61014e61014936600461228f565b61037f565b005b61016361015e3660046122bb565b6104b2565b6040805173ffffffffffffffffffffffffffffffffffffffff9d8e1681529b8d1660208d01528b019990995263ffffffff97881660608b015295871660808a015293861660a089015291851660c0880152841660e08701528316610100860152821661012085015216610140830152909116610160820152610180015b60405180910390f35b6101f16105b9565b6040516101e09190612455565b61014e61020c3660046125a1565b6105d1565b61014e61021f366004612652565b6107ac565b60005461024a9062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101e0565b6101f161027d3660046126a7565b6109fd565b61014e6102903660046122bb565b610a11565b6101f1610b56565b61014e6102ab3660046126c2565b610d4b565b6101f16102be3660046126c2565b610ed4565b6102d66102d1366004612861565b610ee8565b6040516101e09190612912565b6102f66102f1366004612956565b610f8c565b6040519081526020016101e0565b60015461024a9073ffffffffffffffffffffffffffffffffffffffff1681565b6102f660035481565b6101f161033b36600461298b565b610f97565b61034a62093a8081565b60405163ffffffff90911681526020016101e0565b6102f661036d3660046126c2565b60046020526000908152604090205481565b6000546040517f521d4de90000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063521d4de990602401602060405180830381865afa1580156103f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041691906129c0565b61044c576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526004602052604090819020839055517fab1d37d0b21937f334fc4164d147abbfdbfd7ef37ab9ea0ae73f2a58ffb7f1cc906104a69084815260200190565b60405180910390a25050565b600281815481106104c257600080fd5b60009182526020909120600690910201805460018201546003830154600484015460059094015473ffffffffffffffffffffffffffffffffffffffff938416955091831693909263ffffffff8083169364010000000084048216936801000000000000000081048316936c0100000000000000000000000082048416937001000000000000000000000000000000008304811693740100000000000000000000000000000000000000008404821693780100000000000000000000000000000000000000000000000081048316937c010000000000000000000000000000000000000000000000000000000090910490921691168c565b60606105cc6105c742610fb3565b610fcd565b905090565b6000546040517f521d4de90000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063521d4de990602401602060405180830381865afa158015610644573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066891906129c0565b61069e576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b82518110156107a75760008382815181106106be576106be6129e2565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610734573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107589190612a11565b905061079e8382868581518110610771576107716129e2565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1661133d9092919063ffffffff16565b506001016106a1565b505050565b600054610100900460ff166107c75760005460ff16156107cb565b303b155b61085c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff1615801561089b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b73ffffffffffffffffffffffffffffffffffffffff841615806108d2575073ffffffffffffffffffffffffffffffffffffffff8316155b15610909576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b633b9aca00821115610947576040517fd252903400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85811691909117909155600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000092871692909202919091179055600382905580156109f757600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50505050565b6060610a0b6105c783610fb3565b92915050565b6000546040517f521d4de90000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063521d4de990602401602060405180830381865afa158015610a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa891906129c0565b610ade576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b633b9aca008110610b1b576040517fd252903400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60038190556040518181527f3346af6da1932164d501f2ec28f8c5d686db5828a36b77f2da4332d89184fe7b9060200160405180910390a150565b60606002805480602002602001604051908101604052809291908181526020016000905b82821015610d42576000848152602090819020604080516101a08101825260068602909201805473ffffffffffffffffffffffffffffffffffffffff9081168452600182015416838501526002810180548351818702810187018552818152949592949386019392830182828015610c2857602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610bfd575b50505091835250506003820154602080830191909152600483015463ffffffff8082166040850152640100000000820481166060850152680100000000000000008204811660808501526c010000000000000000000000008204811660a08501527001000000000000000000000000000000008204811660c0850152740100000000000000000000000000000000000000008204811660e08501527801000000000000000000000000000000000000000000000000820481166101008501527c01000000000000000000000000000000000000000000000000000000009091041661012083015260059092015473ffffffffffffffffffffffffffffffffffffffff16610140909101529082526001929092019101610b7a565b50505050905090565b6000546040517f521d4de90000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063521d4de990602401602060405180830381865afa158015610dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de291906129c0565b610e18576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116610e65576040517fd252903400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f02c91fad8ac6d11b7306ffc6e87ccfe040a894cbdb877be2eeab560fb8a4556a90600090a250565b6060610a0b82610ee342610fb3565b611411565b60606000825167ffffffffffffffff811115610f0657610f066124d5565b604051908082528060200260200182016040528015610f2f578160200160208202803683370190505b50905060005b8351811015610f8557610f60848281518110610f5357610f536129e2565b60200260200101516117d0565b828281518110610f7257610f726129e2565b6020908102919091010152600101610f35565b5092915050565b6000610a0b826117d0565b6060610fa683610ee384610fb3565b9392505050565b3b151590565b600062093a80610fc38184612a88565b610a0b9190612aab565b60606000805b60025463ffffffff8216101561103457600060028263ffffffff1681548110610ffe57610ffe6129e2565b906000526020600020906006020190506110188186611e85565b1561102b57611028600184612ad7565b92505b50600101610fd3565b5060008167ffffffffffffffff811115611050576110506124d5565b60405190808252806020026020018201604052801561110657816020015b604080516101a0810182526000808252602080830182905260609383018490529282018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820181905261018082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161106e5790505b5090506000805b60025463ffffffff821610801561112357508382105b1561133357600060028263ffffffff1681548110611143576111436129e2565b9060005260206000209060060201905061115d8188611e85565b1561132a57604080516101a081018252825473ffffffffffffffffffffffffffffffffffffffff908116825260018401541660208083019190915260028401805484518184028101840186528181529394869490860193909291908301828280156111fe57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116111d3575b505050918352505060038201546020820152600482015463ffffffff8082166040840152640100000000820481166060840152680100000000000000008204811660808401526c010000000000000000000000008204811660a08401527001000000000000000000000000000000008204811660c0840152740100000000000000000000000000000000000000008204811660e08401527801000000000000000000000000000000000000000000000000820481166101008401527c01000000000000000000000000000000000000000000000000000000009091041661012082015260059091015473ffffffffffffffffffffffffffffffffffffffff16610140909101528451859085908110611318576113186129e2565b60200260200101819052508260010192505b5060010161110d565b5090949350505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526107a79084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611f05565b60606000805b60025463ffffffff8216101561149f57600060028263ffffffff1681548110611442576114426129e2565b60009182526020909120600690910201805490915073ffffffffffffffffffffffffffffffffffffffff878116911614801561148357506114838186611e85565b1561149657611493600184612ad7565b92505b50600101611417565b5060008167ffffffffffffffff8111156114bb576114bb6124d5565b60405190808252806020026020018201604052801561157157816020015b604080516101a0810182526000808252602080830182905260609383018490529282018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820181905261018082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816114d95790505b5090506000805b60025463ffffffff821610801561158e57508382105b156117c557600060028263ffffffff16815481106115ae576115ae6129e2565b60009182526020909120600690910201805490915073ffffffffffffffffffffffffffffffffffffffff89811691161480156115ef57506115ef8188611e85565b156117bc57604080516101a081018252825473ffffffffffffffffffffffffffffffffffffffff9081168252600184015416602080830191909152600284018054845181840281018401865281815293948694908601939092919083018282801561169057602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611665575b505050918352505060038201546020820152600482015463ffffffff8082166040840152640100000000820481166060840152680100000000000000008204811660808401526c010000000000000000000000008204811660a08401527001000000000000000000000000000000008204811660c0840152740100000000000000000000000000000000000000008204811660e08401527801000000000000000000000000000000000000000000000000820481166101008401527c01000000000000000000000000000000000000000000000000000000009091041661012082015260059091015473ffffffffffffffffffffffffffffffffffffffff166101409091015284518590859081106117aa576117aa6129e2565b60200260200101819052508260010192505b50600101611578565b509095945050505050565b6000806117e1836101000151610fb3565b63ffffffff81166101008501529050426117fe62093a8083612aef565b63ffffffff161080611819575061012083015163ffffffff16155b8061182657506060830151155b8061185b57508260a0015183608001518460c001516118459190612aef565b61184f9190612aef565b63ffffffff1661271014155b80611897575061018083015173ffffffffffffffffffffffffffffffffffffffff1615801590611897575061271083610160015163ffffffff16105b156118ce576040517f28829e8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608301513360009081526004602052604090205490925073e0b52e49357fd4daf2c15e02058dce6bc0057db490633b9aca00811080156119ad57508173ffffffffffffffffffffffffffffffffffffffff16856000015173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611970573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119949190612b17565b73ffffffffffffffffffffffffffffffffffffffff1614155b8015611a5757508173ffffffffffffffffffffffffffffffffffffffff16856000015173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3e9190612b17565b73ffffffffffffffffffffffffffffffffffffffff1614155b15611aea576000633b9aca00611a6d8382612b34565b600354611a7a9190612b4b565b611a849190612b88565b90506000633b9aca00611a978382612b34565b611aa19088612b4b565b611aab9190612b88565b9050611adf3330611abc848a612b34565b60208b015173ffffffffffffffffffffffffffffffffffffffff16929190612011565b606087018190529450505b6001546020860151611b189173ffffffffffffffffffffffffffffffffffffffff9182169133911687612011565b6002805460018101825560009190915285517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace600690920291820180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff9384161782556020808a01517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf8601805490931694169390931790556040880151805189949293611c03937f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad0019201906121bb565b5060608201516003820155608082015160048201805460a085015160c086015160e08701516101008801516101208901516101408a01516101608b015163ffffffff998a167fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090981697909717640100000000968a1696909602959095177fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff1668010000000000000000948916949094027fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff16939093176c0100000000000000000000000092881692909202919091177fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff16700100000000000000000000000000000000918716919091027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff161774010000000000000000000000000000000000000000918616919091021777ffffffffffffffffffffffffffffffffffffffffffffffff167801000000000000000000000000000000000000000000000000918516919091027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16177c0100000000000000000000000000000000000000000000000000000000939091169290920291909117905561018090910151600590910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905560405133907fca81b800657138840b14496c52bd3bb0dd06010a4bf4e5f2b668f0240dd53ab890611e75908890612b9c565b60405180910390a2505050919050565b600482015460009063ffffffff70010000000000000000000000000000000090910481169083168111801590611efd5750600484015463ffffffff80851691611eeb9162093a809174010000000000000000000000000000000000000000900416612aab565b611efb9063ffffffff1683612ad7565b115b949350505050565b6000611f67826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661206f9092919063ffffffff16565b8051909150156107a75780806020019051810190611f8591906129c0565b6107a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610853565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526109f79085907f23b872dd000000000000000000000000000000000000000000000000000000009060840161138f565b6060611efd848460008585843b6120e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610853565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161210b9190612bdb565b60006040518083038185875af1925050503d8060008114612148576040519150601f19603f3d011682016040523d82523d6000602084013e61214d565b606091505b509150915061215d828286612168565b979650505050505050565b60608315612177575081610fa6565b8251156121875782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108539190612bf7565b828054828255906000526020600020908101928215612235579160200282015b8281111561223557825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9091161782556020909201916001909101906121db565b50612241929150612245565b5090565b5b808211156122415760008155600101612246565b73ffffffffffffffffffffffffffffffffffffffff8116811461227c57600080fd5b50565b803561228a8161225a565b919050565b600080604083850312156122a257600080fd5b82356122ad8161225a565b946020939093013593505050565b6000602082840312156122cd57600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561231a57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016122e8565b509495945050505050565b805173ffffffffffffffffffffffffffffffffffffffff16825260006101a0602083015161236b602086018273ffffffffffffffffffffffffffffffffffffffff169052565b506040830151816040860152612383828601826122d4565b9150506060830151606085015260808301516123a7608086018263ffffffff169052565b5060a08301516123bf60a086018263ffffffff169052565b5060c08301516123d760c086018263ffffffff169052565b5060e08301516123ef60e086018263ffffffff169052565b506101008381015163ffffffff90811691860191909152610120808501518216908601526101408085015182169086015261016080850151909116908501526101808084015173ffffffffffffffffffffffffffffffffffffffff811682870152611333565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156124c8577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526124b6858351612325565b9450928501929085019060010161247c565b5092979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516101a0810167ffffffffffffffff81118282101715612528576125286124d5565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612575576125756124d5565b604052919050565b600067ffffffffffffffff821115612597576125976124d5565b5060051b60200190565b600080604083850312156125b457600080fd5b823567ffffffffffffffff8111156125cb57600080fd5b8301601f810185136125dc57600080fd5b803560206125f16125ec8361257d565b61252e565b82815260059290921b8301810191818101908884111561261057600080fd5b938201935b838510156126375784356126288161225a565b82529382019390820190612615565b9550612646905086820161227f565b93505050509250929050565b60008060006060848603121561266757600080fd5b83356126728161225a565b925060208401356126828161225a565b929592945050506040919091013590565b803563ffffffff8116811461228a57600080fd5b6000602082840312156126b957600080fd5b610fa682612693565b6000602082840312156126d457600080fd5b8135610fa68161225a565b600082601f8301126126f057600080fd5b813560206127006125ec8361257d565b82815260059290921b8401810191818101908684111561271f57600080fd5b8286015b848110156127435780356127368161225a565b8352918301918301612723565b509695505050505050565b60006101a0828403121561276157600080fd5b612769612504565b90506127748261227f565b81526127826020830161227f565b6020820152604082013567ffffffffffffffff8111156127a157600080fd5b6127ad848285016126df565b604083015250606082013560608201526127c960808301612693565b60808201526127da60a08301612693565b60a08201526127eb60c08301612693565b60c08201526127fc60e08301612693565b60e082015261010061280f818401612693565b90820152610120612821838201612693565b90820152610140612833838201612693565b90820152610160612845838201612693565b9082015261018061285783820161227f565b9082015292915050565b6000602080838503121561287457600080fd5b823567ffffffffffffffff8082111561288c57600080fd5b818501915085601f8301126128a057600080fd5b81356128ae6125ec8261257d565b81815260059190911b830184019084810190888311156128cd57600080fd5b8585015b83811015612905578035858111156128e95760008081fd5b6128f78b89838a010161274e565b8452509186019186016128d1565b5098975050505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561294a5783518352928401929184019160010161292e565b50909695505050505050565b60006020828403121561296857600080fd5b813567ffffffffffffffff81111561297f57600080fd5b611efd8482850161274e565b6000806040838503121561299e57600080fd5b82356129a98161225a565b91506129b760208401612693565b90509250929050565b6000602082840312156129d257600080fd5b81518015158114610fa657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215612a2357600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600063ffffffff80841680612a9f57612a9f612a2a565b92169190910492915050565b600063ffffffff80831681851681830481118215151615612ace57612ace612a59565b02949350505050565b60008219821115612aea57612aea612a59565b500190565b600063ffffffff808316818516808303821115612b0e57612b0e612a59565b01949350505050565b600060208284031215612b2957600080fd5b8151610fa68161225a565b600082821015612b4657612b46612a59565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612b8357612b83612a59565b500290565b600082612b9757612b97612a2a565b500490565b602081526000610fa66020830184612325565b60005b83811015612bca578181015183820152602001612bb2565b838111156109f75750506000910152565b60008251612bed818460208701612baf565b9190910192915050565b6020815260008251806020840152612c16816040850160208701612baf565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220c43c15b35a53e70bddbd9ba197f178c0eb7c805beed9a4e5bb7ef0552a5da97664736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c80634699fb4a116100b25780638ac5907b116100815780639bd2776e116100665780639bd2776e1461032d578063a70b9f0c14610340578063feba1ed21461035f57600080fd5b80638ac5907b146103045780639af1d35a1461032457600080fd5b80634699fb4a1461029d57806350930332146102b0578063677da670146102c35780637b509055146102e357600080fd5b80631794bb3c116101095780632e17b590116100ee5780632e17b5901461026f5780633d18678e1461028257806345b35f561461029557600080fd5b80631794bb3c146102115780631b0c24d51461022457600080fd5b80630241d8f91461013b57806310d666771461015057806310ee535f146101e9578063141df503146101fe575b600080fd5b61014e61014936600461228f565b61037f565b005b61016361015e3660046122bb565b6104b2565b6040805173ffffffffffffffffffffffffffffffffffffffff9d8e1681529b8d1660208d01528b019990995263ffffffff97881660608b015295871660808a015293861660a089015291851660c0880152841660e08701528316610100860152821661012085015216610140830152909116610160820152610180015b60405180910390f35b6101f16105b9565b6040516101e09190612455565b61014e61020c3660046125a1565b6105d1565b61014e61021f366004612652565b6107ac565b60005461024a9062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101e0565b6101f161027d3660046126a7565b6109fd565b61014e6102903660046122bb565b610a11565b6101f1610b56565b61014e6102ab3660046126c2565b610d4b565b6101f16102be3660046126c2565b610ed4565b6102d66102d1366004612861565b610ee8565b6040516101e09190612912565b6102f66102f1366004612956565b610f8c565b6040519081526020016101e0565b60015461024a9073ffffffffffffffffffffffffffffffffffffffff1681565b6102f660035481565b6101f161033b36600461298b565b610f97565b61034a62093a8081565b60405163ffffffff90911681526020016101e0565b6102f661036d3660046126c2565b60046020526000908152604090205481565b6000546040517f521d4de90000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063521d4de990602401602060405180830381865afa1580156103f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041691906129c0565b61044c576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526004602052604090819020839055517fab1d37d0b21937f334fc4164d147abbfdbfd7ef37ab9ea0ae73f2a58ffb7f1cc906104a69084815260200190565b60405180910390a25050565b600281815481106104c257600080fd5b60009182526020909120600690910201805460018201546003830154600484015460059094015473ffffffffffffffffffffffffffffffffffffffff938416955091831693909263ffffffff8083169364010000000084048216936801000000000000000081048316936c0100000000000000000000000082048416937001000000000000000000000000000000008304811693740100000000000000000000000000000000000000008404821693780100000000000000000000000000000000000000000000000081048316937c010000000000000000000000000000000000000000000000000000000090910490921691168c565b60606105cc6105c742610fb3565b610fcd565b905090565b6000546040517f521d4de90000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063521d4de990602401602060405180830381865afa158015610644573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066891906129c0565b61069e576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b82518110156107a75760008382815181106106be576106be6129e2565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015610734573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107589190612a11565b905061079e8382868581518110610771576107716129e2565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1661133d9092919063ffffffff16565b506001016106a1565b505050565b600054610100900460ff166107c75760005460ff16156107cb565b303b155b61085c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff1615801561089b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b73ffffffffffffffffffffffffffffffffffffffff841615806108d2575073ffffffffffffffffffffffffffffffffffffffff8316155b15610909576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b633b9aca00821115610947576040517fd252903400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85811691909117909155600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000092871692909202919091179055600382905580156109f757600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50505050565b6060610a0b6105c783610fb3565b92915050565b6000546040517f521d4de90000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063521d4de990602401602060405180830381865afa158015610a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa891906129c0565b610ade576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b633b9aca008110610b1b576040517fd252903400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60038190556040518181527f3346af6da1932164d501f2ec28f8c5d686db5828a36b77f2da4332d89184fe7b9060200160405180910390a150565b60606002805480602002602001604051908101604052809291908181526020016000905b82821015610d42576000848152602090819020604080516101a08101825260068602909201805473ffffffffffffffffffffffffffffffffffffffff9081168452600182015416838501526002810180548351818702810187018552818152949592949386019392830182828015610c2857602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610bfd575b50505091835250506003820154602080830191909152600483015463ffffffff8082166040850152640100000000820481166060850152680100000000000000008204811660808501526c010000000000000000000000008204811660a08501527001000000000000000000000000000000008204811660c0850152740100000000000000000000000000000000000000008204811660e08501527801000000000000000000000000000000000000000000000000820481166101008501527c01000000000000000000000000000000000000000000000000000000009091041661012083015260059092015473ffffffffffffffffffffffffffffffffffffffff16610140909101529082526001929092019101610b7a565b50505050905090565b6000546040517f521d4de90000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063521d4de990602401602060405180830381865afa158015610dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de291906129c0565b610e18576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116610e65576040517fd252903400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f02c91fad8ac6d11b7306ffc6e87ccfe040a894cbdb877be2eeab560fb8a4556a90600090a250565b6060610a0b82610ee342610fb3565b611411565b60606000825167ffffffffffffffff811115610f0657610f066124d5565b604051908082528060200260200182016040528015610f2f578160200160208202803683370190505b50905060005b8351811015610f8557610f60848281518110610f5357610f536129e2565b60200260200101516117d0565b828281518110610f7257610f726129e2565b6020908102919091010152600101610f35565b5092915050565b6000610a0b826117d0565b6060610fa683610ee384610fb3565b9392505050565b3b151590565b600062093a80610fc38184612a88565b610a0b9190612aab565b60606000805b60025463ffffffff8216101561103457600060028263ffffffff1681548110610ffe57610ffe6129e2565b906000526020600020906006020190506110188186611e85565b1561102b57611028600184612ad7565b92505b50600101610fd3565b5060008167ffffffffffffffff811115611050576110506124d5565b60405190808252806020026020018201604052801561110657816020015b604080516101a0810182526000808252602080830182905260609383018490529282018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820181905261018082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161106e5790505b5090506000805b60025463ffffffff821610801561112357508382105b1561133357600060028263ffffffff1681548110611143576111436129e2565b9060005260206000209060060201905061115d8188611e85565b1561132a57604080516101a081018252825473ffffffffffffffffffffffffffffffffffffffff908116825260018401541660208083019190915260028401805484518184028101840186528181529394869490860193909291908301828280156111fe57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116111d3575b505050918352505060038201546020820152600482015463ffffffff8082166040840152640100000000820481166060840152680100000000000000008204811660808401526c010000000000000000000000008204811660a08401527001000000000000000000000000000000008204811660c0840152740100000000000000000000000000000000000000008204811660e08401527801000000000000000000000000000000000000000000000000820481166101008401527c01000000000000000000000000000000000000000000000000000000009091041661012082015260059091015473ffffffffffffffffffffffffffffffffffffffff16610140909101528451859085908110611318576113186129e2565b60200260200101819052508260010192505b5060010161110d565b5090949350505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526107a79084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611f05565b60606000805b60025463ffffffff8216101561149f57600060028263ffffffff1681548110611442576114426129e2565b60009182526020909120600690910201805490915073ffffffffffffffffffffffffffffffffffffffff878116911614801561148357506114838186611e85565b1561149657611493600184612ad7565b92505b50600101611417565b5060008167ffffffffffffffff8111156114bb576114bb6124d5565b60405190808252806020026020018201604052801561157157816020015b604080516101a0810182526000808252602080830182905260609383018490529282018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820181905261018082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816114d95790505b5090506000805b60025463ffffffff821610801561158e57508382105b156117c557600060028263ffffffff16815481106115ae576115ae6129e2565b60009182526020909120600690910201805490915073ffffffffffffffffffffffffffffffffffffffff89811691161480156115ef57506115ef8188611e85565b156117bc57604080516101a081018252825473ffffffffffffffffffffffffffffffffffffffff9081168252600184015416602080830191909152600284018054845181840281018401865281815293948694908601939092919083018282801561169057602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611665575b505050918352505060038201546020820152600482015463ffffffff8082166040840152640100000000820481166060840152680100000000000000008204811660808401526c010000000000000000000000008204811660a08401527001000000000000000000000000000000008204811660c0840152740100000000000000000000000000000000000000008204811660e08401527801000000000000000000000000000000000000000000000000820481166101008401527c01000000000000000000000000000000000000000000000000000000009091041661012082015260059091015473ffffffffffffffffffffffffffffffffffffffff166101409091015284518590859081106117aa576117aa6129e2565b60200260200101819052508260010192505b50600101611578565b509095945050505050565b6000806117e1836101000151610fb3565b63ffffffff81166101008501529050426117fe62093a8083612aef565b63ffffffff161080611819575061012083015163ffffffff16155b8061182657506060830151155b8061185b57508260a0015183608001518460c001516118459190612aef565b61184f9190612aef565b63ffffffff1661271014155b80611897575061018083015173ffffffffffffffffffffffffffffffffffffffff1615801590611897575061271083610160015163ffffffff16105b156118ce576040517f28829e8200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608301513360009081526004602052604090205490925073e0b52e49357fd4daf2c15e02058dce6bc0057db490633b9aca00811080156119ad57508173ffffffffffffffffffffffffffffffffffffffff16856000015173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611970573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119949190612b17565b73ffffffffffffffffffffffffffffffffffffffff1614155b8015611a5757508173ffffffffffffffffffffffffffffffffffffffff16856000015173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3e9190612b17565b73ffffffffffffffffffffffffffffffffffffffff1614155b15611aea576000633b9aca00611a6d8382612b34565b600354611a7a9190612b4b565b611a849190612b88565b90506000633b9aca00611a978382612b34565b611aa19088612b4b565b611aab9190612b88565b9050611adf3330611abc848a612b34565b60208b015173ffffffffffffffffffffffffffffffffffffffff16929190612011565b606087018190529450505b6001546020860151611b189173ffffffffffffffffffffffffffffffffffffffff9182169133911687612011565b6002805460018101825560009190915285517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace600690920291820180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff9384161782556020808a01517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf8601805490931694169390931790556040880151805189949293611c03937f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad0019201906121bb565b5060608201516003820155608082015160048201805460a085015160c086015160e08701516101008801516101208901516101408a01516101608b015163ffffffff998a167fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090981697909717640100000000968a1696909602959095177fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff1668010000000000000000948916949094027fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff16939093176c0100000000000000000000000092881692909202919091177fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff16700100000000000000000000000000000000918716919091027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff161774010000000000000000000000000000000000000000918616919091021777ffffffffffffffffffffffffffffffffffffffffffffffff167801000000000000000000000000000000000000000000000000918516919091027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16177c0100000000000000000000000000000000000000000000000000000000939091169290920291909117905561018090910151600590910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905560405133907fca81b800657138840b14496c52bd3bb0dd06010a4bf4e5f2b668f0240dd53ab890611e75908890612b9c565b60405180910390a2505050919050565b600482015460009063ffffffff70010000000000000000000000000000000090910481169083168111801590611efd5750600484015463ffffffff80851691611eeb9162093a809174010000000000000000000000000000000000000000900416612aab565b611efb9063ffffffff1683612ad7565b115b949350505050565b6000611f67826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661206f9092919063ffffffff16565b8051909150156107a75780806020019051810190611f8591906129c0565b6107a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610853565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526109f79085907f23b872dd000000000000000000000000000000000000000000000000000000009060840161138f565b6060611efd848460008585843b6120e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610853565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161210b9190612bdb565b60006040518083038185875af1925050503d8060008114612148576040519150601f19603f3d011682016040523d82523d6000602084013e61214d565b606091505b509150915061215d828286612168565b979650505050505050565b60608315612177575081610fa6565b8251156121875782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108539190612bf7565b828054828255906000526020600020908101928215612235579160200282015b8281111561223557825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9091161782556020909201916001909101906121db565b50612241929150612245565b5090565b5b808211156122415760008155600101612246565b73ffffffffffffffffffffffffffffffffffffffff8116811461227c57600080fd5b50565b803561228a8161225a565b919050565b600080604083850312156122a257600080fd5b82356122ad8161225a565b946020939093013593505050565b6000602082840312156122cd57600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561231a57815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016122e8565b509495945050505050565b805173ffffffffffffffffffffffffffffffffffffffff16825260006101a0602083015161236b602086018273ffffffffffffffffffffffffffffffffffffffff169052565b506040830151816040860152612383828601826122d4565b9150506060830151606085015260808301516123a7608086018263ffffffff169052565b5060a08301516123bf60a086018263ffffffff169052565b5060c08301516123d760c086018263ffffffff169052565b5060e08301516123ef60e086018263ffffffff169052565b506101008381015163ffffffff90811691860191909152610120808501518216908601526101408085015182169086015261016080850151909116908501526101808084015173ffffffffffffffffffffffffffffffffffffffff811682870152611333565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156124c8577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526124b6858351612325565b9450928501929085019060010161247c565b5092979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516101a0810167ffffffffffffffff81118282101715612528576125286124d5565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612575576125756124d5565b604052919050565b600067ffffffffffffffff821115612597576125976124d5565b5060051b60200190565b600080604083850312156125b457600080fd5b823567ffffffffffffffff8111156125cb57600080fd5b8301601f810185136125dc57600080fd5b803560206125f16125ec8361257d565b61252e565b82815260059290921b8301810191818101908884111561261057600080fd5b938201935b838510156126375784356126288161225a565b82529382019390820190612615565b9550612646905086820161227f565b93505050509250929050565b60008060006060848603121561266757600080fd5b83356126728161225a565b925060208401356126828161225a565b929592945050506040919091013590565b803563ffffffff8116811461228a57600080fd5b6000602082840312156126b957600080fd5b610fa682612693565b6000602082840312156126d457600080fd5b8135610fa68161225a565b600082601f8301126126f057600080fd5b813560206127006125ec8361257d565b82815260059290921b8401810191818101908684111561271f57600080fd5b8286015b848110156127435780356127368161225a565b8352918301918301612723565b509695505050505050565b60006101a0828403121561276157600080fd5b612769612504565b90506127748261227f565b81526127826020830161227f565b6020820152604082013567ffffffffffffffff8111156127a157600080fd5b6127ad848285016126df565b604083015250606082013560608201526127c960808301612693565b60808201526127da60a08301612693565b60a08201526127eb60c08301612693565b60c08201526127fc60e08301612693565b60e082015261010061280f818401612693565b90820152610120612821838201612693565b90820152610140612833838201612693565b90820152610160612845838201612693565b9082015261018061285783820161227f565b9082015292915050565b6000602080838503121561287457600080fd5b823567ffffffffffffffff8082111561288c57600080fd5b818501915085601f8301126128a057600080fd5b81356128ae6125ec8261257d565b81815260059190911b830184019084810190888311156128cd57600080fd5b8585015b83811015612905578035858111156128e95760008081fd5b6128f78b89838a010161274e565b8452509186019186016128d1565b5098975050505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561294a5783518352928401929184019160010161292e565b50909695505050505050565b60006020828403121561296857600080fd5b813567ffffffffffffffff81111561297f57600080fd5b611efd8482850161274e565b6000806040838503121561299e57600080fd5b82356129a98161225a565b91506129b760208401612693565b90509250929050565b6000602082840312156129d257600080fd5b81518015158114610fa657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215612a2357600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600063ffffffff80841680612a9f57612a9f612a2a565b92169190910492915050565b600063ffffffff80831681851681830481118215151615612ace57612ace612a59565b02949350505050565b60008219821115612aea57612aea612a59565b500190565b600063ffffffff808316818516808303821115612b0e57612b0e612a59565b01949350505050565b600060208284031215612b2957600080fd5b8151610fa68161225a565b600082821015612b4657612b46612a59565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612b8357612b83612a59565b500290565b600082612b9757612b97612a2a565b500490565b602081526000610fa66020830184612325565b60005b83811015612bca578181015183820152602001612bb2565b838111156109f75750506000910152565b60008251612bed818460208701612baf565b9190910192915050565b6020815260008251806020840152612c16816040850160208701612baf565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220c43c15b35a53e70bddbd9ba197f178c0eb7c805beed9a4e5bb7ef0552a5da97664736f6c634300080c0033",
  "devdoc": {
    "author": "Angle Labs, Inc.",
    "kind": "dev",
    "methods": {
      "depositReward((address,address,address[],uint256,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32,address))": {
        "details": "It's important to make sure that the address specified as a UniV3 pool is effectively a pool otherwise they will not be handled by the distribution script and rewards may be lostThe `positionWrappers` specified in the `reward` struct need to be supported by the scriptIf the pool incentivized contains agEUR, then no fees are taken on the rewards",
        "returns": {
          "rewardAmount": "How many rewards are actually taken into consideration in the contract"
        }
      },
      "depositRewards((address,address,address[],uint256,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32,address)[])": {
        "returns": {
          "_0": "List of all the reward amounts actually deposited for each `reward` in the `rewards` list"
        }
      }
    },
    "title": "MerkleRewardManagerPolygon",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "EPOCH_DURATION()": {
        "notice": "Epoch duration"
      },
      "coreBorrow()": {
        "notice": "`CoreBorrow` contract handling access control"
      },
      "depositReward((address,address,address[],uint256,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32,address))": {
        "notice": "Deposits a reward `reward` to incentivize a given UniswapV3 pool for a specific period of time"
      },
      "depositRewards((address,address,address[],uint256,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32,address)[])": {
        "notice": "Same as the function above but for multiple rewards at once"
      },
      "feeRebate(address)": {
        "notice": "Maps an address to the rebate"
      },
      "fees()": {
        "notice": "Value (in base 10**9) of the fees taken when adding rewards for a pool which does not have agEUR in it"
      },
      "getActivePoolRewards(address)": {
        "notice": "Returns the list of all currently active rewards for a specific UniswapV3 pool"
      },
      "getActiveRewards()": {
        "notice": "Returns the list of all currently active rewards on UniswapV3 pool"
      },
      "getAllRewards()": {
        "notice": "Returns the list of all rewards ever distributed or to be distributed"
      },
      "getPoolRewardsForEpoch(address,uint32)": {
        "notice": "Returns the list of all the rewards that were or that are going to be live at a specific epoch and for a specific pool"
      },
      "getRewardsForEpoch(uint32)": {
        "notice": "Returns the list of all the rewards that were or that are going to be live at a specific epoch"
      },
      "merkleRootDistributor()": {
        "notice": "User contract for distributing rewards"
      },
      "recoverFees(address[],address)": {
        "notice": "Recovers fees accrued on the contract for a list of `tokens`"
      },
      "rewardList(uint256)": {
        "notice": "List of all rewards ever distributed or to be distributed in the contract"
      },
      "setFees(uint256)": {
        "notice": "Sets the fees on deposit"
      },
      "setNewMerkleRootDistributor(address)": {
        "notice": "Sets a new `merkleRootDistributor` to which rewards should be distributed"
      },
      "setUserFeeRebate(address,uint256)": {
        "notice": "Sets fee rebates for a given user"
      }
    },
    "notice": "Polygon implementation of the MerkleRewardManager contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 772,
        "contract": "contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol:MerkleRewardManagerPolygon",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 775,
        "contract": "contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol:MerkleRewardManagerPolygon",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 18284,
        "contract": "contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol:MerkleRewardManagerPolygon",
        "label": "coreBorrow",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ICoreBorrow)14294"
      },
      {
        "astId": 18287,
        "contract": "contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol:MerkleRewardManagerPolygon",
        "label": "merkleRootDistributor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 18292,
        "contract": "contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol:MerkleRewardManagerPolygon",
        "label": "rewardList",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(RewardDistribution)18265_storage)dyn_storage"
      },
      {
        "astId": 18295,
        "contract": "contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol:MerkleRewardManagerPolygon",
        "label": "fees",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 18300,
        "contract": "contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol:MerkleRewardManagerPolygon",
        "label": "feeRebate",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18304,
        "contract": "contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol:MerkleRewardManagerPolygon",
        "label": "__gap",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint256)47_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RewardDistribution)18265_storage)dyn_storage": {
        "base": "t_struct(RewardDistribution)18265_storage",
        "encoding": "dynamic_array",
        "label": "struct RewardDistribution[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICoreBorrow)14294": {
        "encoding": "inplace",
        "label": "contract ICoreBorrow",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RewardDistribution)18265_storage": {
        "encoding": "inplace",
        "label": "struct RewardDistribution",
        "members": [
          {
            "astId": 18239,
            "contract": "contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol:MerkleRewardManagerPolygon",
            "label": "uniV3Pool",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 18241,
            "contract": "contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol:MerkleRewardManagerPolygon",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 18244,
            "contract": "contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol:MerkleRewardManagerPolygon",
            "label": "positionWrappers",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 18246,
            "contract": "contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol:MerkleRewardManagerPolygon",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 18248,
            "contract": "contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol:MerkleRewardManagerPolygon",
            "label": "propToken1",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 18250,
            "contract": "contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol:MerkleRewardManagerPolygon",
            "label": "propToken2",
            "offset": 4,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 18252,
            "contract": "contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol:MerkleRewardManagerPolygon",
            "label": "propFees",
            "offset": 8,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 18254,
            "contract": "contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol:MerkleRewardManagerPolygon",
            "label": "outOfRangeIncentivized",
            "offset": 12,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 18256,
            "contract": "contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol:MerkleRewardManagerPolygon",
            "label": "epochStart",
            "offset": 16,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 18258,
            "contract": "contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol:MerkleRewardManagerPolygon",
            "label": "numEpoch",
            "offset": 20,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 18260,
            "contract": "contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol:MerkleRewardManagerPolygon",
            "label": "incentivizeOutOfRange",
            "offset": 24,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 18262,
            "contract": "contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol:MerkleRewardManagerPolygon",
            "label": "boostedReward",
            "offset": 28,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 18264,
            "contract": "contracts/merkleRootDistributor/implementations/MerkleRewardManagerPolygon.sol:MerkleRewardManagerPolygon",
            "label": "boostingAddress",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}