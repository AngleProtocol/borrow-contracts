{
  "address": "0x516735bF9a517fc66F53a798B1910498a8a621c5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICoreBorrow",
          "name": "_core",
          "type": "address"
        },
        {
          "internalType": "contract IUniswapV3Router",
          "name": "_uniV3Router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oneInch",
          "type": "address"
        },
        {
          "internalType": "contract IAngleRouterSidechain",
          "name": "_angleRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptyReturnMessage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncompatibleLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernorOrGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooSmallAmountOut",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "angleRouter",
      "outputs": [
        {
          "internalType": "contract IAngleRouterSidechain",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "spenders",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "changeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "contract ICoreBorrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oneInch",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "inToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "outToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outTokenRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "outTokenOwed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inTokenObtained",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniV3Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV3Router",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfd1c5e311f728287b825cd0b8c551ee5b509a9a13d670f0f3f468524ca695235",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0x516735bF9a517fc66F53a798B1910498a8a621c5",
    "transactionIndex": 1,
    "gasUsed": "1573631",
    "logsBloom": "0x
    "blockHash": "0x80bc5e971cdb1c8bc6574bf45dd9d3c6b4a1f9e367a40fae6131f5795757880f",
    "transactionHash": "0xfd1c5e311f728287b825cd0b8c551ee5b509a9a13d670f0f3f468524ca695235",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 36777340,
        "transactionHash": "0xfd1c5e311f728287b825cd0b8c551ee5b509a9a13d670f0f3f468524ca695235",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fda462548ce04282f4b6d6619823a7c64fdc0185",
          "0x000000000000000000000000bdbd4347b082d9d6bdf2da4555a37ce52a2e2120"
        ],
        "data": "0x00000000000000000000000000000000000000000000000003c493a1153d7652000000000000000000000000000000000000000000000004913bc26b44bcd18500000000000000000000000000000000000000000000090c82c6e72234768de30000000000000000000000000000000000000000000000048d772eca2f7f5b3300000000000000000000000000000000000000000000090c868b7ac349b40435",
        "logIndex": 2,
        "blockHash": "0x80bc5e971cdb1c8bc6574bf45dd9d3c6b4a1f9e367a40fae6131f5795757880f"
      }
    ],
    "blockNumber": 36777340,
    "cumulativeGasUsed": "1630949",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x78754109cb73772d70A6560297037657C2AF51b8",
    "0xE592427A0AEce92De3Edee1F18E0157C05861564",
    "0x1111111254eeb25477b68fb85ed929f73a960582",
    "0x595AB88628CD1Af06706E25f10c485B651C47aa8"
  ],
  "numDeployments": 1,
  "solcInputHash": "891a411f4f277461fb1354bee4d4be13",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICoreBorrow\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV3Router\",\"name\":\"_uniV3Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oneInch\",\"type\":\"address\"},{\"internalType\":\"contract IAngleRouterSidechain\",\"name\":\"_angleRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyReturnMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncompatibleLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernorOrGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooSmallAmountOut\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"angleRouter\",\"outputs\":[{\"internalType\":\"contract IAngleRouterSidechain\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"changeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICoreBorrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneInch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"inToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"outToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outTokenRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outTokenOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inTokenObtained\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV3Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Labs, Inc.\",\"kind\":\"dev\",\"methods\":{\"changeAllowance(address[],address[],uint256[])\":{\"params\":{\"amounts\":\"Amounts to allow\",\"spenders\":\"Addresses to allow transfer\",\"tokens\":\"Addresses of the tokens to allow\"}},\"constructor\":{\"params\":{\"_angleRouter\":\"AngleRouter contract address\",\"_core\":\"Core address\",\"_oneInch\":\"1inch Router address\",\"_uniV3Router\":\"UniswapV3 Router address\"}},\"swap(address,address,address,uint256,uint256,bytes)\":{\"details\":\"This function swaps the `inToken` to the `outToken` by doing a UniV3 swap, a 1inch swap or by interacting with the `AngleRouter` contractOne slippage check is performed at the end of the callIn this implementation, the function tries to make sure that the `outTokenRecipient` address has at the end of the call `outTokenOwed`, leftover tokens are sent to a `to` address which by default is the `outTokenRecipient`\",\"params\":{\"data\":\"Extra data needed (to encode Uniswap swaps for instance)\",\"inToken\":\"Address of the token received\",\"inTokenObtained\":\"Amount of collateral obtained by a related address prior to the call to this function\",\"outToken\":\"Address of the token to obtain\",\"outTokenOwed\":\"Minimum amount of outToken the `outTokenRecipient` address should have at the end of the call\",\"outTokenRecipient\":\"Address to which the outToken should be sent\"}}},\"title\":\"Swapper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"angleRouter()\":{\"notice\":\"AngleRouter\"},\"changeAllowance(address[],address[],uint256[])\":{\"notice\":\"Changes allowances of this contract for different tokens\"},\"constructor\":{\"notice\":\"Constructor of the contract\"},\"core()\":{\"notice\":\"Reference to the `CoreBorrow` contract of the module which handles all AccessControl logic\"},\"oneInch()\":{\"notice\":\"1inch Router\"},\"swap(address,address,address,uint256,uint256,bytes)\":{\"notice\":\"Notifies a contract that an address should be given `outToken` from `inToken`\"},\"uniV3Router()\":{\"notice\":\"Uniswap Router contract\"}},\"notice\":\"Swapper contract facilitating interactions with Angle VaultManager contracts, notably liquidation and leverage transactions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/swapper/Swapper.sol\":\"Swapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/interfaces/IAngleRouterSidechain.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @notice Action types\\nenum ActionType {\\n    transfer,\\n    wrap,\\n    wrapNative,\\n    sweep,\\n    sweepNative,\\n    unwrap,\\n    unwrapNative,\\n    swapIn,\\n    swapOut,\\n    uniswapV3,\\n    oneInch,\\n    claimRewards,\\n    gaugeDeposit,\\n    borrower\\n}\\n\\n/// @notice Data needed to get permits\\nstruct PermitType {\\n    address token;\\n    address owner;\\n    uint256 value;\\n    uint256 deadline;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n}\\n\\n/// @title IAngleRouterSidechain\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the `AngleRouter` contract on other chains\\ninterface IAngleRouterSidechain {\\n    function mixer(\\n        PermitType[] memory paramsPermit,\\n        ActionType[] memory actions,\\n        bytes[] calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xab21ec26af51df28193d5f2850b9f2a95b4d78acd84f408f3c9d30963a948267\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICoreBorrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title ICoreBorrow\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the `CoreBorrow` contract\\n/// @dev This interface only contains functions of the `CoreBorrow` contract which are called by other contracts\\n/// of this module\\ninterface ICoreBorrow {\\n    /// @notice Checks if an address corresponds to a treasury of a stablecoin with a flash loan\\n    /// module initialized on it\\n    /// @param treasury Address to check\\n    /// @return Whether the address has the `FLASHLOANER_TREASURY_ROLE` or not\\n    function isFlashLoanerTreasury(address treasury) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GOVERNOR_ROLE` or not\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor or a guardian of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GUARDIAN_ROLE` or not\\n    /// @dev Governance should make sure when adding a governor to also give this governor the guardian\\n    /// role by calling the `addGovernor` function\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x10249210cbf522775f040baf981d7d037472168ce2746d87473ac7c29a34e62e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title ISwapper\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for Swapper contracts\\n/// @dev This interface defines the key functions `Swapper` contracts should have when interacting with\\n/// Angle\\ninterface ISwapper {\\n    /// @notice Notifies a contract that an address should be given `outToken` from `inToken`\\n    /// @param inToken Address of the token received\\n    /// @param outToken Address of the token to obtain\\n    /// @param outTokenRecipient Address to which the outToken should be sent\\n    /// @param outTokenOwed Minimum amount of outToken the `outTokenRecipient` address should have at the end of the call\\n    /// @param inTokenObtained Amount of collateral obtained by a related address prior\\n    /// to the call to this function\\n    /// @param data Extra data needed (to encode Uniswap swaps for instance)\\n    function swap(\\n        IERC20 inToken,\\n        IERC20 outToken,\\n        address outTokenRecipient,\\n        uint256 outTokenOwed,\\n        uint256 inTokenObtained,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2c18883cbff92d1e558e670480f5e2f517bce8c95c202cc3f6602ac276222609\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/lido/IWStETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\n/// @title IWStETH\\n/// @author Angle Labs, Inc.\\n/// @notice Interface for the `WStETH` contract\\n/// @dev This interface only contains functions of the `WStETH` which are called by other contracts\\n/// of this module\\ninterface IWStETH {\\n    function wrap(uint256 _stETHAmount) external returns (uint256);\\n\\n    function stETH() external view returns (address);\\n}\\n\",\"keccak256\":\"0x17034d16c0508aed42ceeb96a34d177a9bb63b18515d9a938a752cfab69c3929\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/uniswap/IUniswapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.12;\\n\\nstruct ExactInputParams {\\n    bytes path;\\n    address recipient;\\n    uint256 deadline;\\n    uint256 amountIn;\\n    uint256 amountOutMinimum;\\n}\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface IUniswapV3Router {\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n}\\n\\n/// @title Router for price estimation functionality\\n/// @notice Functions for getting the price of one token with respect to another using Uniswap V2\\n/// @dev This interface is only used for non critical elements of the protocol\\ninterface IUniswapV2Router {\\n    /// @notice Given an input asset amount, returns the maximum output amount of the\\n    /// other asset (accounting for fees) given reserves.\\n    /// @param path Addresses of the pools used to get prices\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 swapAmount,\\n        uint256 minExpected,\\n        address[] calldata path,\\n        address receiver,\\n        uint256 swapDeadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x83ca317f5cc825b9f7acac75ac74a6a8db7ba9dcc2264f3f56f9fc404d36ed3a\",\"license\":\"GPL-3.0\"},\"contracts/swapper/Swapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n                  *                                                  \\u2588                              \\n                *****                                               \\u2593\\u2593\\u2593                             \\n                  *                                               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                         \\n                                   *            ///.           \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                       \\n                                 *****        ////////            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593                          \\n                                   *       /////////////            \\u2593\\u2593\\u2593                             \\n                     \\u2593\\u2593                  //////////////////          \\u2588         \\u2593\\u2593                   \\n                   \\u2593\\u2593  \\u2593\\u2593             ///////////////////////                \\u2593\\u2593   \\u2593\\u2593                \\n                \\u2593\\u2593       \\u2593\\u2593        ////////////////////////////           \\u2593\\u2593        \\u2593\\u2593              \\n              \\u2593\\u2593            \\u2593\\u2593    /////////\\u2593\\u2593\\u2593///////\\u2593\\u2593\\u2593/////////       \\u2593\\u2593             \\u2593\\u2593            \\n           \\u2593\\u2593                 ,////////////////////////////////////// \\u2593\\u2593                 \\u2593\\u2593         \\n        \\u2593\\u2593                  //////////////////////////////////////////                     \\u2593\\u2593      \\n      \\u2593\\u2593                  //////////////////////\\u2593\\u2593\\u2593\\u2593/////////////////////                          \\n                       ,////////////////////////////////////////////////////                        \\n                    .//////////////////////////////////////////////////////////                     \\n                     .//////////////////////////\\u2588\\u2588.,//////////////////////////\\u2588                     \\n                       .//////////////////////\\u2588\\u2588\\u2588\\u2588..,./////////////////////\\u2588\\u2588                       \\n                        ...////////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588.....,.////////////////\\u2588\\u2588\\u2588                        \\n                          ,.,////////////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588 ........,///////////\\u2588\\u2588\\u2588\\u2588                          \\n                            .,.,//////\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588      ,.......///////\\u2588\\u2588\\u2588\\u2588                            \\n                               ,..//\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588           ........./\\u2588\\u2588\\u2588\\u2588                               \\n                                 ..,\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588                .....,\\u2588\\u2588\\u2588                                 \\n                                    .\\u2588\\u2588                     ,.,\\u2588                                    \\n                                                                                                    \\n                                                                                                    \\n                                                                                                    \\n               \\u2593\\u2593            \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n             \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593               \\u2593\\u2593               \\u2593\\u2593   \\u2593\\u2593\\u2593\\u2593         \\n           \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593        \\u2593\\u2593               \\u2593\\u2593\\u2593\\u2593\\u2593             \\n          \\u2593\\u2593\\u2593        \\u2593\\u2593      \\u2593\\u2593\\u2593    \\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593        \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593       \\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593\\u2593          \\n*/\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/IAngleRouterSidechain.sol\\\";\\nimport \\\"../interfaces/ICoreBorrow.sol\\\";\\nimport \\\"../interfaces/ISwapper.sol\\\";\\nimport \\\"../interfaces/external/lido/IWStETH.sol\\\";\\nimport \\\"../interfaces/external/uniswap/IUniswapRouter.sol\\\";\\n\\n// ==================================== ENUM ===================================\\n\\n/// @notice All possible swaps\\nenum SwapType {\\n    UniswapV3,\\n    oneInch,\\n    AngleRouter,\\n    Leverage,\\n    None\\n}\\n\\n/// @title Swapper\\n/// @author Angle Labs, Inc.\\n/// @notice Swapper contract facilitating interactions with Angle VaultManager contracts, notably\\n/// liquidation and leverage transactions\\ncontract Swapper is ISwapper {\\n    using SafeERC20 for IERC20;\\n\\n    // ===================== CONSTANTS AND IMMUTABLE VARIABLES =====================\\n\\n    /// @notice Reference to the `CoreBorrow` contract of the module which handles all AccessControl logic\\n    ICoreBorrow public immutable core;\\n    /// @notice Uniswap Router contract\\n    IUniswapV3Router public immutable uniV3Router;\\n    /// @notice 1inch Router\\n    address public immutable oneInch;\\n    /// @notice AngleRouter\\n    IAngleRouterSidechain public immutable angleRouter;\\n\\n    // =================================== ERRORS ==================================\\n\\n    error EmptyReturnMessage();\\n    error IncompatibleLengths();\\n    error NotGovernorOrGuardian();\\n    error TooSmallAmountOut();\\n    error ZeroAddress();\\n\\n    /// @notice Constructor of the contract\\n    /// @param _core Core address\\n    /// @param _uniV3Router UniswapV3 Router address\\n    /// @param _oneInch 1inch Router address\\n    /// @param _angleRouter AngleRouter contract address\\n    constructor(\\n        ICoreBorrow _core,\\n        IUniswapV3Router _uniV3Router,\\n        address _oneInch,\\n        IAngleRouterSidechain _angleRouter\\n    ) {\\n        if (address(_core) == address(0) || _oneInch == address(0) || address(_angleRouter) == address(0))\\n            revert ZeroAddress();\\n        core = _core;\\n        uniV3Router = _uniV3Router;\\n        oneInch = _oneInch;\\n        angleRouter = _angleRouter;\\n    }\\n\\n    // ========================= EXTERNAL ACCESS FUNCTIONS =========================\\n\\n    /// @inheritdoc ISwapper\\n    /// @dev This function swaps the `inToken` to the `outToken` by doing a UniV3 swap, a 1inch swap or by interacting\\n    /// with the `AngleRouter` contract\\n    /// @dev One slippage check is performed at the end of the call\\n    /// @dev In this implementation, the function tries to make sure that the `outTokenRecipient` address has at the end\\n    /// of the call `outTokenOwed`, leftover tokens are sent to a `to` address which by default is the `outTokenRecipient`\\n    function swap(\\n        IERC20 inToken,\\n        IERC20 outToken,\\n        address outTokenRecipient,\\n        uint256 outTokenOwed,\\n        uint256 inTokenObtained,\\n        bytes memory data\\n    ) external {\\n        // Address to receive the surplus amount of token at the end of the call\\n        address to;\\n        // For slippage protection, it is checked at the end of the call\\n        uint256 minAmountOut;\\n        // Type of the swap to execute: if `swapType == 4`, then it is optional to swap\\n        uint256 swapType;\\n        // We're reusing the `data` variable (it can be `path` on UniswapV3, a payload for 1inch or like encoded actions\\n        // for a router call)\\n        (to, minAmountOut, swapType, data) = abi.decode(data, (address, uint256, uint256, bytes));\\n\\n        to = (to == address(0)) ? outTokenRecipient : to;\\n\\n        _swap(inToken, inTokenObtained, SwapType(swapType), data);\\n\\n        // A final slippage check is performed after the swaps\\n        uint256 outTokenBalance = outToken.balanceOf(address(this));\\n        if (outTokenBalance < minAmountOut) revert TooSmallAmountOut();\\n\\n        // The `outTokenRecipient` may already have enough in balance, in which case there's no need to transfer\\n        // to this address the token and everything can be given to the `to` address\\n        uint256 outTokenBalanceRecipient = outToken.balanceOf(outTokenRecipient);\\n        if (outTokenBalanceRecipient >= outTokenOwed || to == outTokenRecipient)\\n            outToken.safeTransfer(to, outTokenBalance);\\n        else {\\n            // The `outTokenRecipient` should receive the delta to make sure its end balance is equal to `outTokenOwed`\\n            // Any leftover in this case is sent to the `to` address\\n            // The function reverts if it did not obtain more than `outTokenOwed - outTokenBalanceRecipient` from the swap\\n            outToken.safeTransfer(outTokenRecipient, outTokenOwed - outTokenBalanceRecipient);\\n            outToken.safeTransfer(to, outTokenBalanceRecipient + outTokenBalance - outTokenOwed);\\n        }\\n        // Reusing the `inTokenObtained` variable for the `inToken` balance\\n        // Sending back the remaining amount of inTokens to the `to` address: it is possible that not the full `inTokenObtained`\\n        // is swapped to `outToken` if we're using the `1inch` payload\\n        inTokenObtained = inToken.balanceOf(address(this));\\n        if (inTokenObtained != 0) inToken.safeTransfer(to, inTokenObtained);\\n    }\\n\\n    // ============================ GOVERNANCE FUNCTION ============================\\n\\n    /// @notice Changes allowances of this contract for different tokens\\n    /// @param tokens Addresses of the tokens to allow\\n    /// @param spenders Addresses to allow transfer\\n    /// @param amounts Amounts to allow\\n    function changeAllowance(\\n        IERC20[] calldata tokens,\\n        address[] calldata spenders,\\n        uint256[] calldata amounts\\n    ) external {\\n        if (!core.isGovernorOrGuardian(msg.sender)) revert NotGovernorOrGuardian();\\n        uint256 tokensLength = tokens.length;\\n        if (tokensLength != spenders.length || tokensLength != amounts.length) revert IncompatibleLengths();\\n        for (uint256 i; i < tokensLength; ++i) {\\n            _changeAllowance(tokens[i], spenders[i], amounts[i]);\\n        }\\n    }\\n\\n    // ========================= INTERNAL UTILITY FUNCTIONS ========================\\n\\n    /// @notice Internal version of the `_changeAllowance` function\\n    function _changeAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        uint256 currentAllowance = token.allowance(address(this), spender);\\n        if (currentAllowance < amount) {\\n            token.safeIncreaseAllowance(spender, amount - currentAllowance);\\n        } else if (currentAllowance > amount) {\\n            token.safeDecreaseAllowance(spender, currentAllowance - amount);\\n        }\\n    }\\n\\n    /// @notice Checks the allowance for a contract and updates it to the max if it is not big enough\\n    /// @param token Token for which allowance should be checked\\n    /// @param spender Address to grant allowance to\\n    /// @param amount Minimum amount of tokens needed for the allowance\\n    function _checkAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        uint256 currentAllowance = token.allowance(address(this), spender);\\n        if (currentAllowance < amount) token.safeIncreaseAllowance(spender, type(uint256).max - currentAllowance);\\n    }\\n\\n    /// @notice Performs a swap using either Uniswap, 1inch. This function can also stake stETH to wstETH\\n    /// @param inToken Token to swap\\n    /// @param amount Amount of tokens to swap\\n    /// @param swapType Type of the swap to perform\\n    /// @param args Extra args for the swap: in the case of Uniswap it should be a path, for 1inch it should be\\n    /// a payload\\n    /// @dev This function does nothing if `swapType` is None and it simply passes on the `amount` it received\\n    /// @dev No slippage is specified in the actions given here as a final slippage check is performed\\n    /// after the call to this function\\n    function _swap(\\n        IERC20 inToken,\\n        uint256 amount,\\n        SwapType swapType,\\n        bytes memory args\\n    ) internal {\\n        if (swapType == SwapType.UniswapV3) _swapOnUniswapV3(inToken, amount, args);\\n        else if (swapType == SwapType.oneInch) _swapOn1inch(inToken, args);\\n        else if (swapType == SwapType.AngleRouter) _angleRouterActions(inToken, args);\\n        else if (swapType == SwapType.Leverage) _swapLeverage(args);\\n    }\\n\\n    /// @notice Performs a UniswapV3 swap\\n    /// @param inToken Token to swap\\n    /// @param amount Amount of tokens to swap\\n    /// @param path Path for the UniswapV3 swap: this encodes the out token that is going to be obtained\\n    /// @dev This function does not check the out token obtained here: if it is wrongly specified, either\\n    /// the `swap` function could fail or these tokens could stay on the contract\\n    function _swapOnUniswapV3(\\n        IERC20 inToken,\\n        uint256 amount,\\n        bytes memory path\\n    ) internal returns (uint256 amountOut) {\\n        // We need more than `amount` of allowance to the contract\\n        _checkAllowance(inToken, address(uniV3Router), amount);\\n        amountOut = uniV3Router.exactInput(ExactInputParams(path, address(this), block.timestamp, amount, 0));\\n    }\\n\\n    /// @notice Allows to swap any token to an accepted collateral via 1inch API\\n    /// @param inToken Token received for the 1inch swap\\n    /// @param payload Bytes needed for 1inch API\\n    function _swapOn1inch(IERC20 inToken, bytes memory payload) internal returns (uint256 amountOut) {\\n        _changeAllowance(inToken, oneInch, type(uint256).max);\\n        //solhint-disable-next-line\\n        (bool success, bytes memory result) = oneInch.call(payload);\\n        if (!success) _revertBytes(result);\\n        amountOut = abi.decode(result, (uint256));\\n    }\\n\\n    /// @notice Performs actions with the router contract of the protocol on the corresponding chain\\n    /// @param inToken Token concerned by the action and for which\\n    function _angleRouterActions(IERC20 inToken, bytes memory args) internal {\\n        (ActionType[] memory actions, bytes[] memory actionData) = abi.decode(args, (ActionType[], bytes[]));\\n        _changeAllowance(inToken, address(angleRouter), type(uint256).max);\\n        PermitType[] memory permits;\\n        angleRouter.mixer(permits, actions, actionData);\\n    }\\n\\n    /// @notice Allows to take leverage or deleverage via a specific contract\\n    /// @param payload Bytes needed for 1inch API\\n    /// @dev This function is to be implemented if the swapper concerns a token that requires some actions\\n    /// not supported by 1inch or UniV3\\n    function _swapLeverage(bytes memory payload) internal virtual returns (uint256 amountOut) {}\\n\\n    /// @notice Internal function used for error handling\\n    /// @param errMsg Error message received\\n    function _revertBytes(bytes memory errMsg) internal pure {\\n        if (errMsg.length != 0) {\\n            //solhint-disable-next-line\\n            assembly {\\n                revert(add(32, errMsg), mload(errMsg))\\n            }\\n        }\\n        revert EmptyReturnMessage();\\n    }\\n}\\n\",\"keccak256\":\"0xb297697ce58f0898f6391d25b7c665d8e043d5ebbe51af2c593d492429f0757f\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063a5d4096b11610050578063a5d4096b14610115578063b82c4dc11461012a578063f2f4eb261461013d57600080fd5b8063045c08d5146100775780630b6942c2146100c75780635fafa589146100ee575b600080fd5b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b610128610123366004611390565b610164565b005b6101286101383660046114a6565b61049a565b61009e7f000000000000000000000000000000000000000000000000000000000000000081565b60008060008380602001905181019061017d91906115b1565b96509194509250905073ffffffffffffffffffffffffffffffffffffffff8316156101a857826101aa565b865b92506101c989868360048111156101c3576101c3611616565b87610659565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8a16906370a0823190602401602060405180830381865afa158015610236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025a9190611645565b905082811015610296576040517fa1aabbe100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152600091908b16906370a0823190602401602060405180830381865afa158015610306573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032a9190611645565b9050878110158061036657508873ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b156103915761038c73ffffffffffffffffffffffffffffffffffffffff8b1686846106f6565b6103d6565b6103bd8961039f838b61168d565b73ffffffffffffffffffffffffffffffffffffffff8d1691906106f6565b6103d685896103cc85856116a4565b61039f919061168d565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8c16906370a0823190602401602060405180830381865afa158015610440573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104649190611645565b9650861561048d5761048d73ffffffffffffffffffffffffffffffffffffffff8c1686896106f6565b5050505050505050505050565b6040517f521d4de90000000000000000000000000000000000000000000000000000000081523360048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063521d4de990602401602060405180830381865afa158015610524573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054891906116bc565b61057e576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84838114158061058e5750808214155b156105c5576040517f46282e8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8181101561064f5761063f8888838181106105e5576105e56116de565b90506020020160208101906105fa919061170d565b87878481811061060c5761060c6116de565b9050602002016020810190610621919061170d565b868685818110610633576106336116de565b905060200201356107cf565b6106488161172a565b90506105c8565b5050505050505050565b600082600481111561066d5761066d611616565b14156106845761067e8484836108d3565b506106f0565b600182600481111561069857610698611616565b14156106a85761067e84826109e1565b60028260048111156106bc576106bc611616565b14156106d1576106cc8482610ae8565b6106f0565b60038260048111156106e5576106e5611616565b14156106f05760005b505b50505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526107ca9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610c00565b505050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015610845573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108699190611645565b90508181101561089f576106cc83610881838561168d565b73ffffffffffffffffffffffffffffffffffffffff87169190610d11565b818111156106f0576106f0836108b5848461168d565b73ffffffffffffffffffffffffffffffffffffffff87169190610e0f565b6000610900847f000000000000000000000000000000000000000000000000000000000000000085610f95565b6040805160a0810182528381523060208201524281830152606081018590526000608082015290517fc04b8d5900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163c04b8d599161099691906004016117ad565b6020604051808303816000875af11580156109b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d99190611645565b949350505050565b6000610a2e837f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6107cf565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1684604051610a769190611813565b6000604051808303816000865af19150503d8060008114610ab3576040519150601f19603f3d011682016040523d82523d6000602084013e610ab8565b606091505b509150915081610acb57610acb81611067565b80806020019051810190610adf9190611645565b95945050505050565b60008082806020019051810190610aff91906118de565b91509150610b4e847f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6107cf565b6040517f848c48da00000000000000000000000000000000000000000000000000000000815260609073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063848c48da90610bc790849087908790600401611a90565b600060405180830381600087803b158015610be157600080fd5b505af1158015610bf5573d6000803e3d6000fd5b505050505050505050565b6000610c62826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166110a89092919063ffffffff16565b8051909150156107ca5780806020019051810190610c8091906116bc565b6107ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015610d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dac9190611645565b610db691906116a4565b60405173ffffffffffffffffffffffffffffffffffffffff85166024820152604481018290529091506106f09085907f095ea7b30000000000000000000000000000000000000000000000000000000090606401610748565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015610e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea99190611645565b905081811015610f3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f5361666545524332303a2064656372656173656420616c6c6f77616e6365206260448201527f656c6f77207a65726f00000000000000000000000000000000000000000000006064820152608401610d08565b60405173ffffffffffffffffffffffffffffffffffffffff8416602482015282820360448201819052906106ee9086907f095ea7b30000000000000000000000000000000000000000000000000000000090606401610748565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301526000919085169063dd62ed3e90604401602060405180830381865afa15801561100b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102f9190611645565b9050818110156106f0576106f083610881837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61168d565b80511561107657805181602001fd5b6040517f6a8df6a800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60606109d984846000856110be565b9392505050565b606082471015611150576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610d08565b73ffffffffffffffffffffffffffffffffffffffff85163b6111ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d08565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516111f79190611813565b60006040518083038185875af1925050503d8060008114611234576040519150601f19603f3d011682016040523d82523d6000602084013e611239565b606091505b5091509150611249828286611254565b979650505050505050565b606083156112635750816110b7565b8251156112735782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d089190611b55565b73ffffffffffffffffffffffffffffffffffffffff811681146112c957600080fd5b50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611342576113426112cc565b604052919050565b600067ffffffffffffffff821115611364576113646112cc565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60008060008060008060c087890312156113a957600080fd5b86356113b4816112a7565b955060208701356113c4816112a7565b945060408701356113d4816112a7565b9350606087013592506080870135915060a087013567ffffffffffffffff8111156113fe57600080fd5b8701601f8101891361140f57600080fd5b803561142261141d8261134a565b6112fb565b8181528a602083850101111561143757600080fd5b816020840160208301376000602083830101528093505050509295509295509295565b60008083601f84011261146c57600080fd5b50813567ffffffffffffffff81111561148457600080fd5b6020830191508360208260051b850101111561149f57600080fd5b9250929050565b600080600080600080606087890312156114bf57600080fd5b863567ffffffffffffffff808211156114d757600080fd5b6114e38a838b0161145a565b909850965060208901359150808211156114fc57600080fd5b6115088a838b0161145a565b9096509450604089013591508082111561152157600080fd5b5061152e89828a0161145a565b979a9699509497509295939492505050565b60005b8381101561155b578181015183820152602001611543565b838111156106f05750506000910152565b600082601f83011261157d57600080fd5b815161158b61141d8261134a565b8181528460208386010111156115a057600080fd5b6109d9826020830160208701611540565b600080600080608085870312156115c757600080fd5b84516115d2816112a7565b809450506020850151925060408501519150606085015167ffffffffffffffff8111156115fe57600080fd5b61160a8782880161156c565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006020828403121561165757600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561169f5761169f61165e565b500390565b600082198211156116b7576116b761165e565b500190565b6000602082840312156116ce57600080fd5b815180151581146110b757600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561171f57600080fd5b81356110b7816112a7565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561175c5761175c61165e565b5060010190565b6000815180845261177b816020860160208601611540565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000825160a060208401526117c960c0840182611763565b905073ffffffffffffffffffffffffffffffffffffffff60208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b60008251611825818460208701611540565b9190910192915050565b600067ffffffffffffffff821115611849576118496112cc565b5060051b60200190565b600082601f83011261186457600080fd5b8151602061187461141d8361182f565b82815260059290921b8401810191818101908684111561189357600080fd5b8286015b848110156118d357805167ffffffffffffffff8111156118b75760008081fd5b6118c58986838b010161156c565b845250918301918301611897565b509695505050505050565b600080604083850312156118f157600080fd5b825167ffffffffffffffff8082111561190957600080fd5b818501915085601f83011261191d57600080fd5b8151602061192d61141d8361182f565b82815260059290921b8401810191818101908984111561194c57600080fd5b948201945b83861015611978578551600e81106119695760008081fd5b82529482019490820190611951565b9188015191965090935050508082111561199157600080fd5b5061199e85828601611853565b9150509250929050565b60008151808452602080850194508084016000805b84811015611a0e578251600e81106119fc577f4e487b710000000000000000000000000000000000000000000000000000000083526021600452602483fd5b885296830196918301916001016119bd565b50959695505050505050565b600082825180855260208086019550808260051b84010181860160005b84811015611a83577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0868403018952611a71838351611763565b98840198925090830190600101611a37565b5090979650505050505050565b6060808252845182820181905260009190608090818501906020808a01865b83811015611b21578151805173ffffffffffffffffffffffffffffffffffffffff90811687528482015116848701526040808201519087015287810151888701528681015160ff168787015260a0808201519087015260c0908101519086015260e09094019390820190600101611aaf565b50508683039087015250611b3581886119a8565b925050508281036040840152611b4b8185611a1a565b9695505050505050565b6020815260006110b7602083018461176356fea26469706673582212204a55b8e73ee0e70258dd3a66c7ad89c1cd4595c2de64e8ee28c59340b77ffcc864736f6c634300080c0033",
  "devdoc": {
    "author": "Angle Labs, Inc.",
    "kind": "dev",
    "methods": {
      "changeAllowance(address[],address[],uint256[])": {
        "params": {
          "amounts": "Amounts to allow",
          "spenders": "Addresses to allow transfer",
          "tokens": "Addresses of the tokens to allow"
        }
      },
      "constructor": {
        "params": {
          "_angleRouter": "AngleRouter contract address",
          "_core": "Core address",
          "_oneInch": "1inch Router address",
          "_uniV3Router": "UniswapV3 Router address"
        }
      },
      "swap(address,address,address,uint256,uint256,bytes)": {
        "details": "This function swaps the `inToken` to the `outToken` by doing a UniV3 swap, a 1inch swap or by interacting with the `AngleRouter` contractOne slippage check is performed at the end of the callIn this implementation, the function tries to make sure that the `outTokenRecipient` address has at the end of the call `outTokenOwed`, leftover tokens are sent to a `to` address which by default is the `outTokenRecipient`",
        "params": {
          "data": "Extra data needed (to encode Uniswap swaps for instance)",
          "inToken": "Address of the token received",
          "inTokenObtained": "Amount of collateral obtained by a related address prior to the call to this function",
          "outToken": "Address of the token to obtain",
          "outTokenOwed": "Minimum amount of outToken the `outTokenRecipient` address should have at the end of the call",
          "outTokenRecipient": "Address to which the outToken should be sent"
        }
      }
    },
    "title": "Swapper",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "angleRouter()": {
        "notice": "AngleRouter"
      },
      "changeAllowance(address[],address[],uint256[])": {
        "notice": "Changes allowances of this contract for different tokens"
      },
      "constructor": {
        "notice": "Constructor of the contract"
      },
      "core()": {
        "notice": "Reference to the `CoreBorrow` contract of the module which handles all AccessControl logic"
      },
      "oneInch()": {
        "notice": "1inch Router"
      },
      "swap(address,address,address,uint256,uint256,bytes)": {
        "notice": "Notifies a contract that an address should be given `outToken` from `inToken`"
      },
      "uniV3Router()": {
        "notice": "Uniswap Router contract"
      }
    },
    "notice": "Swapper contract facilitating interactions with Angle VaultManager contracts, notably liquidation and leverage transactions",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}