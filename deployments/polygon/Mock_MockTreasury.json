{
  "address": "0x6d92Ac3091f99c032b5c7E33ac846dB783Cf909c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAgToken",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultManager1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultManager2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_flashLoanModule",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFlashAngle",
          "name": "flashAngle",
          "type": "address"
        }
      ],
      "name": "accrueInterestToTreasury",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVaultManager",
          "name": "_vaultManager",
          "type": "address"
        }
      ],
      "name": "accrueInterestToTreasuryVaultManager",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAgToken",
          "name": "_agToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanModule",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "isGovernorOrGuardian",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultManager",
          "type": "address"
        }
      ],
      "name": "isVaultManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAgToken",
          "name": "_agToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "removeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_flashLoanModule",
          "type": "address"
        }
      ],
      "name": "setFlashLoanModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "setGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAgToken",
          "name": "_stablecoin",
          "type": "address"
        }
      ],
      "name": "setStablecoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_agTokenOrVaultManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultManager",
          "type": "address"
        }
      ],
      "name": "setVaultManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultManager",
          "type": "address"
        }
      ],
      "name": "setVaultManager2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stablecoin",
      "outputs": [
        {
          "internalType": "contract IAgToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultManager1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultManager2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc943ca8a0539883b67387ecd09de14b7f98557beb47d757a5a5b9defbb5b3ec8",
  "receipt": {
    "to": null,
    "from": "0xEd42E58A303E20523A695CB31ac31df26C50397B",
    "contractAddress": "0x6d92Ac3091f99c032b5c7E33ac846dB783Cf909c",
    "transactionIndex": 16,
    "gasUsed": "607130",
    "logsBloom": "0x
    "blockHash": "0xeac1bba70487063a278060fd7ea15f244a3c96269db7731e6738ea13b6c1c1f0",
    "transactionHash": "0xc943ca8a0539883b67387ecd09de14b7f98557beb47d757a5a5b9defbb5b3ec8",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 30134121,
        "transactionHash": "0xc943ca8a0539883b67387ecd09de14b7f98557beb47d757a5a5b9defbb5b3ec8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ed42e58a303e20523a695cb31ac31df26c50397b",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000061102b137c010a0000000000000000000000000000000000000000000000008879a1367289509000000000000000000000000000000000000000000000010bc76c81c01539faee0000000000000000000000000000000000000000000000008818910b5f0d4f8600000000000000000000000000000000000000000000010bc7cd91eb28b5fbf8",
        "logIndex": 81,
        "blockHash": "0xeac1bba70487063a278060fd7ea15f244a3c96269db7731e6738ea13b6c1c1f0"
      }
    ],
    "blockNumber": 30134121,
    "cumulativeGasUsed": "3523119",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe80A456A755E3fA94E010b3Bb0114F2Fe8668ec9",
    "0xEd42E58A303E20523A695CB31ac31df26C50397B",
    "0xEd42E58A303E20523A695CB31ac31df26C50397B",
    "0x0000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000"
  ],
  "solcInputHash": "73837120e578046a4872b917fc1be19c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAgToken\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultManager1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultManager2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_flashLoanModule\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract IFlashAngle\",\"name\":\"flashAngle\",\"type\":\"address\"}],\"name\":\"accrueInterestToTreasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVaultManager\",\"name\":\"_vaultManager\",\"type\":\"address\"}],\"name\":\"accrueInterestToTreasuryVaultManager\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAgToken\",\"name\":\"_agToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isGovernorOrGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManager\",\"type\":\"address\"}],\"name\":\"isVaultManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAgToken\",\"name\":\"_agToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flashLoanModule\",\"type\":\"address\"}],\"name\":\"setFlashLoanModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"setGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAgToken\",\"name\":\"_stablecoin\",\"type\":\"address\"}],\"name\":\"setStablecoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agTokenOrVaultManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManager\",\"type\":\"address\"}],\"name\":\"setVaultManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManager\",\"type\":\"address\"}],\"name\":\"setVaultManager2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoin\",\"outputs\":[{\"internalType\":\"contract IAgToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManager1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManager2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isGovernor(address)\":{\"details\":\"Access control is only kept in the `CoreBorrow` contract\",\"params\":{\"admin\":\"Address to check\"},\"returns\":{\"_0\":\"Whether the address has the governor role\"}},\"isGovernorOrGuardian(address)\":{\"details\":\"Access control is only kept in the `CoreBorrow` contract which means that this function queries the `CoreBorrow` contract\",\"params\":{\"admin\":\"Address to check\"},\"returns\":{\"_0\":\"Whether the address has the guardian or the governor role\"}},\"isVaultManager(address)\":{\"params\":{\"_vaultManager\":\"Address to check\"},\"returns\":{\"_0\":\"Whether the address has been initialized or not\"}},\"setFlashLoanModule(address)\":{\"details\":\"This function removes the minting right to the old flash loan module and grants it to the new module\",\"params\":{\"_flashLoanModule\":\"Reference to the new flash loan module\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isGovernor(address)\":{\"notice\":\"Checks whether a given address has the  governor role\"},\"isGovernorOrGuardian(address)\":{\"notice\":\"Checks whether a given address has the guardian or the governor role\"},\"isVaultManager(address)\":{\"notice\":\"Checks whether a given address has well been initialized in this contract as a `VaultManager``\"},\"setFlashLoanModule(address)\":{\"notice\":\"Sets a new flash loan module for this stablecoin\"},\"stablecoin()\":{\"notice\":\"Stablecoin handled by this `treasury` contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mock/MockTreasury.sol\":\"MockTreasury\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\",\"keccak256\":\"0x1e88abdf82fcbbf98f97be17ea56c924376350637896bc37366ec9f89b7c2628\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/IAgToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title IAgToken\\n/// @author Angle Core Team\\n/// @notice Interface for the stablecoins `AgToken` contracts\\n/// @dev This interface only contains functions of the `AgToken` contract which are called by other contracts\\n/// of this module or of the first module of the Angle Protocol\\ninterface IAgToken is IERC20Upgradeable {\\n    // ======================= Minter Role Only Functions ===========================\\n\\n    /// @notice Lets the `StableMaster` contract or another whitelisted contract mint agTokens\\n    /// @param account Address to mint to\\n    /// @param amount Amount to mint\\n    /// @dev The contracts allowed to issue agTokens are the `StableMaster` contract, `VaultManager` contracts\\n    /// associated to this stablecoin as well as the flash loan module (if activated) and potentially contracts\\n    /// whitelisted by governance\\n    function mint(address account, uint256 amount) external;\\n\\n    /// @notice Burns `amount` tokens from a `burner` address after being asked to by `sender`\\n    /// @param amount Amount of tokens to burn\\n    /// @param burner Address to burn from\\n    /// @param sender Address which requested the burn from `burner`\\n    /// @dev This method is to be called by a contract with the minter right after being requested\\n    /// to do so by a `sender` address willing to burn tokens from another `burner` address\\n    /// @dev The method checks the allowance between the `sender` and the `burner`\\n    function burnFrom(\\n        uint256 amount,\\n        address burner,\\n        address sender\\n    ) external;\\n\\n    /// @notice Burns `amount` tokens from a `burner` address\\n    /// @param amount Amount of tokens to burn\\n    /// @param burner Address to burn from\\n    /// @dev This method is to be called by a contract with a minter right on the AgToken after being\\n    /// requested to do so by an address willing to burn tokens from its address\\n    function burnSelf(uint256 amount, address burner) external;\\n\\n    // ========================= Treasury Only Functions ===========================\\n\\n    /// @notice Adds a minter in the contract\\n    /// @param minter Minter address to add\\n    /// @dev Zero address checks are performed directly in the `Treasury` contract\\n    function addMinter(address minter) external;\\n\\n    /// @notice Removes a minter from the contract\\n    /// @param minter Minter address to remove\\n    /// @dev This function can also be called by a minter wishing to revoke itself\\n    function removeMinter(address minter) external;\\n\\n    /// @notice Sets a new treasury contract\\n    /// @param _treasury New treasury address\\n    function setTreasury(address _treasury) external;\\n\\n    // ========================= External functions ================================\\n\\n    /// @notice Checks whether an address has the right to mint agTokens\\n    /// @param minter Address for which the minting right should be checked\\n    /// @return Whether the address has the right to mint agTokens or not\\n    function isMinter(address minter) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcd50d86128e457543483981ea6127cb8dac03584b919614352aa89d7e991405c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICoreBorrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\n/// @title ICoreBorrow\\n/// @author Angle Core Team\\n/// @notice Interface for the `CoreBorrow` contract\\n/// @dev This interface only contains functions of the `CoreBorrow` contract which are called by other contracts\\n/// of this module\\ninterface ICoreBorrow {\\n    /// @notice Checks if an address corresponds to a treasury of a stablecoin with a flash loan\\n    /// module initialized on it\\n    /// @param treasury Address to check\\n    /// @return Whether the address has the `FLASHLOANER_TREASURY_ROLE` or not\\n    function isFlashLoanerTreasury(address treasury) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GOVERNOR_ROLE` or not\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor or a guardian of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GUARDIAN_ROLE` or not\\n    /// @dev Governance should make sure when adding a governor to also give this governor the guardian\\n    /// role by calling the `addGovernor` function\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x25b65b3f506ca91745a444502a36f0556585d82d9d60f4bd32fbcaabc12840d4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFlashAngle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IAgToken.sol\\\";\\nimport \\\"./ICoreBorrow.sol\\\";\\n\\n/// @title IFlashAngle\\n/// @author Angle Core Team\\n/// @notice Interface for the `FlashAngle` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module\\ninterface IFlashAngle {\\n    /// @notice Reference to the `CoreBorrow` contract managing the FlashLoan module\\n    function core() external view returns (ICoreBorrow);\\n\\n    /// @notice Sends the fees taken from flash loans to the treasury contract associated to the stablecoin\\n    /// @param stablecoin Stablecoin from which profits should be sent\\n    /// @return balance Amount of profits sent\\n    /// @dev This function can only be called by the treasury contract\\n    function accrueInterestToTreasury(IAgToken stablecoin) external returns (uint256 balance);\\n\\n    /// @notice Adds support for a stablecoin\\n    /// @param _treasury Treasury associated to the stablecoin to add support for\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function addStablecoinSupport(address _treasury) external;\\n\\n    /// @notice Removes support for a stablecoin\\n    /// @param _treasury Treasury associated to the stablecoin to remove support for\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function removeStablecoinSupport(address _treasury) external;\\n\\n    /// @notice Sets a new core contract\\n    /// @param _core Core contract address to set\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function setCore(address _core) external;\\n}\\n\",\"keccak256\":\"0xc17654e512897efe41e3f1173c07dd4676e8c699a72b859d14b473d1e8300e45\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./ITreasury.sol\\\";\\n\\n/// @title IOracle\\n/// @author Angle Core Team\\n/// @notice Interface for the `Oracle` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module\\ninterface IOracle {\\n    /// @notice Reads the rate from the Chainlink circuit and other data provided\\n    /// @return quoteAmount The current rate between the in-currency and out-currency in the base\\n    /// of the out currency\\n    /// @dev For instance if the out currency is EUR (and hence agEUR), then the base of the returned\\n    /// value is 10**18\\n    function read() external view returns (uint256);\\n\\n    /// @notice Changes the treasury contract\\n    /// @param _treasury Address of the new treasury contract\\n    /// @dev This function can be called by an approved `VaultManager` contract which can call\\n    /// this function after being requested to do so by a `treasury` contract\\n    /// @dev In some situations (like reactor contracts), the `VaultManager` may not directly be linked\\n    /// to the `oracle` contract and as such we may need governors to be able to call this function as well\\n    function setTreasury(address _treasury) external;\\n\\n    /// @notice Reference to the `treasury` contract handling this `VaultManager`\\n    function treasury() external view returns (ITreasury treasury);\\n}\\n\",\"keccak256\":\"0x90fc39ba314b05884005b9deb1d949ca20f7fc5158fa0a7e41f1c798fb0c0a43\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IAgToken.sol\\\";\\nimport \\\"./ICoreBorrow.sol\\\";\\nimport \\\"./IFlashAngle.sol\\\";\\n\\n/// @title ITreasury\\n/// @author Angle Core Team\\n/// @notice Interface for the `Treasury` contract\\n/// @dev This interface only contains functions of the `Treasury` which are called by other contracts\\n/// of this module\\ninterface ITreasury {\\n    /// @notice Stablecoin handled by this `treasury` contract\\n    function stablecoin() external view returns (IAgToken);\\n\\n    /// @notice Checks whether a given address has the  governor role\\n    /// @param admin Address to check\\n    /// @return Whether the address has the governor role\\n    /// @dev Access control is only kept in the `CoreBorrow` contract\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether a given address has the guardian or the governor role\\n    /// @param admin Address to check\\n    /// @return Whether the address has the guardian or the governor role\\n    /// @dev Access control is only kept in the `CoreBorrow` contract which means that this function\\n    /// queries the `CoreBorrow` contract\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether a given address has well been initialized in this contract\\n    /// as a `VaultManager``\\n    /// @param _vaultManager Address to check\\n    /// @return Whether the address has been initialized or not\\n    function isVaultManager(address _vaultManager) external view returns (bool);\\n\\n    /// @notice Sets a new flash loan module for this stablecoin\\n    /// @param _flashLoanModule Reference to the new flash loan module\\n    /// @dev This function removes the minting right to the old flash loan module and grants\\n    /// it to the new module\\n    function setFlashLoanModule(address _flashLoanModule) external;\\n}\\n\",\"keccak256\":\"0xced9b7256fcbedc75682037e11ce51fe9116e5604794b8545e00dea0607629cc\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\n// ========================= Key Structs and Enums =============================\\n\\n/// @notice Parameters associated to a given `VaultManager` contract: these all correspond\\n/// to parameters which signification is detailed in the `VaultManagerStorage` file\\nstruct VaultParameters {\\n    uint256 debtCeiling;\\n    uint64 collateralFactor;\\n    uint64 targetHealthFactor;\\n    uint64 interestRate;\\n    uint64 liquidationSurcharge;\\n    uint64 maxLiquidationDiscount;\\n    bool whitelistingActivated;\\n    uint256 baseBoost;\\n}\\n\\n/// @notice Data stored to track someone's loan (or equivalently called position)\\nstruct Vault {\\n    // Amount of collateral deposited in the vault, in collateral decimals. For example, if the collateral\\n    // is USDC with 6 decimals, then `collateralAmount` will be in base 10**6\\n    uint256 collateralAmount;\\n    // Normalized value of the debt (that is to say of the stablecoins borrowed). It is expressed\\n    // in the base of Angle stablecoins (i.e. `BASE_TOKENS = 10**18`)\\n    uint256 normalizedDebt;\\n}\\n\\n/// @notice For a given `vaultID`, this encodes a liquidation opportunity that is to say details about the maximum\\n/// amount that could be repaid by liquidating the position\\n/// @dev All the values are null in the case of a vault which cannot be liquidated under these conditions\\nstruct LiquidationOpportunity {\\n    // Maximum stablecoin amount that can be repaid upon liquidating the vault\\n    uint256 maxStablecoinAmountToRepay;\\n    // Collateral amount given to the person in the case where the maximum amount to repay is given\\n    uint256 maxCollateralAmountGiven;\\n    // Threshold value of stablecoin amount to repay: it is ok for a liquidator to repay below threshold,\\n    // but if this threshold is non null and the liquidator wants to repay more than threshold, it should repay\\n    // the max stablecoin amount given in this vault\\n    uint256 thresholdRepayAmount;\\n    // Discount proposed to the liquidator on the collateral\\n    uint256 discount;\\n    // Amount of debt in the vault\\n    uint256 currentDebt;\\n}\\n\\n/// @notice Data stored during a liquidation process to keep in memory what's due to a liquidator and some\\n/// essential data for vaults being liquidated\\nstruct LiquidatorData {\\n    // Current amount of stablecoins the liquidator should give to the contract\\n    uint256 stablecoinAmountToReceive;\\n    // Current amount of collateral the contract should give to the liquidator\\n    uint256 collateralAmountToGive;\\n    // Bad debt accrued across the liquidation process\\n    uint256 badDebtFromLiquidation;\\n    // Oracle value (in stablecoin base) at the time of the liquidation\\n    uint256 oracleValue;\\n    // Value of the `interestAccumulator` at the time of the call\\n    uint256 newInterestAccumulator;\\n}\\n\\n/// @notice Data to track during a series of action the amount to give or receive in stablecoins and collateral\\n/// to the caller or associated addresses\\nstruct PaymentData {\\n    // Stablecoin amount the contract should give\\n    uint256 stablecoinAmountToGive;\\n    // Stablecoin amount owed to the contract\\n    uint256 stablecoinAmountToReceive;\\n    // Collateral amount the contract should give\\n    uint256 collateralAmountToGive;\\n    // Collateral amount owed to the contract\\n    uint256 collateralAmountToReceive;\\n}\\n\\n/// @notice Actions possible when composing calls to the different entry functions proposed\\nenum ActionType {\\n    createVault,\\n    closeVault,\\n    addCollateral,\\n    removeCollateral,\\n    repayDebt,\\n    borrow,\\n    getDebtIn,\\n    permit\\n}\\n\\n// ========================= Interfaces =============================\\n\\n/// @title IVaultManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the `VaultManager` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module (without getters)\\ninterface IVaultManagerFunctions {\\n    /// @notice Accrues interest accumulated across all vaults to the surplus and sends the surplus to the treasury\\n    /// @return surplusValue Value of the surplus communicated to the `Treasury`\\n    /// @return badDebtValue Value of the bad debt communicated to the `Treasury`\\n    /// @dev `surplus` and `badDebt` should be reset to 0 once their current value have been given to the `treasury` contract\\n    function accrueInterestToTreasury() external returns (uint256 surplusValue, uint256 badDebtValue);\\n\\n    /// @notice Removes debt from a vault after being requested to do so by another `VaultManager` contract\\n    /// @param vaultID ID of the vault to remove debt from\\n    /// @param amountStablecoins Amount of stablecoins to remove from the debt: this amount is to be converted to an\\n    /// internal debt amount\\n    /// @param senderBorrowFee Borrowing fees from the contract which requested this: this is to make sure that people are not\\n    /// arbitraging difference in minting fees\\n    /// @param senderRepayFee Repay fees from the contract which requested this: this is to make sure that people are not arbitraging\\n    /// differences in repay fees\\n    /// @dev This function can only be called from a vaultManager registered in the same Treasury\\n    function getDebtOut(\\n        uint256 vaultID,\\n        uint256 amountStablecoins,\\n        uint256 senderBorrowFee,\\n        uint256 senderRepayFee\\n    ) external;\\n\\n    /// @notice Gets the current debt of a vault\\n    /// @param vaultID ID of the vault to check\\n    /// @return Debt of the vault\\n    function getVaultDebt(uint256 vaultID) external view returns (uint256);\\n\\n    /// @notice Gets the total debt across all vaults\\n    /// @return Total debt across all vaults, taking into account the interest accumulated\\n    /// over time\\n    function getTotalDebt() external view returns (uint256);\\n\\n    /// @notice Sets the treasury contract\\n    /// @param _treasury New treasury contract\\n    /// @dev All required checks when setting up a treasury contract are performed in the contract\\n    /// calling this function\\n    function setTreasury(address _treasury) external;\\n\\n    /// @notice Creates a vault\\n    /// @param toVault Address for which the va\\n    /// @return vaultID ID of the vault created\\n    /// @dev This function just creates the vault without doing any collateral or\\n    function createVault(address toVault) external returns (uint256);\\n\\n    /// @notice Allows composability between calls to the different entry points of this module. Any user calling\\n    /// this function can perform any of the allowed actions in the order of their choice\\n    /// @param actions Set of actions to perform\\n    /// @param datas Data to be decoded for each action: it can include like the `vaultID` or the `stablecoinAmount` to borrow\\n    /// @param from Address from which stablecoins will be taken if one action includes burning stablecoins. This address\\n    /// should either be the `msg.sender` or be approved by the latter\\n    /// @param to Address to which stablecoins and/or collateral will be sent in case of\\n    /// @param who Address of the contract to handle in case of repayment of stablecoins from received collateral\\n    /// @param repayData Data to pass to the repayment contract in case of\\n    /// @return paymentData Struct containing the accounting changes from the protocol's perspective (like how much of collateral\\n    /// or how much has been received). Note that the values in the struct are not aggregated and you could have in the output\\n    /// a positive amount of stablecoins to receive as well as a positive amount of stablecoins to give\\n    /// @dev This function is optimized to reduce gas cost due to payment from or to the user and that expensive calls\\n    /// or computations (like `oracleValue`) are done only once\\n    /// @dev When specifying `vaultID` in `data`, it is important to know that if you specify `vaultID = 0`, it will simply\\n    /// use the latest `vaultID`. This is the default behavior, and unless you're engaging into some complex protocol actions\\n    /// it is encouraged to use `vaultID = 0` only when the first action of the batch is `createVault`\\n    function angle(\\n        ActionType[] memory actions,\\n        bytes[] memory datas,\\n        address from,\\n        address to,\\n        address who,\\n        bytes memory repayData\\n    ) external returns (PaymentData memory paymentData);\\n\\n    /// @notice This function is a wrapper built on top of the function above. It enables users to interact with the contract\\n    /// without having to provide `who` and `repayData` parameters\\n    function angle(\\n        ActionType[] memory actions,\\n        bytes[] memory datas,\\n        address from,\\n        address to\\n    ) external returns (PaymentData memory paymentData);\\n\\n    /// @notice Initializes the `VaultManager` contract\\n    /// @param _treasury Treasury address handling the contract\\n    /// @param _collateral Collateral supported by this contract\\n    /// @param _oracle Oracle contract used\\n    /// @param _symbol Symbol used to define the `VaultManager` name and symbol\\n    /// @dev The parameters and the oracle are the only elements which could be modified once the\\n    /// contract has been initialized\\n    /// @dev For the contract to be fully initialized, governance needs to set the parameters for the liquidation\\n    /// boost\\n    function initialize(\\n        ITreasury _treasury,\\n        IERC20 _collateral,\\n        IOracle _oracle,\\n        VaultParameters calldata params,\\n        string memory _symbol\\n    ) external;\\n}\\n\\n/// @title IVaultManagerStorage\\n/// @author Angle Core Team\\n/// @notice Interface for the `VaultManager` contract\\n/// @dev This interface contains getters of the contract's public variables used by other contracts\\n/// of this module\\ninterface IVaultManagerStorage {\\n    /// @notice Minimum amount of debt a vault can have, expressed in `BASE_TOKENS` that is to say the base of the agTokens\\n    function dust() external view returns (uint256);\\n\\n    /// @notice Encodes the maximum ratio stablecoin/collateral a vault can have before being liquidated. It's what\\n    /// determines the minimum collateral ratio of a position\\n    function collateralFactor() external view returns (uint64);\\n\\n    /// @notice Stablecoin handled by this contract. Another `VaultManager` contract could have\\n    /// the same rights as this `VaultManager` on the stablecoin contract\\n    function stablecoin() external view returns (IAgToken);\\n\\n    /// @notice Reference to the `treasury` contract handling this `VaultManager`\\n    function treasury() external view returns (ITreasury);\\n\\n    /// @notice Oracle contract to get access to the price of the collateral with respect to the stablecoin\\n    function oracle() external view returns (IOracle);\\n\\n    /// @notice The `interestAccumulator` variable keeps track of the interest that should accrue to the protocol.\\n    /// The stored value is not necessarily the true value: this one is recomputed every time an action takes place\\n    /// within the protocol. It is in base `BASE_INTEREST`\\n    function interestAccumulator() external view returns (uint256);\\n\\n    /// @notice Reference to the collateral handled by this `VaultManager`\\n    function collateral() external view returns (IERC20);\\n\\n    /// @notice Total normalized amount of stablecoins borrowed, not taking into account the potential bad debt accumulated\\n    /// This value is expressed in the base of Angle stablecoins (`BASE_TOKENS = 10**18`)\\n    function totalNormalizedDebt() external view returns (uint256);\\n\\n    /// @notice Maximum amount of stablecoins that can be issued with this contract. It is expressed in `BASE_TOKENS`\\n    function debtCeiling() external view returns (uint256);\\n\\n    /// @notice Maps a `vaultID` to its data (namely collateral amount and normalized debt)\\n    function vaultData(uint256 vaultID) external view returns (uint256 collateralAmount, uint256 normalizedDebt);\\n\\n    /// @notice ID of the last vault created. The `vaultIDCount` variables serves as a counter to generate a unique\\n    /// `vaultID` for each vault: it is like `tokenID` in basic ERC721 contracts\\n    function vaultIDCount() external view returns (uint256);\\n}\\n\\n/// @title IVaultManager\\n/// @author Angle Core Team\\n/// @notice Interface for the `VaultManager` contract\\ninterface IVaultManager is IVaultManagerFunctions, IVaultManagerStorage, IERC721Metadata {\\n\\n}\\n\",\"keccak256\":\"0x39da5fbb9662403f68a55e0aaa5436cc3b1e9c9ed1ee5f66ee8acfbd099559e8\",\"license\":\"GPL-3.0\"},\"contracts/mock/MockTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/IFlashAngle.sol\\\";\\nimport \\\"../interfaces/IVaultManager.sol\\\";\\n\\ncontract MockTreasury is ITreasury {\\n    IAgToken public override stablecoin;\\n    address public governor;\\n    address public guardian;\\n    address public vaultManager1;\\n    address public vaultManager2;\\n    address public flashLoanModule;\\n\\n    constructor(\\n        IAgToken _stablecoin,\\n        address _governor,\\n        address _guardian,\\n        address _vaultManager1,\\n        address _vaultManager2,\\n        address _flashLoanModule\\n    ) {\\n        stablecoin = _stablecoin;\\n        governor = _governor;\\n        guardian = _guardian;\\n        vaultManager1 = _vaultManager1;\\n        vaultManager2 = _vaultManager2;\\n        flashLoanModule = _flashLoanModule;\\n    }\\n\\n    function isGovernor(address admin) external view override returns (bool) {\\n        return (admin == governor);\\n    }\\n\\n    function isGovernorOrGuardian(address admin) external view override returns (bool) {\\n        return (admin == governor || admin == guardian);\\n    }\\n\\n    function isVaultManager(address _vaultManager) external view override returns (bool) {\\n        return (_vaultManager == vaultManager1 || _vaultManager == vaultManager2);\\n    }\\n\\n    function setStablecoin(IAgToken _stablecoin) external {\\n        stablecoin = _stablecoin;\\n    }\\n\\n    function setFlashLoanModule(address _flashLoanModule) external override {\\n        flashLoanModule = _flashLoanModule;\\n    }\\n\\n    function setGovernor(address _governor) external {\\n        governor = _governor;\\n    }\\n\\n    function setVaultManager(address _vaultManager) external {\\n        vaultManager1 = _vaultManager;\\n    }\\n\\n    function setVaultManager2(address _vaultManager) external {\\n        vaultManager2 = _vaultManager;\\n    }\\n\\n    function setTreasury(address _agTokenOrVaultManager, address _treasury) external {\\n        IAgToken(_agTokenOrVaultManager).setTreasury(_treasury);\\n    }\\n\\n    function addMinter(IAgToken _agToken, address _minter) external {\\n        _agToken.addMinter(_minter);\\n    }\\n\\n    function removeMinter(IAgToken _agToken, address _minter) external {\\n        _agToken.removeMinter(_minter);\\n    }\\n\\n    function accrueInterestToTreasury(IFlashAngle flashAngle) external returns (uint256 balance) {\\n        balance = flashAngle.accrueInterestToTreasury(stablecoin);\\n    }\\n\\n    function accrueInterestToTreasuryVaultManager(IVaultManager _vaultManager) external returns (uint256, uint256) {\\n        return _vaultManager.accrueInterestToTreasury();\\n    }\\n}\\n\",\"keccak256\":\"0xe6d848d6db11add3fd5f50bad849cfc0fa2b0ce626fb893dd55e492b7ee10ea1\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516109ec3803806109ec83398101604081905261002f916100b9565b600080546001600160a01b03199081166001600160a01b0398891617909155600180548216968816969096179095556002805486169487169490941790935560038054851692861692909217909155600480548416918516919091179055600580549092169216919091179055610140565b6001600160a01b03811681146100b657600080fd5b50565b60008060008060008060c087890312156100d257600080fd5b86516100dd816100a1565b60208801519096506100ee816100a1565b60408801519095506100ff816100a1565b6060880151909450610110816100a1565b6080880151909350610121816100a1565b60a0880151909250610132816100a1565b809150509295509295509295565b61089d8061014f6000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c8063adfe0870116100cd578063e43581b811610081578063f28de7ed11610066578063f28de7ed14610477578063f92176a914610497578063fa188df2146104bf57600080fd5b8063e43581b814610428578063e9cbd8221461045757600080fd5b8063b543503e116100b2578063b543503e14610329578063c42cf5351461037e578063e088bfc0146103d357600080fd5b8063adfe0870146102c1578063b487ef52146102d457600080fd5b8063676a553e11610124578063959d5a0111610109578063959d5a011461026057806396337bd51461028057806397f5a956146102a157600080fd5b8063676a553e1461023a5780637b1d63181461024d57600080fd5b80630c340a241461015657806321c29f92146101a0578063452a9320146101f7578063521d4de914610217575b600080fd5b6001546101769073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101f56101ae3660046107cd565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b005b6002546101769073ffffffffffffffffffffffffffffffffffffffff1681565b61022a6102253660046107cd565b6104d2565b6040519015158152602001610197565b61022a6102483660046107cd565b61051e565b6101f561025b3660046107f1565b610567565b6005546101769073ffffffffffffffffffffffffffffffffffffffff1681565b61029361028e3660046107cd565b6105ed565b604051908152602001610197565b6003546101769073ffffffffffffffffffffffffffffffffffffffff1681565b6101f56102cf3660046107f1565b610684565b6101f56102e23660046107cd565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6101f56103373660046107cd565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6101f561038c3660046107cd565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6101f56103e13660046107cd565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61022a6104363660046107cd565b60015473ffffffffffffffffffffffffffffffffffffffff91821691161490565b6000546101769073ffffffffffffffffffffffffffffffffffffffff1681565b6004546101769073ffffffffffffffffffffffffffffffffffffffff1681565b6104aa6104a53660046107cd565b6106d8565b60408051928352602083019190915201610197565b6101f56104cd3660046107f1565b610754565b60015460009073ffffffffffffffffffffffffffffffffffffffff83811691161480610518575060025473ffffffffffffffffffffffffffffffffffffffff8381169116145b92915050565b60035460009073ffffffffffffffffffffffffffffffffffffffff8381169116148061051857505060045473ffffffffffffffffffffffffffffffffffffffff90811691161490565b6040517f3092afd500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152831690633092afd5906024015b600060405180830381600087803b1580156105d157600080fd5b505af11580156105e5573d6000803e3d6000fd5b505050505050565b600080546040517f96337bd500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152908316906396337bd5906024016020604051808303816000875af1158015610660573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610518919061082a565b6040517ff0f4426000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015283169063f0f44260906024016105b7565b6000808273ffffffffffffffffffffffffffffffffffffffff1663fd527cf86040518163ffffffff1660e01b815260040160408051808303816000875af1158015610727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074b9190610843565b91509150915091565b6040517f983b2d5600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015283169063983b2d56906024016105b7565b73ffffffffffffffffffffffffffffffffffffffff811681146107ca57600080fd5b50565b6000602082840312156107df57600080fd5b81356107ea816107a8565b9392505050565b6000806040838503121561080457600080fd5b823561080f816107a8565b9150602083013561081f816107a8565b809150509250929050565b60006020828403121561083c57600080fd5b5051919050565b6000806040838503121561085657600080fd5b50508051602090910151909290915056fea26469706673582212205750cdce047ff465fb1b7a3bd2ddffa17da90c91583de6667399b7ec804071b564736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c8063adfe0870116100cd578063e43581b811610081578063f28de7ed11610066578063f28de7ed14610477578063f92176a914610497578063fa188df2146104bf57600080fd5b8063e43581b814610428578063e9cbd8221461045757600080fd5b8063b543503e116100b2578063b543503e14610329578063c42cf5351461037e578063e088bfc0146103d357600080fd5b8063adfe0870146102c1578063b487ef52146102d457600080fd5b8063676a553e11610124578063959d5a0111610109578063959d5a011461026057806396337bd51461028057806397f5a956146102a157600080fd5b8063676a553e1461023a5780637b1d63181461024d57600080fd5b80630c340a241461015657806321c29f92146101a0578063452a9320146101f7578063521d4de914610217575b600080fd5b6001546101769073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101f56101ae3660046107cd565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b005b6002546101769073ffffffffffffffffffffffffffffffffffffffff1681565b61022a6102253660046107cd565b6104d2565b6040519015158152602001610197565b61022a6102483660046107cd565b61051e565b6101f561025b3660046107f1565b610567565b6005546101769073ffffffffffffffffffffffffffffffffffffffff1681565b61029361028e3660046107cd565b6105ed565b604051908152602001610197565b6003546101769073ffffffffffffffffffffffffffffffffffffffff1681565b6101f56102cf3660046107f1565b610684565b6101f56102e23660046107cd565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6101f56103373660046107cd565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6101f561038c3660046107cd565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6101f56103e13660046107cd565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61022a6104363660046107cd565b60015473ffffffffffffffffffffffffffffffffffffffff91821691161490565b6000546101769073ffffffffffffffffffffffffffffffffffffffff1681565b6004546101769073ffffffffffffffffffffffffffffffffffffffff1681565b6104aa6104a53660046107cd565b6106d8565b60408051928352602083019190915201610197565b6101f56104cd3660046107f1565b610754565b60015460009073ffffffffffffffffffffffffffffffffffffffff83811691161480610518575060025473ffffffffffffffffffffffffffffffffffffffff8381169116145b92915050565b60035460009073ffffffffffffffffffffffffffffffffffffffff8381169116148061051857505060045473ffffffffffffffffffffffffffffffffffffffff90811691161490565b6040517f3092afd500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152831690633092afd5906024015b600060405180830381600087803b1580156105d157600080fd5b505af11580156105e5573d6000803e3d6000fd5b505050505050565b600080546040517f96337bd500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152908316906396337bd5906024016020604051808303816000875af1158015610660573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610518919061082a565b6040517ff0f4426000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015283169063f0f44260906024016105b7565b6000808273ffffffffffffffffffffffffffffffffffffffff1663fd527cf86040518163ffffffff1660e01b815260040160408051808303816000875af1158015610727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074b9190610843565b91509150915091565b6040517f983b2d5600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015283169063983b2d56906024016105b7565b73ffffffffffffffffffffffffffffffffffffffff811681146107ca57600080fd5b50565b6000602082840312156107df57600080fd5b81356107ea816107a8565b9392505050565b6000806040838503121561080457600080fd5b823561080f816107a8565b9150602083013561081f816107a8565b809150509250929050565b60006020828403121561083c57600080fd5b5051919050565b6000806040838503121561085657600080fd5b50508051602090910151909290915056fea26469706673582212205750cdce047ff465fb1b7a3bd2ddffa17da90c91583de6667399b7ec804071b564736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "isGovernor(address)": {
        "details": "Access control is only kept in the `CoreBorrow` contract",
        "params": {
          "admin": "Address to check"
        },
        "returns": {
          "_0": "Whether the address has the governor role"
        }
      },
      "isGovernorOrGuardian(address)": {
        "details": "Access control is only kept in the `CoreBorrow` contract which means that this function queries the `CoreBorrow` contract",
        "params": {
          "admin": "Address to check"
        },
        "returns": {
          "_0": "Whether the address has the guardian or the governor role"
        }
      },
      "isVaultManager(address)": {
        "params": {
          "_vaultManager": "Address to check"
        },
        "returns": {
          "_0": "Whether the address has been initialized or not"
        }
      },
      "setFlashLoanModule(address)": {
        "details": "This function removes the minting right to the old flash loan module and grants it to the new module",
        "params": {
          "_flashLoanModule": "Reference to the new flash loan module"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isGovernor(address)": {
        "notice": "Checks whether a given address has the  governor role"
      },
      "isGovernorOrGuardian(address)": {
        "notice": "Checks whether a given address has the guardian or the governor role"
      },
      "isVaultManager(address)": {
        "notice": "Checks whether a given address has well been initialized in this contract as a `VaultManager``"
      },
      "setFlashLoanModule(address)": {
        "notice": "Sets a new flash loan module for this stablecoin"
      },
      "stablecoin()": {
        "notice": "Stablecoin handled by this `treasury` contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17859,
        "contract": "contracts/mock/MockTreasury.sol:MockTreasury",
        "label": "stablecoin",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAgToken)13628"
      },
      {
        "astId": 17861,
        "contract": "contracts/mock/MockTreasury.sol:MockTreasury",
        "label": "governor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 17863,
        "contract": "contracts/mock/MockTreasury.sol:MockTreasury",
        "label": "guardian",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 17865,
        "contract": "contracts/mock/MockTreasury.sol:MockTreasury",
        "label": "vaultManager1",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 17867,
        "contract": "contracts/mock/MockTreasury.sol:MockTreasury",
        "label": "vaultManager2",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 17869,
        "contract": "contracts/mock/MockTreasury.sol:MockTreasury",
        "label": "flashLoanModule",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IAgToken)13628": {
        "encoding": "inplace",
        "label": "contract IAgToken",
        "numberOfBytes": "20"
      }
    }
  }
}