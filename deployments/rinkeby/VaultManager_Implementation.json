{
  "address": "0x442a2b07F14812976c350557342Ce2e3a79211E6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dust_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dustCollateral_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "surplusEndValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "badDebtEndValue",
          "type": "uint256"
        }
      ],
      "name": "AccruedToTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "isIncrease",
          "type": "uint8"
        }
      ],
      "name": "CollateralAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtCeiling",
          "type": "uint256"
        }
      ],
      "name": "DebtCeilingUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "param",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        }
      ],
      "name": "FiledUint64",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "InterestRateAccumulatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "internalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "isIncrease",
          "type": "uint8"
        }
      ],
      "name": "InternalDebtUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_veBoostProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "xBoost",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "yBoost",
          "type": "uint256[]"
        }
      ],
      "name": "LiquidationBoostParametersUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "OracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "ToggledWhitelisting",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_INTEREST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_PARAMS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HALF_BASE_INTEREST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrueInterestToTreasury",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "surplusValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "badDebtValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ActionType[]",
          "name": "actions",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "angle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stablecoinAmountToGive",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stablecoinAmountToReceive",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmountToGive",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmountToReceive",
              "type": "uint256"
            }
          ],
          "internalType": "struct PaymentData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ActionType[]",
          "name": "actions",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "repayData",
          "type": "bytes"
        }
      ],
      "name": "angle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stablecoinAmountToGive",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stablecoinAmountToReceive",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmountToGive",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmountToReceive",
              "type": "uint256"
            }
          ],
          "internalType": "struct PaymentData",
          "name": "paymentData",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "badDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowFee",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "checkLiquidation",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxStablecoinAmountToRepay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxCollateralAmountGiven",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "thresholdRepayAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "discount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentDebt",
              "type": "uint256"
            }
          ],
          "internalType": "struct LiquidationOpportunity",
          "name": "liqOpp",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralFactor",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toVault",
          "type": "address"
        }
      ],
      "name": "createVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtCeiling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dust",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "getControlledVaults",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stablecoinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "senderBorrowFee",
          "type": "uint256"
        }
      ],
      "name": "getDebtOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        }
      ],
      "name": "getVaultDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITreasury",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "contract IOracle",
          "name": "_oracle",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "debtCeiling",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "collateralFactor",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "targetHealthFactor",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "borrowFee",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "interestRate",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "liquidationSurcharge",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "maxLiquidationDiscount",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "whitelistingActivated",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "baseBoost",
              "type": "uint256"
            }
          ],
          "internalType": "struct VaultParameters",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestAccumulator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRate",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        }
      ],
      "name": "isApprovedOrOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastInterestAccumulatorUpdated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "vaultIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stablecoinAmountToReceive",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmountToGive",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "badDebtFromLiquidation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oracleValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newInterestRateAccumulator",
              "type": "uint256"
            }
          ],
          "internalType": "struct LiquidatorData",
          "name": "liqData",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "vaultIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stablecoinAmountToReceive",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmountToGive",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "badDebtFromLiquidation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oracleValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newInterestRateAccumulator",
              "type": "uint256"
            }
          ],
          "internalType": "struct LiquidatorData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationSurcharge",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLiquidationDiscount",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtCeiling",
          "type": "uint256"
        }
      ],
      "name": "setDebtCeiling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_veBoostProxy",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "xBoost",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "yBoost",
          "type": "uint256[]"
        }
      ],
      "name": "setLiquidationBoostParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "param",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        }
      ],
      "name": "setUint64",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stablecoin",
      "outputs": [
        {
          "internalType": "contract IAgToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "surplus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetHealthFactor",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "toggleWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleWhitelisting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNormalizedDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vaultID",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "contract ITreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaultData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "normalizedDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veBoostProxy",
      "outputs": [
        {
          "internalType": "contract IVeBoostProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistingActivated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "xLiquidationBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "yLiquidationBoost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xde57c52c86398d0e06f7c25a289e3906c22feddb70a7e0013dfc9029bfdb4192",
  "receipt": {
    "to": null,
    "from": "0x8A97FBD532A5C1eD67fd67c11dD76013abAc840e",
    "contractAddress": "0x442a2b07F14812976c350557342Ce2e3a79211E6",
    "transactionIndex": 89,
    "gasUsed": "5257340",
    "logsBloom": "0x
    "blockHash": "0x9389c358ef3272e7c1a791d880aaf31abfc2b1c9ee55423760f716228a81926c",
    "transactionHash": "0xde57c52c86398d0e06f7c25a289e3906c22feddb70a7e0013dfc9029bfdb4192",
    "logs": [],
    "blockNumber": 10334345,
    "cumulativeGasUsed": "20385603",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10000000000000000000000",
    "10000000000000000000000"
  ],
  "solcInputHash": "287711340bb2f0b50186fde1b66d6003",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dust_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dustCollateral_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"surplusEndValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"badDebtEndValue\",\"type\":\"uint256\"}],\"name\":\"AccruedToTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"isIncrease\",\"type\":\"uint8\"}],\"name\":\"CollateralAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtCeiling\",\"type\":\"uint256\"}],\"name\":\"DebtCeilingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"param\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"}],\"name\":\"FiledUint64\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InterestRateAccumulatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"internalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"isIncrease\",\"type\":\"uint8\"}],\"name\":\"InternalDebtUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_veBoostProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"xBoost\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"yBoost\",\"type\":\"uint256[]\"}],\"name\":\"LiquidationBoostParametersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"ToggledWhitelisting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_INTEREST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_PARAMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HALF_BASE_INTEREST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrueInterestToTreasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"surplusValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"badDebtValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ActionType[]\",\"name\":\"actions\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"angle\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountToGive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountToReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmountToGive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmountToReceive\",\"type\":\"uint256\"}],\"internalType\":\"struct PaymentData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ActionType[]\",\"name\":\"actions\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"repayData\",\"type\":\"bytes\"}],\"name\":\"angle\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountToGive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountToReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmountToGive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmountToReceive\",\"type\":\"uint256\"}],\"internalType\":\"struct PaymentData\",\"name\":\"paymentData\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"badDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"checkLiquidation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxStablecoinAmountToRepay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCollateralAmountGiven\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdRepayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidationOpportunity\",\"name\":\"liqOpp\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralFactor\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toVault\",\"type\":\"address\"}],\"name\":\"createVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dust\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"getControlledVaults\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stablecoinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"senderBorrowFee\",\"type\":\"uint256\"}],\"name\":\"getDebtOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"}],\"name\":\"getVaultDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"_oracle\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"debtCeiling\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"collateralFactor\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"targetHealthFactor\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"borrowFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"interestRate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"liquidationSurcharge\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxLiquidationDiscount\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"whitelistingActivated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"baseBoost\",\"type\":\"uint256\"}],\"internalType\":\"struct VaultParameters\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastInterestAccumulatorUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"vaultIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"liquidate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountToReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmountToGive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"badDebtFromLiquidation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newInterestRateAccumulator\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidatorData\",\"name\":\"liqData\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"vaultIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stablecoinAmountToReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmountToGive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"badDebtFromLiquidation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newInterestRateAccumulator\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidatorData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationSurcharge\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidationDiscount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtCeiling\",\"type\":\"uint256\"}],\"name\":\"setDebtCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_veBoostProxy\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"xBoost\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"yBoost\",\"type\":\"uint256[]\"}],\"name\":\"setLiquidationBoostParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"param\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"}],\"name\":\"setUint64\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoin\",\"outputs\":[{\"internalType\":\"contract IAgToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surplus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetHealthFactor\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"toggleWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleWhitelisting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNormalizedDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultID\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalizedDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veBoostProxy\",\"outputs\":[{\"internalType\":\"contract IVeBoostProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistingActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"xLiquidationBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yLiquidationBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Core Team\",\"details\":\"This implementation only supports non-rebasing ERC20 tokens as collateralThis contract is encoded as a NFT contract\",\"kind\":\"dev\",\"methods\":{\"accrueInterestToTreasury()\":{\"details\":\"`surplus` and `badDebt` should be reset to 0 once their current value have been given to the `treasury` contract\",\"returns\":{\"badDebtValue\":\"Value of the bad debt communicated to the `Treasury`\",\"surplusValue\":\"Value of the surplus communicated to the `Treasury`\"}},\"angle(uint8[],bytes[],address,address)\":{\"details\":\"This function is optimized to reduce gas cost due to payment from or to the user and that expensive calls or computations (like `oracleValue`) are done only once\",\"params\":{\"actions\":\"Set of actions to perform\",\"datas\":\"Data to be decoded for each action: it can include like the `vaultID` or the\",\"from\":\"Address from which stablecoins will be taken if one action includes burning stablecoins. This address should either be the `msg.sender` or be approved by the latter\",\"to\":\"Address to which stablecoins and/or collateral will be sent in case of\"},\"returns\":{\"_0\":\"Struct containing the final transfers executed\"}},\"angle(uint8[],bytes[],address,address,address,bytes)\":{\"details\":\"This function is optimized to reduce gas cost due to payment from or to the user and that expensive calls or computations (like `oracleValue`) are done only once\",\"params\":{\"actions\":\"Set of actions to perform\",\"datas\":\"Data to be decoded for each action: it can include like the `vaultID` or the\",\"from\":\"Address from which stablecoins will be taken if one action includes burning stablecoins. This address should either be the `msg.sender` or be approved by the latter\",\"repayData\":\"Data to pass to the repayment contract in case of\",\"to\":\"Address to which stablecoins and/or collateral will be sent in case of\",\"who\":\"Address of the contract to handle in case of repayment of stablecoins from received collateral\"},\"returns\":{\"paymentData\":\"Struct containing the final transfers executed\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"checkLiquidation(uint256,address)\":{\"details\":\"This function will revert if it's called on a vault that does not exist\",\"params\":{\"liquidator\":\"Address of the liquidator which will be performing the liquidation\",\"vaultID\":\"ID of the vault to check\"},\"returns\":{\"liqOpp\":\"Description of the opportunity of liquidation\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createVault(address)\":{\"details\":\"This function just creates the vault without doing any collateral or\",\"params\":{\"toVault\":\"Address for which the va\"},\"returns\":{\"_0\":\"vaultID ID of the vault created\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getControlledVaults(address)\":{\"details\":\"This function is never to be called on-chain since it iterates over all addresses and is here to reduce dependency on an external graph to link an ID to its owner\",\"params\":{\"spender\":\"Address for which vault ownerships should be checked\"},\"returns\":{\"_0\":\"List of `vaultID` controlled by this address\"}},\"getDebtOut(uint256,uint256,uint256)\":{\"params\":{\"amountStablecoins\":\"Amount of stablecoins to remove from the debt: this amount is to be converted to an internal debt amount\",\"senderBorrowFee\":\"Borrowing fees from the contract which requested this: this is to make sure that people are not arbitraging difference in minting fees\",\"vaultID\":\"ID of the vault to remove debt from\"}},\"getTotalDebt()\":{\"returns\":{\"_0\":\"Total debt across all vaults, taking into account the interest accumulated over time\"}},\"getVaultDebt(uint256)\":{\"params\":{\"vaultID\":\"ID of the vault to check\"},\"returns\":{\"_0\":\"Debt of the vault\"}},\"initialize(address,address,address,(uint256,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint256),string)\":{\"details\":\"The parameters and the oracle are the only elements which could be modified once the contract has been initializedFor the contract to be fully initialized, governance needs to set the parameters for the liquidation boost\",\"params\":{\"_collateral\":\"Collateral supported by this contract\",\"_oracle\":\"Oracle contract used\",\"_symbol\":\"Symbol used to define the `VaultManager` name and symbol\",\"_treasury\":\"Treasury address handling the contract\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"isApprovedOrOwner(address,uint256)\":{\"params\":{\"spender\":\"Address for which vault ownership should be checked\",\"vaultID\":\"ID of the vault to check\"},\"returns\":{\"_0\":\"Whether the `spender` address owns or is approved for `vaultID`\"}},\"liquidate(uint256[],uint256[],address,address)\":{\"details\":\"This function will not revert if it's called on a vault that cannot be liquidated\",\"params\":{\"amounts\":\"Amount of stablecoin to bring for the liquidation of each vault\",\"from\":\"Address from which the stablecoins for the liquidation should be taken: this address should be the `msg.sender` or have received an approval\",\"to\":\"Address to which discounted collateral should be sent\",\"vaultIDs\":\"List of the vaults to liquidate\"}},\"liquidate(uint256[],uint256[],address,address,address,bytes)\":{\"details\":\"This function will revert if it's called on a vault that cannot be liquidated or that does not exist\",\"params\":{\"amounts\":\"Amount of stablecoin to bring for the liquidation of each vault\",\"data\":\"Data to pass to the repayment contract in case of\",\"from\":\"Address from which the stablecoins for the liquidation should be taken: this address should be the `msg.sender` or have received an approval\",\"to\":\"Address to which discounted collateral should be sent\",\"vaultIDs\":\"List of the vaults to liquidate\",\"who\":\"Address of the contract to handle repayment of stablecoins from received collateral\"}},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"setDebtCeiling(uint256)\":{\"params\":{\"_debtCeiling\":\"New value for `debtCeiling`\"}},\"setLiquidationBoostParameters(address,uint256[],uint256[])\":{\"details\":\"There are 2 modes: When boost is enabled, `xBoost` and `yBoost` should have a length of 2, but if they have a higher length contract will still work as expected. Contract will also work as expected if their length differ When boost is disabled, `_veBoostProxy` needs to be zero address and `yBoost[0]` is the base boost\",\"params\":{\"_veBoostProxy\":\"Address which queries veANGLE balances and adjusted balances from delegation\",\"xBoost\":\"Threshold values of veANGLE adjusted balances\",\"yBoost\":\"Values of the liquidation boost at the threshold values of x\"}},\"setOracle(address)\":{\"params\":{\"_oracle\":\"Reference to the oracle contract\"}},\"setTreasury(address)\":{\"details\":\"All required checks when setting up a treasury contract are performed in the contract calling this function\",\"params\":{\"_treasury\":\"New treasury contract\"}},\"setUint64(uint64,bytes32)\":{\"details\":\"This function performs the required checks when updating a parameterWhen setting parameters governance should make sure that when `HF < CF/((1-surcharge)(1-discount))` and hence when liquidating a vault is going to decrease its health factor, `discount = max discount`. Otherwise, it may be profitable for the liquidator to liquidate in multiple times: as it will decrease the HF and therefore increase the discount between each time\",\"params\":{\"param\":\"Value for the parameter\",\"what\":\"Parameter to change\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"toggleWhitelist(address)\":{\"params\":{\"target\":\"Address to toggle\"}},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"VaultManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BASE_INTEREST()\":{\"notice\":\"Base used for interest rate computation\"},\"BASE_PARAMS()\":{\"notice\":\"Base used for parameter computation\"},\"HALF_BASE_INTEREST()\":{\"notice\":\"Used for interest rate computation\"},\"accrueInterestToTreasury()\":{\"notice\":\"Accrues interest accumulated across all vaults to the surplus and sends the surplus to the treasury\"},\"angle(uint8[],bytes[],address,address)\":{\"notice\":\"Allows composability between calls to the different entry points of this module. Any user calling this function can perform any of the allowed actions in the order of their choice\"},\"angle(uint8[],bytes[],address,address,address,bytes)\":{\"notice\":\"Allows composability between calls to the different entry points of this module. Any user calling this function can perform any of the allowed actions in the order of their choice\"},\"badDebt()\":{\"notice\":\"Bad debt made from liquidated vaults which ended up having no collateral and a positive amount of stablecoins\"},\"borrowFee()\":{\"notice\":\"Upfront fee taken when borrowing stablecoins\"},\"checkLiquidation(uint256,address)\":{\"notice\":\"Checks whether a given vault is liquidable and if yes gives information regarding its liquidation\"},\"collateral()\":{\"notice\":\"Reference to the collateral handled by this `VaultManager`\"},\"collateralFactor()\":{\"notice\":\"Encodes the maximum ratio stablecoin/collateral a vault can have before being liquidated. It's what determines the minimum collateral ratio of a position\"},\"createVault(address)\":{\"notice\":\"Creates a vault\"},\"debtCeiling()\":{\"notice\":\"Maximum amount of stablecoins that can be issued with this contract\"},\"dust()\":{\"notice\":\"Minimum amount of debt a vault can have\"},\"getControlledVaults(address)\":{\"notice\":\"Returns all the vaults owned or controlled (under the form of approval) by an address\"},\"getDebtOut(uint256,uint256,uint256)\":{\"notice\":\"Removes debt from a vault after being requested to do so by another `vaultManager` contract\"},\"getTotalDebt()\":{\"notice\":\"Gets the total debt across all vaults\"},\"getVaultDebt(uint256)\":{\"notice\":\"Gets the current debt of a vault\"},\"initialize(address,address,address,(uint256,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint256),string)\":{\"notice\":\"Initializes the `VaultManager` contract\"},\"interestAccumulator()\":{\"notice\":\"The `interestAccumulator` variable keeps track of the interest that should accrue to the protocol. The stored value is not necessarily the true value: this one is recomputed every time an action takes place within the protocol\"},\"interestRate()\":{\"notice\":\"Per second interest taken to borrowers taking agToken loans\"},\"isApprovedOrOwner(address,uint256)\":{\"notice\":\"Checks whether a given address is approved for a vault or owns this vault\"},\"isWhitelisted(address)\":{\"notice\":\"Maps an address to whether it's whitelisted and can open or own a vault\"},\"lastInterestAccumulatorUpdated()\":{\"notice\":\"Timestamp at which the `interestAccumulator` was updated\"},\"liquidate(uint256[],uint256[],address,address)\":{\"notice\":\"Liquidates an ensemble of vaults specified by their IDs\"},\"liquidate(uint256[],uint256[],address,address,address,bytes)\":{\"notice\":\"Liquidates an ensemble of vaults specified by their IDs\"},\"liquidationSurcharge()\":{\"notice\":\"Fee taken by the protocol during a liquidation. Technically, this value is not the fee per se, it's 1 - fee. For instance for a 2% fee, `liquidationSurcharge` should be 98%\"},\"maxLiquidationDiscount()\":{\"notice\":\"Maximum discount given to liquidators\"},\"oracle()\":{\"notice\":\"Oracle contract to get access to the price of the collateral with respect to the stablecoin\"},\"paused()\":{\"notice\":\"Whether the vault paused or not\"},\"setBaseURI(string)\":{\"notice\":\"Changes the ERC721 metadata URI\"},\"setDebtCeiling(uint256)\":{\"notice\":\"Sets `debtCeiling`\"},\"setLiquidationBoostParameters(address,uint256[],uint256[])\":{\"notice\":\"Sets the parameters for the liquidation booster which encodes the slope of the discount\"},\"setOracle(address)\":{\"notice\":\"Changes the reference to the oracle contract used to get the price of the oracle\"},\"setTreasury(address)\":{\"notice\":\"Sets the treasury contract\"},\"setUint64(uint64,bytes32)\":{\"notice\":\"Sets parameters encoded as uint64\"},\"stablecoin()\":{\"notice\":\"Stablecoin handled by this contract. Another `VaultManager` contract could have the same rights as this `VaultManager` on the stablecoin contract\"},\"surplus()\":{\"notice\":\"Surplus accumulated by the contract: surplus is always in stablecoins, and is then reset when the value is communicated to the treasury contract\"},\"targetHealthFactor()\":{\"notice\":\"Maximum Health factor at which a vault can end up after a liquidation (unless it's fully liquidated)\"},\"togglePause()\":{\"notice\":\"Pauses external permissionless functions of the contract\"},\"toggleWhitelist(address)\":{\"notice\":\"Changes the whitelisting of an address\"},\"toggleWhitelisting()\":{\"notice\":\"Toggles permission for owning vaults by any account\"},\"totalNormalizedDebt()\":{\"notice\":\"Total normalized amount of stablecoins borrowed\"},\"treasury()\":{\"notice\":\"Reference to the `treasury` contract handling this `VaultManager`\"},\"vaultData(uint256)\":{\"notice\":\"Maps a `vaultID` to its data (namely collateral amount and normalized debt)\"},\"veBoostProxy()\":{\"notice\":\"Reference to the contract which computes adjusted veANGLE balances for liquidators boosts\"},\"whitelistingActivated()\":{\"notice\":\"Whether whitelisting is required to own a vault or not\"},\"xLiquidationBoost(uint256)\":{\"notice\":\"Threshold veANGLE balance values for the computation of the boost for liquidators: the length of this array should be 2\"},\"yLiquidationBoost(uint256)\":{\"notice\":\"Values of the liquidation boost at the threshold values of x\"}},\"notice\":\"This contract allows people to deposit collateral and open up loans of a given AgToken. It handles all the loan logic (fees and interest rate) as well as the liquidation logic\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaultManager/VaultManager.sol\":\"VaultManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\n\",\"keccak256\":\"0xc0e1ac396ac591a4c38ddcdd220321128eb94424d73e41a573cf58d5c643af38\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\",\"keccak256\":\"0x1e88abdf82fcbbf98f97be17ea56c924376350637896bc37366ec9f89b7c2628\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/IAgToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title IAgToken\\n/// @author Angle Core Team\\n/// @notice Interface for the stablecoins `AgToken` contracts\\n/// @dev This interface only contains functions of the `AgToken` contract which are called by other contracts\\n/// of this module or of the first module of the Angle Protocol\\ninterface IAgToken is IERC20Upgradeable {\\n    // ======================= Minter Role Only Functions ===========================\\n\\n    /// @notice Lets the `StableMaster` contract or another whitelisted contract mint agTokens\\n    /// @param account Address to mint to\\n    /// @param amount Amount to mint\\n    /// @dev The contracts allowed to issue agTokens are the `StableMaster` contract, `VaultManager` contracts\\n    /// associated to this stablecoin as well as the flash loan module (if activated) and potentially contracts\\n    /// whitelisted by governance\\n    function mint(address account, uint256 amount) external;\\n\\n    /// @notice Burns `amount` tokens from a `burner` address after being asked to by `sender`\\n    /// @param amount Amount of tokens to burn\\n    /// @param burner Address to burn from\\n    /// @param sender Address which requested the burn from `burner`\\n    /// @dev This method is to be called by a contract with the minter right after being requested\\n    /// to do so by a `sender` address willing to burn tokens from another `burner` address\\n    /// @dev The method checks the allowance between the `sender` and the `burner`\\n    function burnFrom(\\n        uint256 amount,\\n        address burner,\\n        address sender\\n    ) external;\\n\\n    /// @notice Burns `amount` tokens from a `burner` address\\n    /// @param amount Amount of tokens to burn\\n    /// @param burner Address to burn from\\n    /// @dev This method is to be called by a contract with a minter right on the AgToken after being\\n    /// requested to do so by an address willing to burn tokens from its address\\n    function burnSelf(uint256 amount, address burner) external;\\n\\n    // ========================= Treasury Only Functions ===========================\\n\\n    /// @notice Adds a minter in the contract\\n    /// @param minter Minter address to add\\n    /// @dev Zero address checks are performed directly in the `Treasury` contract\\n    function addMinter(address minter) external;\\n\\n    /// @notice Removes a minter from the contract\\n    /// @param minter Minter address to remove\\n    /// @dev This function can also be called by a minter wishing to revoke itself\\n    function removeMinter(address minter) external;\\n\\n    /// @notice Sets a new treasury contract\\n    /// @param _treasury New treasury address\\n    function setTreasury(address _treasury) external;\\n\\n    // ========================= External functions ================================\\n\\n    /// @notice Checks whether an address has the right to mint agTokens\\n    /// @param minter Address for which the minting right should be checked\\n    /// @return Whether the address has the right to mint agTokens or not\\n    function isMinter(address minter) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcd50d86128e457543483981ea6127cb8dac03584b919614352aa89d7e991405c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICoreBorrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\n/// @title ICoreBorrow\\n/// @author Angle Core Team\\n/// @notice Interface for the `CoreBorrow` contract\\n/// @dev This interface only contains functions of the `CoreBorrow` contract which are called by other contracts\\n/// of this module\\ninterface ICoreBorrow {\\n    /// @notice Checks if an address corresponds to a treasury of a stablecoin with a flash loan\\n    /// module initialized on it\\n    /// @param treasury Address to check\\n    /// @return Whether the address has the `FLASHLOANER_TREASURY_ROLE` or not\\n    function isFlashLoanerTreasury(address treasury) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GOVERNOR_ROLE` or not\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor or a guardian of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GUARDIAN_ROLE` or not\\n    /// @dev Governance should make sure when adding a governor to also give this governor the guardian\\n    /// role by calling the `addGovernor` function\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x25b65b3f506ca91745a444502a36f0556585d82d9d60f4bd32fbcaabc12840d4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFlashAngle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IAgToken.sol\\\";\\nimport \\\"./ICoreBorrow.sol\\\";\\n\\n/// @title IFlashAngle\\n/// @author Angle Core Team\\n/// @notice Interface for the `FlashAngle` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module\\ninterface IFlashAngle {\\n    /// @notice Reference to the `CoreBorrow` contract managing the FlashLoan module\\n    function core() external view returns (ICoreBorrow);\\n\\n    /// @notice Sends the fees taken from flash loans to the treasury contract associated to the stablecoin\\n    /// @param stablecoin Stablecoin from which profits should be sent\\n    /// @return balance Amount of profits sent\\n    /// @dev This function can only be called by the treasury contract\\n    function accrueInterestToTreasury(IAgToken stablecoin) external returns (uint256 balance);\\n\\n    /// @notice Adds support for a stablecoin\\n    /// @param _treasury Treasury associated to the stablecoin to add support for\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function addStablecoinSupport(address _treasury) external;\\n\\n    /// @notice Removes support for a stablecoin\\n    /// @param _treasury Treasury associated to the stablecoin to remove support for\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function removeStablecoinSupport(address _treasury) external;\\n\\n    /// @notice Sets a new core contract\\n    /// @param _core Core contract address to set\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function setCore(address _core) external;\\n}\\n\",\"keccak256\":\"0xc17654e512897efe41e3f1173c07dd4676e8c699a72b859d14b473d1e8300e45\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./ITreasury.sol\\\";\\n\\n/// @title IOracle\\n/// @author Angle Core Team\\n/// @notice Interface for the `Oracle` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module\\ninterface IOracle {\\n    /// @notice Reads the rate from the Chainlink circuit\\n    /// @return quoteAmount The current rate between the in-currency and out-currency in the base\\n    /// of the out currency\\n    /// @dev For instance if the out currency is EUR (and hence agEUR), then the base of the returned\\n    /// value is 10**18\\n    function read() external view returns (uint256);\\n\\n    /// @notice Changes the treasury contract\\n    /// @param _treasury Address of the new treasury contract\\n    /// @dev This function can be called by an approved `vaultManager` contract which can call\\n    /// this function after being requested to do so by a `treasury` contract\\n    /// @dev In some situations (like reactor contracts), the `vaultManager` may not directly be linked\\n    /// to the `oracle` contract and as such we may need governors to be able to call this function as well\\n    function setTreasury(address _treasury) external;\\n\\n    /// @notice Reference to the `treasury` contract handling this `VaultManager`\\n    function treasury() external view returns (ITreasury treasury);\\n}\\n\",\"keccak256\":\"0x20dae087817418c90ba2b3cd096cd50c6b57d61e86d4bb794356f88aaeaf9ff1\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRepayCallee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\n/// @title IRepayCallee\\n/// @author Angle Core Team\\n/// @notice Interface for RepayCallee contracts\\n/// @dev This interface defines the key functions `RepayCallee` contracts should have when interacting with\\n/// Angle\\ninterface IRepayCallee {\\n    /// @notice Notifies a contract that an address should be given stablecoins\\n    /// @param stablecoinRecipient Address to which stablecoins should be sent\\n    /// @param stablecoinOwed Amount of stablecoins owed to the address\\n    /// @param collateralObtained Amount of collateral obtained by a related address prior\\n    /// to the call to this function\\n    /// @param data Extra data needed (to encode Uniswap swaps for instance)\\n    function repayCallStablecoin(\\n        address stablecoinRecipient,\\n        uint256 stablecoinOwed,\\n        uint256 collateralObtained,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Notifies a contract that an address should be given collateral\\n    /// @param collateralRecipient Address to which collateral should be sent\\n    /// @param stablecoinObtained Amount of stablecoins received by the related address prior to this call\\n    /// @param collateralOwed Amount of collateral owed by the address\\n    /// @param data Extra data needed (to encode Uniswap swaps for instance)\\n    function repayCallCollateral(\\n        address collateralRecipient,\\n        uint256 stablecoinObtained,\\n        uint256 collateralOwed,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0c6430cb86dbac8a50acf437c6ebdc3135e5aeaaa2927f4e3a0f219914d5acb4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IAgToken.sol\\\";\\nimport \\\"./ICoreBorrow.sol\\\";\\nimport \\\"./IFlashAngle.sol\\\";\\n\\n/// @title ITreasury\\n/// @author Angle Core Team\\n/// @notice Interface for the `Treasury` contract\\n/// @dev This interface only contains functions of the `Treasury` which are called by other contracts\\n/// of this module\\ninterface ITreasury {\\n    /// @notice Stablecoin handled by this `treasury` contract\\n    function stablecoin() external view returns (IAgToken);\\n\\n    /// @notice Checks whether a given address has the  governor role\\n    /// @param admin Address to check\\n    /// @return Whether the address has the governor role\\n    /// @dev Access control is only kept in the `CoreBorrow` contract\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether a given address has the guardian or the governor role\\n    /// @param admin Address to check\\n    /// @return Whether the address has the guardian or the governor role\\n    /// @dev Access control is only kept in the `CoreBorrow` contract which means that this function\\n    /// queries the `CoreBorrow` contract\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether a given address has well been initialized in this contract\\n    /// as a `VaultManager``\\n    /// @param _vaultManager Address to check\\n    /// @return Whether the address has been initialized or not\\n    function isVaultManager(address _vaultManager) external view returns (bool);\\n\\n    /// @notice Sets a new flash loan module for this stablecoin\\n    /// @param _flashLoanModule Reference to the new flash loan module\\n    /// @dev This function removes the minting right to the old flash loan module and grants\\n    /// it to the new module\\n    function setFlashLoanModule(address _flashLoanModule) external;\\n}\\n\",\"keccak256\":\"0xced9b7256fcbedc75682037e11ce51fe9116e5604794b8545e00dea0607629cc\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\n// ========================= Key Structs and Enums =============================\\n\\n/// @notice Parameters associated to a given `VaultManager` contract: these all correspond\\n/// to parameters which signification is detailed in the `VaultManagerStorage` file\\nstruct VaultParameters {\\n    uint256 debtCeiling;\\n    uint64 collateralFactor;\\n    uint64 targetHealthFactor;\\n    uint64 borrowFee;\\n    uint64 interestRate;\\n    uint64 liquidationSurcharge;\\n    uint64 maxLiquidationDiscount;\\n    bool whitelistingActivated;\\n    uint256 baseBoost;\\n}\\n\\n/// @notice Data stored to track someone's loan (or equivalently called position)\\nstruct Vault {\\n    // Amount of collateral deposited in the vault\\n    uint256 collateralAmount;\\n    // Normalized value of the debt (that is to say of the stablecoins borrowed)\\n    uint256 normalizedDebt;\\n}\\n\\n/// @notice For a given `vaultID`, this encodes a liquidation opportunity that is to say details about the maximum\\n/// amount that could be repaid by liquidating the position\\n/// @dev All the values are null in the case of a vault which cannot be liquidated under these conditions\\nstruct LiquidationOpportunity {\\n    // Maximum stablecoin amount that can be repaid upon liquidating the vault\\n    uint256 maxStablecoinAmountToRepay;\\n    // Collateral amount given to the person in the case where the maximum amount to repay is given\\n    uint256 maxCollateralAmountGiven;\\n    // Threshold value of stablecoin amount to repay: it is ok for a liquidator to repay below threshold,\\n    // but if this threshold is non null and the liquidator wants to repay more than threshold, it should repay\\n    // the max stablecoin amount given in this vault\\n    uint256 thresholdRepayAmount;\\n    // Discount proposed to the liquidator on the collateral\\n    uint256 discount;\\n    // Amount of debt in the vault\\n    uint256 currentDebt;\\n}\\n\\n/// @notice Data stored during a liquidation process to keep in memory what's due to a liquidator and some\\n/// essential data for vaults being liquidated\\nstruct LiquidatorData {\\n    // Current amount of stablecoins the liquidator should give to the contract\\n    uint256 stablecoinAmountToReceive;\\n    // Current amount of collateral the contract should give to the liquidator\\n    uint256 collateralAmountToGive;\\n    // Bad debt accrued across the liquidation process\\n    uint256 badDebtFromLiquidation;\\n    // Oracle value (in stablecoin base) at the time of the liquidation\\n    uint256 oracleValue;\\n    // Value of the interestRateAccumulator at the time of the call\\n    uint256 newInterestRateAccumulator;\\n}\\n\\n/// @notice Data to track during a series of action the amount to give or receive in stablecoins and collateral\\n/// to the caller or associated addresses\\nstruct PaymentData {\\n    // Stablecoin amount the contract should give\\n    uint256 stablecoinAmountToGive;\\n    // Stablecoin amount owed to the contract\\n    uint256 stablecoinAmountToReceive;\\n    // Collateral amount the contract should give\\n    uint256 collateralAmountToGive;\\n    // Collateral amount owed to the contract\\n    uint256 collateralAmountToReceive;\\n}\\n\\n/// @notice Actions possible when composing calls to the different entry functions proposed\\nenum ActionType {\\n    createVault,\\n    closeVault,\\n    addCollateral,\\n    removeCollateral,\\n    repayDebt,\\n    borrow,\\n    getDebtIn,\\n    permit\\n}\\n\\n// ========================= Interfaces =============================\\n\\n/// @title IVaultManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the `VaultManager` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module (without getters)\\ninterface IVaultManagerFunctions {\\n    /// @notice Accrues interest accumulated across all vaults to the surplus and sends the surplus to the treasury\\n    /// @return surplusValue Value of the surplus communicated to the `Treasury`\\n    /// @return badDebtValue Value of the bad debt communicated to the `Treasury`\\n    /// @dev `surplus` and `badDebt` should be reset to 0 once their current value have been given to the `treasury` contract\\n    function accrueInterestToTreasury() external returns (uint256 surplusValue, uint256 badDebtValue);\\n\\n    /// @notice Removes debt from a vault after being requested to do so by another `vaultManager` contract\\n    /// @param vaultID ID of the vault to remove debt from\\n    /// @param amountStablecoins Amount of stablecoins to remove from the debt: this amount is to be converted to an\\n    /// internal debt amount\\n    /// @param senderBorrowFee Borrowing fees from the contract which requested this: this is to make sure that people are not\\n    /// arbitraging difference in minting fees\\n    function getDebtOut(\\n        uint256 vaultID,\\n        uint256 amountStablecoins,\\n        uint256 senderBorrowFee\\n    ) external;\\n\\n    /// @notice Gets the current debt of a vault\\n    /// @param vaultID ID of the vault to check\\n    /// @return Debt of the vault\\n    function getVaultDebt(uint256 vaultID) external view returns (uint256);\\n\\n    /// @notice Sets the treasury contract\\n    /// @param _treasury New treasury contract\\n    /// @dev All required checks when setting up a treasury contract are performed in the contract\\n    /// calling this function\\n    function setTreasury(address _treasury) external;\\n\\n    /// @notice Creates a vault\\n    /// @param toVault Address for which the va\\n    /// @return vaultID ID of the vault created\\n    /// @dev This function just creates the vault without doing any collateral or\\n    function createVault(address toVault) external returns (uint256);\\n\\n    /// @notice Allows composability between calls to the different entry points of this module. Any user calling\\n    /// this function can perform any of the allowed actions in the order of their choice\\n    /// @param actions Set of actions to perform\\n    /// @param datas Data to be decoded for each action: it can include like the `vaultID` or the\\n    /// @param from Address from which stablecoins will be taken if one action includes burning stablecoins. This address\\n    /// should either be the `msg.sender` or be approved by the latter\\n    /// @param to Address to which stablecoins and/or collateral will be sent in case of\\n    /// @return paymentData Struct containing the final transfers executed\\n    /// @dev This function is optimized to reduce gas cost due to payment from or to the user and that expensive calls\\n    /// or computations (like `oracleValue`) are done only once\\n    function angle(\\n        ActionType[] memory actions,\\n        bytes[] memory datas,\\n        address from,\\n        address to\\n    ) external payable returns (PaymentData memory paymentData);\\n\\n    /// @notice Allows composability between calls to the different entry points of this module. Any user calling\\n    /// this function can perform any of the allowed actions in the order of their choice\\n    /// @param actions Set of actions to perform\\n    /// @param datas Data to be decoded for each action: it can include like the `vaultID` or the\\n    /// @param from Address from which stablecoins will be taken if one action includes burning stablecoins. This address\\n    /// should either be the `msg.sender` or be approved by the latter\\n    /// @param to Address to which stablecoins and/or collateral will be sent in case of\\n    /// @param who Address of the contract to handle in case of repayment of stablecoins from received collateral\\n    /// @param repayData Data to pass to the repayment contract in case of\\n    /// @return paymentData Struct containing the final transfers executed\\n    /// @dev This function is optimized to reduce gas cost due to payment from or to the user and that expensive calls\\n    /// or computations (like `oracleValue`) are done only once\\n    function angle(\\n        ActionType[] memory actions,\\n        bytes[] memory datas,\\n        address from,\\n        address to,\\n        address who,\\n        bytes memory repayData\\n    ) external payable returns (PaymentData memory paymentData);\\n\\n    /// @notice Initializes the `VaultManager` contract\\n    /// @param _treasury Treasury address handling the contract\\n    /// @param _collateral Collateral supported by this contract\\n    /// @param _oracle Oracle contract used\\n    /// @param _symbol Symbol used to define the `VaultManager` name and symbol\\n    /// @dev The parameters and the oracle are the only elements which could be modified once the\\n    /// contract has been initialized\\n    /// @dev For the contract to be fully initialized, governance needs to set the parameters for the liquidation\\n    /// boost\\n    function initialize(\\n        ITreasury _treasury,\\n        IERC20 _collateral,\\n        IOracle _oracle,\\n        VaultParameters calldata params,\\n        string memory _symbol\\n    ) external;\\n}\\n\\n/// @title IVaultManagerStorage\\n/// @author Angle Core Team\\n/// @notice Interface for the `VaultManager` contract\\n/// @dev This interface contains getters of the contract's public variables used by other contracts\\n/// of this module\\ninterface IVaultManagerStorage {\\n    /// @notice Minimum amount of debt a vault can have\\n    function dust() external view returns (uint256);\\n\\n    /// @notice Encodes the maximum ratio stablecoin/collateral a vault can have before being liquidated. It's what\\n    /// determines the minimum collateral ratio of a position\\n    function collateralFactor() external view returns (uint64);\\n\\n    /// @notice Stablecoin handled by this contract. Another `VaultManager` contract could have\\n    /// the same rights as this `VaultManager` on the stablecoin contract\\n    function stablecoin() external view returns (IAgToken);\\n\\n    /// @notice Reference to the `treasury` contract handling this `VaultManager`\\n    function treasury() external view returns (ITreasury);\\n\\n    /// @notice Oracle contract to get access to the price of the collateral with respect to the stablecoin\\n    function oracle() external view returns (IOracle);\\n\\n    /// @notice The `interestAccumulator` variable keeps track of the interest that should accrue to the protocol.\\n    /// The stored value is not necessarily the true value: this one is recomputed every time an action takes place\\n    /// within the protocol\\n    function interestAccumulator() external view returns (uint256);\\n\\n    /// @notice Reference to the collateral handled by this `VaultManager`\\n    function collateral() external view returns (IERC20);\\n\\n    /// @notice Total normalized amount of stablecoins borrowed\\n    function totalNormalizedDebt() external view returns (uint256);\\n\\n    /// @notice Maps a `vaultID` to its data (namely collateral amount and normalized debt)\\n    function vaultData(uint256 vaultID) external view returns (uint256 collateralAmount, uint256 normalizedDebt);\\n}\\n\\n/// @title IVaultManager\\n/// @author Angle Core Team\\n/// @notice Interface for the `VaultManager` contract\\ninterface IVaultManager is IVaultManagerFunctions, IVaultManagerStorage, IERC721Metadata {\\n\\n}\\n\",\"keccak256\":\"0x8fe65f8e585b103ab7c8619c78748371f340125d163c3dbcf05750177e831a92\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVeBoostProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\n/// @title IVeBoostProxy\\n/// @author Angle Core Team\\n/// @notice Interface for the `VeBoostProxy` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module\\n/// @dev The `veBoostProxy` contract used by Angle is a full fork of Curve Finance implementation\\ninterface IVeBoostProxy {\\n    /// @notice Reads the adjusted veANGLE balance of an address (adjusted by delegation)\\n    //solhint-disable-next-line\\n    function adjusted_balance_of(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3225addd919f109d6178d0bbc9b53b25589a015283815dfed34d3d2b3029aff7\",\"license\":\"GPL-3.0\"},\"contracts/vaultManager/VaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./VaultManagerERC721.sol\\\";\\n\\n/// @title VaultManager\\n/// @author Angle Core Team\\n/// @notice This contract allows people to deposit collateral and open up loans of a given AgToken. It handles all the loan\\n/// logic (fees and interest rate) as well as the liquidation logic\\n/// @dev This implementation only supports non-rebasing ERC20 tokens as collateral\\n/// @dev This contract is encoded as a NFT contract\\ncontract VaultManager is VaultManagerERC721, IVaultManagerFunctions {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    /// @inheritdoc IVaultManagerFunctions\\n    function initialize(\\n        ITreasury _treasury,\\n        IERC20 _collateral,\\n        IOracle _oracle,\\n        VaultParameters calldata params,\\n        string memory _symbol\\n    ) external initializer {\\n        require(_oracle.treasury() == _treasury, \\\"33\\\");\\n        treasury = _treasury;\\n        collateral = _collateral;\\n        _collatBase = 10**(IERC20Metadata(address(collateral)).decimals());\\n        stablecoin = IAgToken(_treasury.stablecoin());\\n        oracle = _oracle;\\n\\n        name = string.concat(\\\"Angle Protocol \\\", _symbol, \\\" Vault\\\");\\n        symbol = string.concat(_symbol, \\\"-vault\\\");\\n\\n        interestAccumulator = BASE_INTEREST;\\n        lastInterestAccumulatorUpdated = block.timestamp;\\n\\n        // Checking if the parameters have been correctly initialized\\n        require(\\n            params.collateralFactor <= params.liquidationSurcharge &&\\n                BASE_PARAMS <= params.targetHealthFactor &&\\n                params.liquidationSurcharge <= BASE_PARAMS &&\\n                params.borrowFee <= BASE_PARAMS &&\\n                params.maxLiquidationDiscount < BASE_PARAMS &&\\n                0 < params.baseBoost,\\n            \\\"15\\\"\\n        );\\n        debtCeiling = params.debtCeiling;\\n        collateralFactor = params.collateralFactor;\\n        targetHealthFactor = params.targetHealthFactor;\\n        borrowFee = params.borrowFee;\\n        interestRate = params.interestRate;\\n        liquidationSurcharge = params.liquidationSurcharge;\\n        maxLiquidationDiscount = params.maxLiquidationDiscount;\\n        whitelistingActivated = params.whitelistingActivated;\\n        yLiquidationBoost = [params.baseBoost];\\n        paused = true;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(uint256 dust_, uint256 dustCollateral_) VaultManagerStorage(dust_, dustCollateral_) {}\\n\\n    // ============================== Modifiers ====================================\\n\\n    /// @notice Checks whether the `msg.sender` has the governor role or not\\n    modifier onlyGovernor() {\\n        require(treasury.isGovernor(msg.sender), \\\"1\\\");\\n        _;\\n    }\\n\\n    /// @notice Checks whether the `msg.sender` has the governor role or the guardian role\\n    modifier onlyGovernorOrGuardian() {\\n        require(treasury.isGovernorOrGuardian(msg.sender), \\\"2\\\");\\n        _;\\n    }\\n\\n    /// @notice Checks whether the `msg.sender` is the treasury contract\\n    modifier onlyTreasury() {\\n        require(msg.sender == address(treasury), \\\"14\\\");\\n        _;\\n    }\\n\\n    /// @notice Checks whether the contract is paused\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"42\\\");\\n        _;\\n    }\\n\\n    /// @notice If `vaultID` is 0, use the latest created vault\\n    /// @param vaultID targeted vault\\n    modifier useLatestVault(uint256 vaultID) {\\n        if (vaultID == 0) vaultID = _vaultIDCount;\\n        _;\\n    }\\n\\n    // =========================== Vault Functions =================================\\n\\n    // ========================= External Access Functions =========================\\n\\n    /// @inheritdoc IVaultManagerFunctions\\n    function createVault(address toVault) external whenNotPaused returns (uint256) {\\n        return _mint(toVault);\\n    }\\n\\n    /// @inheritdoc IVaultManagerFunctions\\n    function angle(\\n        ActionType[] memory actions,\\n        bytes[] memory datas,\\n        address from,\\n        address to\\n    ) external payable returns (PaymentData memory) {\\n        return angle(actions, datas, from, to, address(0), new bytes(0));\\n    }\\n\\n    /// @inheritdoc IVaultManagerFunctions\\n    function angle(\\n        ActionType[] memory actions,\\n        bytes[] memory datas,\\n        address from,\\n        address to,\\n        address who,\\n        bytes memory repayData\\n    ) public payable whenNotPaused nonReentrant returns (PaymentData memory paymentData) {\\n        uint256 newInterestRateAccumulator;\\n        uint256 oracleValue;\\n        uint256 collateralAmount;\\n        uint256 stablecoinAmount;\\n        uint256 vaultID;\\n        for (uint256 i = 0; i < actions.length; i++) {\\n            ActionType action = actions[i];\\n            if (action == ActionType.createVault) {\\n                _mint(abi.decode(datas[i], (address)));\\n            } else if (action == ActionType.closeVault) {\\n                (stablecoinAmount, collateralAmount, oracleValue, newInterestRateAccumulator) = _closeVault(\\n                    abi.decode(datas[i], (uint256)),\\n                    oracleValue,\\n                    newInterestRateAccumulator\\n                );\\n                paymentData.collateralAmountToGive += collateralAmount;\\n                paymentData.stablecoinAmountToReceive += stablecoinAmount;\\n            } else if (action == ActionType.addCollateral) {\\n                (vaultID, collateralAmount) = abi.decode(datas[i], (uint256, uint256));\\n                _addCollateral(vaultID, collateralAmount);\\n                paymentData.collateralAmountToReceive += collateralAmount;\\n            } else if (action == ActionType.removeCollateral) {\\n                (vaultID, collateralAmount) = abi.decode(datas[i], (uint256, uint256));\\n                (oracleValue, newInterestRateAccumulator) = _removeCollateral(\\n                    vaultID,\\n                    collateralAmount,\\n                    oracleValue,\\n                    newInterestRateAccumulator\\n                );\\n                paymentData.collateralAmountToGive += collateralAmount;\\n            } else if (action == ActionType.repayDebt) {\\n                (vaultID, stablecoinAmount) = abi.decode(datas[i], (uint256, uint256));\\n                (stablecoinAmount, newInterestRateAccumulator) = _repayDebt(\\n                    vaultID,\\n                    stablecoinAmount,\\n                    newInterestRateAccumulator\\n                );\\n                paymentData.stablecoinAmountToReceive += stablecoinAmount;\\n            } else if (action == ActionType.borrow) {\\n                (vaultID, stablecoinAmount) = abi.decode(datas[i], (uint256, uint256));\\n                (stablecoinAmount, oracleValue, newInterestRateAccumulator) = _borrow(\\n                    vaultID,\\n                    stablecoinAmount,\\n                    oracleValue,\\n                    newInterestRateAccumulator\\n                );\\n                paymentData.stablecoinAmountToGive += stablecoinAmount;\\n            } else if (action == ActionType.getDebtIn) {\\n                address vaultManager;\\n                uint256 dstVaultID;\\n                (vaultID, vaultManager, dstVaultID, stablecoinAmount) = abi.decode(\\n                    datas[i],\\n                    (uint256, address, uint256, uint256)\\n                );\\n                (oracleValue, newInterestRateAccumulator) = _getDebtIn(\\n                    vaultID,\\n                    IVaultManager(vaultManager),\\n                    dstVaultID,\\n                    stablecoinAmount,\\n                    oracleValue,\\n                    newInterestRateAccumulator\\n                );\\n            } else if (action == ActionType.permit) {\\n                address owner;\\n                bytes32 r;\\n                bytes32 s;\\n                // Watch out naming conventions for permit are not respected to save some space and reduce the stack size\\n                // `vaultID` is used in place of the `deadline` parameter\\n                // Same for `collateralAmount` used in place of `value`\\n                // `stablecoinAmount` is used in place of the `v`\\n                (owner, collateralAmount, vaultID, stablecoinAmount, r, s) = abi.decode(\\n                    datas[i],\\n                    (address, uint256, uint256, uint256, bytes32, bytes32)\\n                );\\n                IERC20PermitUpgradeable(address(collateral)).permit(\\n                    owner,\\n                    address(this),\\n                    collateralAmount,\\n                    vaultID,\\n                    uint8(stablecoinAmount),\\n                    r,\\n                    s\\n                );\\n            }\\n        }\\n\\n        // Processing the different cases for the repayment, there are 4 of them:\\n        // - (1) Stablecoins to receive + collateral to send\\n        // - (2) Stablecoins to receive + collateral to receive\\n        // - (3) Stablecoins to send + collateral to send\\n        // - (4) Stablecoins to send + collateral to receive\\n        if (paymentData.stablecoinAmountToReceive >= paymentData.stablecoinAmountToGive) {\\n            uint256 stablecoinPayment = paymentData.stablecoinAmountToReceive - paymentData.stablecoinAmountToGive;\\n            if (paymentData.collateralAmountToGive >= paymentData.collateralAmountToReceive) {\\n                // In the case where all amounts are null, the function will enter here and nothing will be done\\n                // for the repayment\\n                _handleRepay(\\n                    // Collateral payment is the difference between what to give and what to receive\\n                    paymentData.collateralAmountToGive - paymentData.collateralAmountToReceive,\\n                    stablecoinPayment,\\n                    from,\\n                    to,\\n                    who,\\n                    repayData\\n                );\\n            } else {\\n                if (stablecoinPayment > 0) stablecoin.burnFrom(stablecoinPayment, from, msg.sender);\\n                // In this case the collateral amount is necessarily non null\\n                collateral.safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    paymentData.collateralAmountToReceive - paymentData.collateralAmountToGive\\n                );\\n            }\\n        } else {\\n            uint256 stablecoinPayment = paymentData.stablecoinAmountToGive - paymentData.stablecoinAmountToReceive;\\n            // `stablecoinPayment` is strictly positive in this case\\n            stablecoin.mint(to, stablecoinPayment);\\n            if (paymentData.collateralAmountToGive > paymentData.collateralAmountToReceive) {\\n                collateral.safeTransfer(to, paymentData.collateralAmountToGive - paymentData.collateralAmountToReceive);\\n            } else {\\n                uint256 collateralPayment = paymentData.collateralAmountToReceive - paymentData.collateralAmountToGive;\\n                if (collateralPayment > 0) {\\n                    if (repayData.length > 0) {\\n                        IRepayCallee(who).repayCallCollateral(\\n                            msg.sender,\\n                            stablecoinPayment,\\n                            collateralPayment,\\n                            repayData\\n                        );\\n                    }\\n                    collateral.safeTransferFrom(msg.sender, address(this), collateralPayment);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IVaultManagerFunctions\\n    function getDebtOut(\\n        uint256 vaultID,\\n        uint256 stablecoinAmount,\\n        uint256 senderBorrowFee\\n    ) external whenNotPaused {\\n        require(treasury.isVaultManager(msg.sender), \\\"3\\\");\\n        // Checking the delta of borrow fees to eliminate the risk of exploits here\\n        if (senderBorrowFee > borrowFee) {\\n            uint256 borrowFeePaid = ((senderBorrowFee - borrowFee) * stablecoinAmount) / BASE_PARAMS;\\n            stablecoinAmount -= borrowFeePaid;\\n            surplus += borrowFeePaid;\\n        }\\n        _repayDebt(vaultID, stablecoinAmount, 0);\\n    }\\n\\n    // ============================= View Functions ================================\\n\\n    /// @inheritdoc IVaultManagerFunctions\\n    function getVaultDebt(uint256 vaultID) external view returns (uint256) {\\n        return (vaultData[vaultID].normalizedDebt * _calculateCurrentInterestRateAccumulator()) / BASE_INTEREST;\\n    }\\n\\n    /// @notice Gets the total debt across all vaults\\n    /// @return Total debt across all vaults, taking into account the interest accumulated\\n    /// over time\\n    function getTotalDebt() external view returns (uint256) {\\n        return (totalNormalizedDebt * _calculateCurrentInterestRateAccumulator()) / BASE_INTEREST;\\n    }\\n\\n    /// @notice Checks whether a given vault is liquidable and if yes gives information regarding its liquidation\\n    /// @param vaultID ID of the vault to check\\n    /// @param liquidator Address of the liquidator which will be performing the liquidation\\n    /// @return liqOpp Description of the opportunity of liquidation\\n    /// @dev This function will revert if it's called on a vault that does not exist\\n    function checkLiquidation(uint256 vaultID, address liquidator)\\n        external\\n        view\\n        returns (LiquidationOpportunity memory liqOpp)\\n    {\\n        liqOpp = _checkLiquidation(\\n            vaultData[vaultID],\\n            liquidator,\\n            oracle.read(),\\n            _calculateCurrentInterestRateAccumulator()\\n        );\\n    }\\n\\n    // =================== Internal Utility View Functions =========================\\n\\n    /// @notice Verifies whether a given vault is solvent (i.e. should be liquidated or not)\\n    /// @param vault Data of the vault to check\\n    /// @param oracleValue Oracle value at the time of the call (it is in the base of the stablecoin, that is for agTokens 10**18)\\n    /// @param newInterestRateAccumulator Value of the `interestRateAccumulator` at the time of the call\\n    /// @return healthFactor Health factor of the vault: if it's inferior to 1 (`BASE_PARAMS` in fact) this means that the vault can be liquidated\\n    /// @return currentDebt Current value of the debt of the vault (taking into account interest)\\n    /// @return collateralAmountInStable Collateral in the vault expressed in stablecoin value\\n    /// @return oracleValue Current value of the oracle\\n    /// @return newInterestRateAccumulator Current value of the `interestRateAccumulator`\\n    /// @dev If the oracle value or the interest rate accumulator has not been called at the time of the\\n    /// call, this function computes it\\n    function _isSolvent(\\n        Vault memory vault,\\n        uint256 oracleValue,\\n        uint256 newInterestRateAccumulator\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        if (oracleValue == 0) oracleValue = oracle.read();\\n        if (newInterestRateAccumulator == 0) newInterestRateAccumulator = _calculateCurrentInterestRateAccumulator();\\n        uint256 currentDebt = (vault.normalizedDebt * newInterestRateAccumulator) / BASE_INTEREST;\\n        uint256 collateralAmountInStable = (vault.collateralAmount * oracleValue) / _collatBase;\\n        uint256 healthFactor;\\n        if (currentDebt == 0) healthFactor = type(uint256).max;\\n        else healthFactor = (collateralAmountInStable * collateralFactor) / currentDebt;\\n        return (healthFactor, currentDebt, collateralAmountInStable, oracleValue, newInterestRateAccumulator);\\n    }\\n\\n    /// @notice Calculates the current value of the `interestRateAccumulator` without updating the value\\n    /// in storage\\n    /// @dev This function avoids expensive exponentiation and the calculation is performed using a binomial approximation\\n    /// (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n    /// @dev The approximation slightly undercharges borrowers with the advantage of a great gas cost reduction\\n    /// @dev This function was mostly inspired from Aave implementation\\n    function _calculateCurrentInterestRateAccumulator() internal view returns (uint256) {\\n        uint256 exp = block.timestamp - lastInterestAccumulatorUpdated;\\n        uint256 ratePerSecond = interestRate;\\n        if (exp == 0 || ratePerSecond == 0) return interestAccumulator;\\n        uint256 expMinusOne = exp - 1;\\n        uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n        uint256 basePowerTwo = (ratePerSecond * ratePerSecond + HALF_BASE_INTEREST) / BASE_INTEREST;\\n        uint256 basePowerThree = (basePowerTwo * ratePerSecond + HALF_BASE_INTEREST) / BASE_INTEREST;\\n        uint256 secondTerm = (exp * expMinusOne * basePowerTwo) / 2;\\n        uint256 thirdTerm = (exp * expMinusOne * expMinusTwo * basePowerThree) / 6;\\n        return (interestAccumulator * (BASE_INTEREST + ratePerSecond * exp + secondTerm + thirdTerm)) / BASE_INTEREST;\\n    }\\n\\n    // =============== Internal Utility State-Modifying Functions ==================\\n\\n    /// @notice Closes a vault without handling the repayment of the concerned address\\n    /// @param vaultID ID of the vault to close\\n    /// @param oracleValueStart Oracle value at the start of the call: if it's 0 it's going to be computed\\n    /// in the `_isSolvent` function\\n    /// @param newInterestRateAccumulatorStart Interest rate accumulator value at the start of the call: if it's 0\\n    /// it's going to be computed in the `isSolvent` function\\n    /// @return Current debt of the vault to be repaid\\n    /// @return Value of the collateral in the vault to reimburse\\n    /// @return Current oracle value\\n    /// @return Current interest rate accumulator value\\n    /// @dev The returned values are here to facilitate composability between calls\\n    function _closeVault(\\n        uint256 vaultID,\\n        uint256 oracleValueStart,\\n        uint256 newInterestRateAccumulatorStart\\n    )\\n        internal\\n        useLatestVault(vaultID)\\n        onlyApprovedOrOwner(msg.sender, vaultID)\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        Vault memory vault = vaultData[vaultID];\\n        // Optimize for gas here\\n        (\\n            uint256 healthFactor,\\n            uint256 currentDebt,\\n            ,\\n            uint256 oracleValue,\\n            uint256 newInterestRateAccumulator\\n        ) = _isSolvent(vault, oracleValueStart, newInterestRateAccumulatorStart);\\n        require(healthFactor > BASE_PARAMS, \\\"21\\\");\\n        _burn(vaultID);\\n        return (currentDebt, vault.collateralAmount, oracleValue, newInterestRateAccumulator);\\n    }\\n\\n    /// @notice Increases the collateral balance of a vault\\n    /// @param vaultID ID of the vault to increase the collateral balance of\\n    /// @param collateralAmount Amount by which increasing the collateral balance of\\n    function _addCollateral(uint256 vaultID, uint256 collateralAmount) internal useLatestVault(vaultID) {\\n        vaultData[vaultID].collateralAmount += collateralAmount;\\n        emit CollateralAmountUpdated(vaultID, collateralAmount, 1);\\n    }\\n\\n    /// @notice Decreases the collateral balance from a vault (without proceeding to collateral transfers)\\n    /// @param vaultID ID of the vault to decrease the collateral balance of\\n    /// @param collateralAmount Amount of collateral to reduce the balance of\\n    /// @param oracleValueStart Oracle value at the start of the call (given here to avoid double computations)\\n    /// @param interestRateAccumulatorStart Value of the interest rate accumulator (potentially zero if it has not been\\n    /// computed yet)\\n    /// @return Computed value of the oracle\\n    /// @return Computed value of the interest rate accumulator\\n    function _removeCollateral(\\n        uint256 vaultID,\\n        uint256 collateralAmount,\\n        uint256 oracleValueStart,\\n        uint256 interestRateAccumulatorStart\\n    ) internal useLatestVault(vaultID) onlyApprovedOrOwner(msg.sender, vaultID) returns (uint256, uint256) {\\n        vaultData[vaultID].collateralAmount -= collateralAmount;\\n        (uint256 healthFactor, , , uint256 oracleValue, uint256 newInterestRateAccumulator) = _isSolvent(\\n            vaultData[vaultID],\\n            oracleValueStart,\\n            interestRateAccumulatorStart\\n        );\\n        require(healthFactor > BASE_PARAMS, \\\"21\\\");\\n        emit CollateralAmountUpdated(vaultID, collateralAmount, 0);\\n        return (oracleValue, newInterestRateAccumulator);\\n    }\\n\\n    /// @notice Increases the debt balance of a vault and takes into account borrowing fees\\n    /// @param vaultID ID of the vault to increase borrow balance of\\n    /// @param stablecoinAmount Amount of stablecoins to borrow\\n    /// @param oracleValueStart Oracle value at the start of the call (given here to avoid double computations)\\n    /// @param newInterestRateAccumulatorStart Value of the interest rate accumulator (potentially zero if it has not been\\n    /// computed yet)\\n    /// @return toMint Amount of stablecoins to mint\\n    /// @return oracleValue Computed value of the oracle\\n    /// @return interestRateAccumulator Computed value of the interest rate accumulator\\n    function _borrow(\\n        uint256 vaultID,\\n        uint256 stablecoinAmount,\\n        uint256 oracleValueStart,\\n        uint256 newInterestRateAccumulatorStart\\n    )\\n        internal\\n        useLatestVault(vaultID)\\n        onlyApprovedOrOwner(msg.sender, vaultID)\\n        returns (\\n            uint256 toMint,\\n            uint256 oracleValue,\\n            uint256 interestRateAccumulator\\n        )\\n    {\\n        (stablecoinAmount, oracleValue, interestRateAccumulator) = _increaseDebt(\\n            vaultID,\\n            stablecoinAmount,\\n            oracleValueStart,\\n            newInterestRateAccumulatorStart\\n        );\\n        uint256 borrowFeePaid = (borrowFee * stablecoinAmount) / BASE_PARAMS;\\n        surplus += borrowFeePaid;\\n        toMint = stablecoinAmount - borrowFeePaid;\\n    }\\n\\n    /// @notice Internal version of the `getDebtIn` function\\n    /// @return Computed value of the oracle\\n    /// @return Computed value of the interest rate accumulator\\n    function _getDebtIn(\\n        uint256 srcVaultID,\\n        IVaultManager vaultManager,\\n        uint256 dstVaultID,\\n        uint256 stablecoinAmount,\\n        uint256 oracleValue,\\n        uint256 newInterestRateAccumulator\\n    ) internal useLatestVault(srcVaultID) onlyApprovedOrOwner(msg.sender, srcVaultID) returns (uint256, uint256) {\\n        // The `stablecoinAmount` needs to be rounded down in the `_increaseDebt` function to reduce the room for exploits\\n        (stablecoinAmount, oracleValue, newInterestRateAccumulator) = _increaseDebt(\\n            srcVaultID,\\n            stablecoinAmount,\\n            oracleValue,\\n            newInterestRateAccumulator\\n        );\\n        if (address(vaultManager) == address(this)) {\\n            _repayDebt(dstVaultID, stablecoinAmount, newInterestRateAccumulator);\\n        } else {\\n            require(treasury.isVaultManager(address(vaultManager)), \\\"22\\\");\\n            vaultManager.getDebtOut(dstVaultID, stablecoinAmount, borrowFee);\\n        }\\n        return (oracleValue, newInterestRateAccumulator);\\n    }\\n\\n    /// @notice Increases the debt of a given vault and verifies that this vault is still solvent\\n    /// @param vaultID ID of the vault to increase the debt of\\n    /// @param stablecoinAmount Amount of stablecoin to increase the debt of: this amount is converted in\\n    /// normalized debt using the pre-computed (or not) `newInterestRateAccumulator` value\\n    /// @param oracleValueStart Oracle value at the start of the call (given here to avoid double computations)\\n    /// @param newInterestRateAccumulator Value of the interest rate accumulator (potentially zero if it has not been\\n    /// computed yet)\\n    /// @return Amount of stablecoins to issue from this debt increase\\n    /// @return Computed value of the oracle\\n    /// @return Computed value of the interest rate accumulator\\n    /// @dev The `stablecoinAmount` outputted need to be rounded down with respect to the change amount\\n    function _increaseDebt(\\n        uint256 vaultID,\\n        uint256 stablecoinAmount,\\n        uint256 oracleValueStart,\\n        uint256 newInterestRateAccumulator\\n    )\\n        internal\\n        useLatestVault(vaultID)\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        if (newInterestRateAccumulator == 0) newInterestRateAccumulator = _calculateCurrentInterestRateAccumulator();\\n        uint256 changeAmount = (stablecoinAmount * BASE_INTEREST) / newInterestRateAccumulator;\\n        if (vaultData[vaultID].normalizedDebt == 0)\\n            require(changeAmount * newInterestRateAccumulator > dust * BASE_INTEREST, \\\"24\\\");\\n        vaultData[vaultID].normalizedDebt += changeAmount;\\n        totalNormalizedDebt += changeAmount;\\n        require(totalNormalizedDebt * newInterestRateAccumulator <= debtCeiling * BASE_INTEREST, \\\"45\\\");\\n        (uint256 healthFactor, , , uint256 oracleValue, ) = _isSolvent(\\n            vaultData[vaultID],\\n            oracleValueStart,\\n            newInterestRateAccumulator\\n        );\\n        require(healthFactor > BASE_PARAMS, \\\"21\\\");\\n        emit InternalDebtUpdated(vaultID, changeAmount, 1);\\n        return ((changeAmount * BASE_INTEREST) / newInterestRateAccumulator, oracleValue, newInterestRateAccumulator);\\n    }\\n\\n    /// @notice Decreases the debt of a given vault and verifies that this vault still has an amount of debt superior\\n    /// to a dusty amount or no debt at all\\n    /// @param vaultID ID of the vault to decrease the debt of\\n    /// @param stablecoinAmount Amount of stablecoin to decrease the debt of: this amount is converted in\\n    /// normalized debt using the pre-computed (or not) `newInterestRateAccumulator` value\\n    /// To repay the whole debt, one can pass `type(uint256).max`\\n    /// @param newInterestRateAccumulator Value of the interest rate accumulator (potentially zero if it has not been\\n    /// computed yet)\\n    /// @return Amount of stablecoins to be burnt to correctly repay the debt\\n    /// @return Computed value of the interest rate accumulator\\n    /// @dev If `stablecoinAmount` is `type(uint256).max`, this function will repay all the debt of the vault\\n    function _repayDebt(\\n        uint256 vaultID,\\n        uint256 stablecoinAmount,\\n        uint256 newInterestRateAccumulator\\n    ) internal useLatestVault(vaultID) returns (uint256, uint256) {\\n        if (newInterestRateAccumulator == 0) newInterestRateAccumulator = _calculateCurrentInterestRateAccumulator();\\n        uint256 newVaultNormalizedDebt = vaultData[vaultID].normalizedDebt;\\n        // To save one variable declaration, `changeAmount` is first expressed in stablecoin amount before being converted\\n        // to a normalized amount. Here we first store the maximum amount that can be repaid given the current debt\\n        uint256 changeAmount = (newVaultNormalizedDebt * newInterestRateAccumulator) / BASE_INTEREST;\\n        // In some situations (e.g. liquidations), the `stablecoinAmount` is rounded above and we want to make\\n        // sure to avoid underflows in all situations\\n        if (stablecoinAmount >= changeAmount) {\\n            stablecoinAmount = changeAmount;\\n            changeAmount = newVaultNormalizedDebt;\\n        } else {\\n            changeAmount = (stablecoinAmount * BASE_INTEREST) / newInterestRateAccumulator;\\n        }\\n        newVaultNormalizedDebt -= changeAmount;\\n        totalNormalizedDebt -= changeAmount;\\n        require(\\n            newVaultNormalizedDebt == 0 || newVaultNormalizedDebt * newInterestRateAccumulator > dust * BASE_INTEREST,\\n            \\\"24\\\"\\n        );\\n        vaultData[vaultID].normalizedDebt = newVaultNormalizedDebt;\\n        emit InternalDebtUpdated(vaultID, changeAmount, 0);\\n        return (stablecoinAmount, newInterestRateAccumulator);\\n    }\\n\\n    /// @notice Handles the simultaneous repayment of stablecoins with a transfer of collateral\\n    /// @param collateralAmountToGive Amount of collateral the contract should give\\n    /// @param stableAmountToRepay Amount of stablecoins the contract should burn from the call\\n    /// @param from Address from which stablecoins should be burnt: it should be the `msg.sender` or at least\\n    /// approved by it\\n    /// @param to Address to which stablecoins should be sent\\n    /// @param who Address which should be notified if needed of the transfer\\n    /// @param data Data to pass to the `who` contract for it to successfully give the correct amount of stablecoins\\n    /// to the `from` address\\n    /// @dev This function allows for capital-efficient liquidations and repayments of loans\\n    function _handleRepay(\\n        uint256 collateralAmountToGive,\\n        uint256 stableAmountToRepay,\\n        address from,\\n        address to,\\n        address who,\\n        bytes memory data\\n    ) internal {\\n        if (collateralAmountToGive > 0) collateral.safeTransfer(to, collateralAmountToGive);\\n        if (stableAmountToRepay > 0) {\\n            if (data.length > 0) {\\n                IRepayCallee(who).repayCallStablecoin(from, stableAmountToRepay, collateralAmountToGive, data);\\n            }\\n            stablecoin.burnFrom(stableAmountToRepay, from, msg.sender);\\n        }\\n    }\\n\\n    // =================== Treasury Relationship Functions =========================\\n\\n    /// @inheritdoc IVaultManagerFunctions\\n    function accrueInterestToTreasury() external onlyTreasury returns (uint256 surplusValue, uint256 badDebtValue) {\\n        _accrue();\\n        surplusValue = surplus;\\n        badDebtValue = badDebt;\\n        if (surplusValue >= badDebtValue) {\\n            surplusValue -= badDebtValue;\\n            badDebtValue = 0;\\n            stablecoin.mint(address(treasury), surplusValue);\\n        } else {\\n            badDebtValue -= surplusValue;\\n            surplusValue = 0;\\n        }\\n        surplus = 0;\\n        badDebt = 0;\\n        emit AccruedToTreasury(surplusValue, badDebtValue);\\n    }\\n\\n    /// @notice Accrues interest accumulated across all vaults to the surplus\\n    /// @dev This function updates the `interestAccumulator`\\n    /// @dev It should also be called when updating the value of the per second interest rate\\n    function _accrue() internal {\\n        uint256 newInterestRateAccumulator = _calculateCurrentInterestRateAccumulator();\\n        uint256 interestAccrued = (totalNormalizedDebt * (newInterestRateAccumulator - interestAccumulator)) /\\n            BASE_INTEREST;\\n        surplus += interestAccrued;\\n        interestAccumulator = newInterestRateAccumulator;\\n        lastInterestAccumulatorUpdated = block.timestamp;\\n        emit InterestRateAccumulatorUpdated(newInterestRateAccumulator, block.timestamp);\\n    }\\n\\n    // ============================ Liquidations ===================================\\n\\n    /// @notice Liquidates an ensemble of vaults specified by their IDs\\n    /// @param vaultIDs List of the vaults to liquidate\\n    /// @param amounts Amount of stablecoin to bring for the liquidation of each vault\\n    /// @param from Address from which the stablecoins for the liquidation should be taken: this address should be the `msg.sender`\\n    /// or have received an approval\\n    /// @param to Address to which discounted collateral should be sent\\n    /// @dev This function will not revert if it's called on a vault that cannot be liquidated\\n    function liquidate(\\n        uint256[] memory vaultIDs,\\n        uint256[] memory amounts,\\n        address from,\\n        address to\\n    ) external returns (LiquidatorData memory) {\\n        return liquidate(vaultIDs, amounts, from, to, address(0), new bytes(0));\\n    }\\n\\n    /// @notice Liquidates an ensemble of vaults specified by their IDs\\n    /// @param vaultIDs List of the vaults to liquidate\\n    /// @param amounts Amount of stablecoin to bring for the liquidation of each vault\\n    /// @param from Address from which the stablecoins for the liquidation should be taken: this address should be the `msg.sender`\\n    /// or have received an approval\\n    /// @param to Address to which discounted collateral should be sent\\n    /// @param who Address of the contract to handle repayment of stablecoins from received collateral\\n    /// @param data Data to pass to the repayment contract in case of\\n    /// @dev This function will revert if it's called on a vault that cannot be liquidated or that does not exist\\n    function liquidate(\\n        uint256[] memory vaultIDs,\\n        uint256[] memory amounts,\\n        address from,\\n        address to,\\n        address who,\\n        bytes memory data\\n    ) public whenNotPaused nonReentrant returns (LiquidatorData memory liqData) {\\n        // Stores all the data about an ongoing liquidation of multiple vaults\\n        require(vaultIDs.length == amounts.length, \\\"25\\\");\\n        liqData.oracleValue = oracle.read();\\n        liqData.newInterestRateAccumulator = _calculateCurrentInterestRateAccumulator();\\n        for (uint256 i = 0; i < vaultIDs.length; i++) {\\n            Vault memory vault = vaultData[vaultIDs[i]];\\n            // Computing if liquidation can take place for a vault\\n            LiquidationOpportunity memory liqOpp = _checkLiquidation(\\n                vault,\\n                msg.sender,\\n                liqData.oracleValue,\\n                liqData.newInterestRateAccumulator\\n            );\\n\\n            // Makes sure not to leave a dusty amount in the vault by either not liquidating too much\\n            // or everything\\n            if (\\n                (liqOpp.thresholdRepayAmount > 0 && amounts[i] > liqOpp.thresholdRepayAmount) ||\\n                amounts[i] > liqOpp.maxStablecoinAmountToRepay\\n            ) amounts[i] = liqOpp.maxStablecoinAmountToRepay;\\n\\n            // liqOpp.discount stores in fact `1-discount`\\n            uint256 collateralReleased = (amounts[i] * BASE_PARAMS * _collatBase) /\\n                (liqOpp.discount * liqData.oracleValue);\\n            // Because we're rounding up in some divisions, `collateralReleased` can be greater than the `collateralAmount` of the vault\\n            // In this case, `stablecoinAmountToReceive` is still rounded up\\n            if (vault.collateralAmount <= collateralReleased) {\\n                collateralReleased = vault.collateralAmount;\\n                // Reinitializing the `vaultID`: we're not burning the vault in this case for integration purposes\\n                delete vaultData[vaultIDs[i]];\\n                liqData.badDebtFromLiquidation +=\\n                    liqOpp.currentDebt -\\n                    (amounts[i] * liquidationSurcharge) /\\n                    BASE_PARAMS;\\n                // There may be an edge case in which: `amounts[i] = (currentDebt * BASE_PARAMS) / surcharge + 1`\\n                // In this case, as long as `surcharge < BASE_PARAMS`, there cannot be any underflow in the operation\\n                // above\\n            } else {\\n                vaultData[vaultIDs[i]].collateralAmount -= collateralReleased;\\n                // In the case where the full debt is being repaid, `amounts[i]` must be rounded above\\n                _repayDebt(\\n                    vaultIDs[i],\\n                    (amounts[i] * liquidationSurcharge) / BASE_PARAMS,\\n                    liqData.newInterestRateAccumulator\\n                );\\n            }\\n            liqData.collateralAmountToGive += collateralReleased;\\n            liqData.stablecoinAmountToReceive += amounts[i];\\n        }\\n        // Normalization of good and bad debt is already handled in the `_accrue` function\\n        surplus += (liqData.stablecoinAmountToReceive * (BASE_PARAMS - liquidationSurcharge)) / BASE_PARAMS;\\n        badDebt += liqData.badDebtFromLiquidation;\\n        _handleRepay(liqData.collateralAmountToGive, liqData.stablecoinAmountToReceive, from, to, who, data);\\n    }\\n\\n    /// @notice Internal version of the `checkLiquidation` function\\n    /// @dev This function takes two additional parameters as when entering this function `oracleValue`\\n    /// and `newInterestRateAccumulator` should have always been computed\\n    function _checkLiquidation(\\n        Vault memory vault,\\n        address liquidator,\\n        uint256 oracleValue,\\n        uint256 newInterestRateAccumulator\\n    ) internal view returns (LiquidationOpportunity memory liqOpp) {\\n        // Checking if the vault can be liquidated\\n        (uint256 healthFactor, uint256 currentDebt, uint256 collateralAmountInStable, , ) = _isSolvent(\\n            vault,\\n            oracleValue,\\n            newInterestRateAccumulator\\n        );\\n        // Health factor of a vault that does not exist is `type(uint256).max`\\n        require(healthFactor < BASE_PARAMS, \\\"44\\\");\\n\\n        uint256 liquidationDiscount = (_computeLiquidationBoost(liquidator) * (BASE_PARAMS - healthFactor)) /\\n            BASE_PARAMS;\\n        // In fact `liquidationDiscount` is stored here as 1 minus discount to save some computation costs\\n        // This value is necessarily > 0 as `maxLiquidationDiscount < BASE_PARAMS`\\n        liquidationDiscount = liquidationDiscount >= maxLiquidationDiscount\\n            ? BASE_PARAMS - maxLiquidationDiscount\\n            : BASE_PARAMS - liquidationDiscount;\\n        // Same for the surcharge here: it's in fact 1 - the fee taken by the protocol\\n        uint256 surcharge = liquidationSurcharge;\\n        // Checking if we're in a situation where the health factor is an increasing or a decreasing function of the\\n        // amount repaid\\n        uint256 maxAmountToRepay;\\n        uint256 thresholdRepayAmount;\\n        // In the first case, the health factor is an increasing function of the stablecoin amount to repay,\\n        // this means that the liquidator can bring the vault to the target health ratio\\n        if (healthFactor * liquidationDiscount * surcharge >= collateralFactor * BASE_PARAMS**2) {\\n            // This is the max amount to repay that will bring the person to the target health factor\\n            // Denom is always positive when a vault gets liquidated in this case and when the health factor\\n            // is an increasing function of the amount of stablecoins repaid\\n            // And given that most parameters are in base 9, the numerator can very hardly overflow here\\n            maxAmountToRepay =\\n                ((targetHealthFactor * currentDebt - collateralAmountInStable * collateralFactor) *\\n                    BASE_PARAMS *\\n                    liquidationDiscount) /\\n                (surcharge * targetHealthFactor * liquidationDiscount - (BASE_PARAMS**2) * collateralFactor);\\n            // The quantity below tends to be rounded in the above direction, which means that governance should\\n            // set the `targetHealthFactor` accordingly\\n            // Need to check for the dust: liquidating should not leave a dusty amount in the vault\\n            if (currentDebt <= (maxAmountToRepay * surcharge) / BASE_PARAMS + dust) {\\n                // If liquidating to the target threshold would leave a dusty amount: the liquidator can repay all\\n                // We're rounding up the max amount to repay to make sure all the debt ends up being paid\\n                // and we're computing again the real value of the debt to avoid propagation of rounding errors\\n                maxAmountToRepay =\\n                    (vault.normalizedDebt * newInterestRateAccumulator * BASE_PARAMS) /\\n                    (surcharge * BASE_INTEREST) +\\n                    1;\\n                // In this case the threshold amount is such that it leaves just enough dust\\n                // This line cannot underflow as long as the  `dust` parameter is constant: it is always checked that\\n                // the debt is greater than the  `dust`. If the  `dust` was to increase due to an implementation upgrade\\n                // we would need to add some extra checks to avoid underflows\\n                // Here the `thresholdRepayAmount` is also rounded down: which means that if a liquidator repays this amount\\n                // then there would be more than `dust` left in the vault\\n                thresholdRepayAmount = ((currentDebt - dust) * BASE_PARAMS) / surcharge;\\n            }\\n        } else {\\n            // In all cases the liquidator can repay stablecoins such that they'll end up getting exactly the collateral\\n            // in the liquidated vault\\n            // Rounding up to make sure all gets liquidated in this case: the liquidator will never get more than the collateral\\n            // amount in the vault however: we're performing the computation of the `collateralAmountInStable` again to avoid\\n            // propagation of rounding errors\\n            maxAmountToRepay =\\n                (vault.collateralAmount * liquidationDiscount * oracleValue) /\\n                (BASE_PARAMS * _collatBase) +\\n                1;\\n            // It should however make sure not to leave a dusty amount of collateral (in stablecoin value) in the vault\\n            if (collateralAmountInStable > _dustCollateral)\\n                // There's no issue with this amount being rounded down\\n                thresholdRepayAmount =\\n                    ((collateralAmountInStable - _dustCollateral) * liquidationDiscount) /\\n                    BASE_PARAMS;\\n                // If there is from the beginning a dusty amount of collateral, liquidator should repay everything that's left\\n            else thresholdRepayAmount = maxAmountToRepay;\\n        }\\n        liqOpp.maxStablecoinAmountToRepay = maxAmountToRepay;\\n        liqOpp.maxCollateralAmountGiven =\\n            (maxAmountToRepay * BASE_PARAMS * _collatBase) /\\n            (oracleValue * liquidationDiscount);\\n        liqOpp.thresholdRepayAmount = thresholdRepayAmount;\\n        liqOpp.discount = liquidationDiscount;\\n        liqOpp.currentDebt = currentDebt;\\n    }\\n\\n    /// @notice Computes the liquidation boost of a given address, that is the slope of the discount function\\n    /// @param liquidator Address for which boost should be computed\\n    /// @return The slope of the discount function\\n    function _computeLiquidationBoost(address liquidator) internal view returns (uint256) {\\n        if (address(veBoostProxy) == address(0)) {\\n            return yLiquidationBoost[0];\\n        } else {\\n            uint256 adjustedBalance = veBoostProxy.adjusted_balance_of(liquidator);\\n            if (adjustedBalance >= xLiquidationBoost[1]) return yLiquidationBoost[1];\\n            else if (adjustedBalance <= xLiquidationBoost[0]) return yLiquidationBoost[0];\\n            else\\n                return\\n                    yLiquidationBoost[0] +\\n                    ((yLiquidationBoost[1] - yLiquidationBoost[0]) * (adjustedBalance - xLiquidationBoost[0])) /\\n                    (xLiquidationBoost[1] - xLiquidationBoost[0]);\\n        }\\n    }\\n\\n    // ============================== Setters ======================================\\n\\n    /// @notice Sets parameters encoded as uint64\\n    /// @param param Value for the parameter\\n    /// @param what Parameter to change\\n    /// @dev This function performs the required checks when updating a parameter\\n    /// @dev When setting parameters governance should make sure that when `HF < CF/((1-surcharge)(1-discount))`\\n    /// and hence when liquidating a vault is going to decrease its health factor, `discount = max discount`.\\n    /// Otherwise, it may be profitable for the liquidator to liquidate in multiple times: as it will decrease\\n    /// the HF and therefore increase the discount between each time\\n    function setUint64(uint64 param, bytes32 what) external onlyGovernorOrGuardian {\\n        if (what == \\\"collateralFactor\\\") {\\n            require(param <= liquidationSurcharge, \\\"9\\\");\\n            collateralFactor = param;\\n        } else if (what == \\\"targetHealthFactor\\\") {\\n            require(param >= BASE_PARAMS, \\\"17\\\");\\n            targetHealthFactor = param;\\n        } else if (what == \\\"borrowFee\\\") {\\n            require(param <= BASE_PARAMS, \\\"9\\\");\\n            borrowFee = param;\\n        } else if (what == \\\"interestRate\\\") {\\n            _accrue();\\n            interestRate = param;\\n        } else if (what == \\\"liquidationSurcharge\\\") {\\n            require(collateralFactor <= param && param <= BASE_PARAMS, \\\"18\\\");\\n            liquidationSurcharge = param;\\n        } else if (what == \\\"maxLiquidationDiscount\\\") {\\n            require(param < BASE_PARAMS, \\\"9\\\");\\n            maxLiquidationDiscount = param;\\n        } else {\\n            revert(\\\"43\\\");\\n        }\\n        emit FiledUint64(param, what);\\n    }\\n\\n    /// @notice Sets `debtCeiling`\\n    /// @param _debtCeiling New value for `debtCeiling`\\n    function setDebtCeiling(uint256 _debtCeiling) external onlyGovernorOrGuardian {\\n        debtCeiling = _debtCeiling;\\n        emit DebtCeilingUpdated(_debtCeiling);\\n    }\\n\\n    /// @notice Sets the parameters for the liquidation booster which encodes the slope of the discount\\n    /// @param _veBoostProxy Address which queries veANGLE balances and adjusted balances from delegation\\n    /// @param xBoost Threshold values of veANGLE adjusted balances\\n    /// @param yBoost Values of the liquidation boost at the threshold values of x\\n    /// @dev There are 2 modes:\\n    /// When boost is enabled, `xBoost` and `yBoost` should have a length of 2, but if they have a\\n    /// higher length contract will still work as expected. Contract will also work as expected if their\\n    /// length differ\\n    /// When boost is disabled, `_veBoostProxy` needs to be zero address and `yBoost[0]` is the base boost\\n    function setLiquidationBoostParameters(\\n        address _veBoostProxy,\\n        uint256[] memory xBoost,\\n        uint256[] memory yBoost\\n    ) external onlyGovernorOrGuardian {\\n        require(\\n            (xBoost.length == yBoost.length) &&\\n                (yBoost[0] > 0) &&\\n                ((_veBoostProxy == address(0)) || (xBoost[1] > xBoost[0] && yBoost[1] >= yBoost[0])),\\n            \\\"15\\\"\\n        );\\n        veBoostProxy = IVeBoostProxy(_veBoostProxy);\\n        xLiquidationBoost = xBoost;\\n        yLiquidationBoost = yBoost;\\n        emit LiquidationBoostParametersUpdated(_veBoostProxy, xBoost, yBoost);\\n    }\\n\\n    /// @notice Toggles permission for owning vaults by any account\\n    function toggleWhitelisting() external onlyGovernor {\\n        bool flag = !whitelistingActivated;\\n        whitelistingActivated = flag;\\n        emit ToggledWhitelisting(flag);\\n    }\\n\\n    /// @notice Changes the reference to the oracle contract used to get the price of the oracle\\n    /// @param _oracle Reference to the oracle contract\\n    function setOracle(address _oracle) external onlyGovernor {\\n        require(IOracle(_oracle).treasury() == treasury, \\\"33\\\");\\n        oracle = IOracle(_oracle);\\n        emit OracleUpdated(_oracle);\\n    }\\n\\n    /// @inheritdoc IVaultManagerFunctions\\n    function setTreasury(address _treasury) external onlyTreasury {\\n        treasury = ITreasury(_treasury);\\n        // This function makes sure to propagate the change to the associated contract\\n        // even though a single oracle contract could be used in different places\\n        oracle.setTreasury(_treasury);\\n    }\\n\\n    /// @notice Changes the whitelisting of an address\\n    /// @param target Address to toggle\\n    function toggleWhitelist(address target) external onlyGovernor {\\n        isWhitelisted[target] = !isWhitelisted[target];\\n    }\\n\\n    /// @notice Pauses external permissionless functions of the contract\\n    function togglePause() external onlyGovernorOrGuardian {\\n        paused = !paused;\\n    }\\n\\n    /// @notice Changes the ERC721 metadata URI\\n    function setBaseURI(string memory baseURI_) external onlyGovernorOrGuardian {\\n        _baseURI = baseURI_;\\n    }\\n}\\n\",\"keccak256\":\"0x47f0205442339930d85033c7a47ad8b7d2a5805d0eda2f905df58ec5fcef7db5\",\"license\":\"GPL-3.0\"},\"contracts/vaultManager/VaultManagerERC721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./VaultManagerStorage.sol\\\";\\n\\n/// @title VaultManagerERC721\\n/// @author Angle Core Team\\n/// @dev Base ERC721 Implementation of VaultManager\\nabstract contract VaultManagerERC721 is IERC721MetadataUpgradeable, VaultManagerStorage {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    /// @inheritdoc IERC721MetadataUpgradeable\\n    string public name;\\n    /// @inheritdoc IERC721MetadataUpgradeable\\n    string public symbol;\\n\\n    // ============================== Modifiers ====================================\\n\\n    /// @notice Checks if the person interacting with the vault with `vaultID` is approved\\n    /// @param caller Address of the person seeking to interact with the vault\\n    /// @param vaultID ID of the concerned vault\\n    modifier onlyApprovedOrOwner(address caller, uint256 vaultID) {\\n        require(_isApprovedOrOwner(caller, vaultID), \\\"16\\\");\\n        _;\\n    }\\n\\n    // =============================== ERC721 Logic ================================\\n\\n    /// @notice Returns all the vaults owned or controlled (under the form of approval) by an address\\n    /// @param spender Address for which vault ownerships should be checked\\n    /// @return List of `vaultID` controlled by this address\\n    /// @dev This function is never to be called on-chain since it iterates over all addresses and is here\\n    /// to reduce dependency on an external graph to link an ID to its owner\\n    function getControlledVaults(address spender) external view returns (uint256[] memory, uint256) {\\n        uint256 arraySize = _vaultIDCount;\\n        uint256[] memory vaultsControlled = new uint256[](arraySize);\\n        address owner;\\n        uint256 count;\\n        for (uint256 i = 1; i <= arraySize; i++) {\\n            owner = _owners[i];\\n            if (spender == owner || _getApproved(i) == spender || _operatorApprovals[owner][spender]) {\\n                vaultsControlled[count] = i;\\n                count += 1;\\n            }\\n        }\\n        return (vaultsControlled, count);\\n    }\\n\\n    /// @notice Checks whether a given address is approved for a vault or owns this vault\\n    /// @param spender Address for which vault ownership should be checked\\n    /// @param vaultID ID of the vault to check\\n    /// @return Whether the `spender` address owns or is approved for `vaultID`\\n    function isApprovedOrOwner(address spender, uint256 vaultID) external view returns (bool) {\\n        return _isApprovedOrOwner(spender, vaultID);\\n    }\\n\\n    /// @inheritdoc IERC721MetadataUpgradeable\\n    function tokenURI(uint256 vaultID) external view returns (string memory) {\\n        require(_exists(vaultID), \\\"26\\\");\\n        // There is no vault with `vaultID` equal to 0, so the following variable is\\n        // always greater than zero\\n        uint256 temp = vaultID;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (vaultID != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(vaultID % 10)));\\n            vaultID /= 10;\\n        }\\n        return bytes(_baseURI).length > 0 ? string(abi.encodePacked(_baseURI, string(buffer))) : \\\"\\\";\\n    }\\n\\n    /// @inheritdoc IERC721Upgradeable\\n    function balanceOf(address owner) external view returns (uint256) {\\n        require(owner != address(0), \\\"0\\\");\\n        return _balances[owner];\\n    }\\n\\n    /// @inheritdoc IERC721Upgradeable\\n    function ownerOf(uint256 vaultID) external view returns (address) {\\n        return _ownerOf(vaultID);\\n    }\\n\\n    /// @inheritdoc IERC721Upgradeable\\n    function approve(address to, uint256 vaultID) external {\\n        address owner = _ownerOf(vaultID);\\n        require(to != owner, \\\"27\\\");\\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender), \\\"16\\\");\\n\\n        _approve(to, vaultID);\\n    }\\n\\n    /// @inheritdoc IERC721Upgradeable\\n    function getApproved(uint256 vaultID) external view returns (address) {\\n        require(_exists(vaultID), \\\"26\\\");\\n        return _getApproved(vaultID);\\n    }\\n\\n    /// @inheritdoc IERC721Upgradeable\\n    function setApprovalForAll(address operator, bool approved) external {\\n        require(operator != msg.sender, \\\"28\\\");\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @inheritdoc IERC721Upgradeable\\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /// @inheritdoc IERC721Upgradeable\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 vaultID\\n    ) external onlyApprovedOrOwner(msg.sender, vaultID) {\\n        _transfer(from, to, vaultID);\\n    }\\n\\n    /// @inheritdoc IERC721Upgradeable\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 vaultID\\n    ) external {\\n        safeTransferFrom(from, to, vaultID, \\\"\\\");\\n    }\\n\\n    /// @inheritdoc IERC721Upgradeable\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 vaultID,\\n        bytes memory _data\\n    ) public onlyApprovedOrOwner(msg.sender, vaultID) {\\n        _safeTransfer(from, to, vaultID, _data);\\n    }\\n\\n    // =============================== ERC165 logic ================================\\n\\n    /// @inheritdoc IERC165Upgradeable\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\\n        return\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IVaultManager).interfaceId ||\\n            interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    // ============== Internal Functions for the ERC721 Logic ======================\\n\\n    /// @notice Internal version of the `ownerOf` function\\n    function _ownerOf(uint256 vaultID) internal view returns (address owner) {\\n        owner = _owners[vaultID];\\n        require(owner != address(0), \\\"26\\\");\\n    }\\n\\n    /// @notice Internal version of the `getApproved` function\\n    function _getApproved(uint256 vaultID) internal view returns (address) {\\n        return _vaultApprovals[vaultID];\\n    }\\n\\n    /// @notice Internal version of the `safeTransferFrom` function (with the data parameter)\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 vaultID,\\n        bytes memory _data\\n    ) internal {\\n        _transfer(from, to, vaultID);\\n        require(_checkOnERC721Received(from, to, vaultID, _data), \\\"29\\\");\\n    }\\n\\n    /// @notice Checks whether a vault exists\\n    /// @param vaultID ID of the vault to check\\n    /// @return Whether `vaultID` has been created\\n    function _exists(uint256 vaultID) internal view returns (bool) {\\n        return _owners[vaultID] != address(0);\\n    }\\n\\n    /// @notice Internal version of the `isApprovedOrOwner` function\\n    function _isApprovedOrOwner(address spender, uint256 vaultID) internal view returns (bool) {\\n        // The following checks if the vault exists\\n        address owner = _ownerOf(vaultID);\\n        return (spender == owner || _getApproved(vaultID) == spender || _operatorApprovals[owner][spender]);\\n    }\\n\\n    /// @notice Internal version of the `createVault` function\\n    /// Mints `vaultID` and transfers it to `to`\\n    /// @dev This method is equivalent to the `_safeMint` method used in OpenZeppelin ERC721 contract\\n    /// @dev Emits a {Transfer} event\\n    function _mint(address to) internal returns (uint256 vaultID) {\\n        require(!whitelistingActivated || (isWhitelisted[to] && isWhitelisted[msg.sender]), \\\"20\\\");\\n        unchecked {\\n            _vaultIDCount += 1;\\n            _balances[to] += 1;\\n        }\\n        vaultID = _vaultIDCount;\\n        _owners[vaultID] = to;\\n        emit Transfer(address(0), to, vaultID);\\n        require(_checkOnERC721Received(address(0), to, vaultID, \\\"\\\"), \\\"29\\\");\\n    }\\n\\n    /// @notice Destroys `vaultID`\\n    /// @dev `vaultID` must exist\\n    /// @dev Emits a {Transfer} event\\n    function _burn(uint256 vaultID) internal {\\n        address owner = _ownerOf(vaultID);\\n\\n        // Clear approvals\\n        _approve(address(0), vaultID);\\n        // The following line cannot underflow as the owner's balance is necessarily\\n        // greater than 1\\n        unchecked {\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[vaultID];\\n        delete vaultData[vaultID];\\n\\n        emit Transfer(owner, address(0), vaultID);\\n    }\\n\\n    /// @notice Transfers `vaultID` from `from` to `to` as opposed to {transferFrom},\\n    /// this imposes no restrictions on msg.sender\\n    /// @dev `to` cannot be the zero address and `perpetualID` must be owned by `from`\\n    /// @dev Emits a {Transfer} event\\n    /// @dev A whitelist check is performed if necessary on the `to` address\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 vaultID\\n    ) internal {\\n        require(_ownerOf(vaultID) == from, \\\"30\\\");\\n        require(to != address(0), \\\"31\\\");\\n        require(!whitelistingActivated || isWhitelisted[to], \\\"20\\\");\\n        // Clear approvals from the previous owner\\n        _approve(address(0), vaultID);\\n        unchecked {\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[vaultID] = to;\\n\\n        emit Transfer(from, to, vaultID);\\n    }\\n\\n    /// @notice Approves `to` to operate on `vaultID`\\n    function _approve(address to, uint256 vaultID) internal {\\n        _vaultApprovals[vaultID] = to;\\n        emit Approval(_ownerOf(vaultID), to, vaultID);\\n    }\\n\\n    /// @notice Internal function to invoke {IERC721Receiver-onERC721Received} on a target address\\n    /// The call is not executed if the target address is not a contract\\n    /// @param from Address representing the previous owner of the given token ID\\n    /// @param to Target address that will receive the tokens\\n    /// @param vaultID ID of the token to be transferred\\n    /// @param _data Bytes optional data to send along with the call\\n    /// @return Bool whether the call correctly returned the expected value\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 vaultID,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(msg.sender, from, vaultID, _data) returns (\\n                bytes4 retval\\n            ) {\\n                return retval == IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"24\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfa4cb2d19607757673f61a070d9ba2452e8b3e523b8cde34a6b85d0f56d64916\",\"license\":\"GPL-3.0\"},\"contracts/vaultManager/VaultManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/IAgToken.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/IRepayCallee.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/IVaultManager.sol\\\";\\nimport \\\"../interfaces/IVeBoostProxy.sol\\\";\\n\\n/// @title VaultManagerStorage\\n/// @author Angle Core Team\\n/// @dev Variables, references, parameters and events needed in the `VaultManager` contract\\n// solhint-disable-next-line max-states-count\\ncontract VaultManagerStorage is IVaultManagerStorage, Initializable, ReentrancyGuardUpgradeable {\\n    /// @notice Base used for parameter computation\\n    uint256 public constant BASE_PARAMS = 10**9;\\n    /// @notice Base used for interest rate computation\\n    uint256 public constant BASE_INTEREST = 10**27;\\n    /// @notice Used for interest rate computation\\n    uint256 public constant HALF_BASE_INTEREST = 10**27 / 2;\\n\\n    // =============================== References ==================================\\n\\n    /// @inheritdoc IVaultManagerStorage\\n    ITreasury public treasury;\\n    /// @inheritdoc IVaultManagerStorage\\n    IERC20 public collateral;\\n    /// @inheritdoc IVaultManagerStorage\\n    IAgToken public stablecoin;\\n    /// @inheritdoc IVaultManagerStorage\\n    IOracle public oracle;\\n    /// @notice Reference to the contract which computes adjusted veANGLE balances for liquidators boosts\\n    IVeBoostProxy public veBoostProxy;\\n    /// @notice Base of the collateral\\n    uint256 internal _collatBase;\\n\\n    // =============================== Parameters ==================================\\n\\n    /// @inheritdoc IVaultManagerStorage\\n    uint256 public immutable dust;\\n    /// @notice Minimum amount of collateral (in stablecoin value) that can be left in a vault during a liquidation\\n    /// where the health factor function is decreasing\\n    uint256 internal immutable _dustCollateral;\\n    /// @notice Maximum amount of stablecoins that can be issued with this contract\\n    uint256 public debtCeiling;\\n    /// @notice Threshold veANGLE balance values for the computation of the boost for liquidators: the length of this array\\n    /// should be 2\\n    uint256[] public xLiquidationBoost;\\n    /// @notice Values of the liquidation boost at the threshold values of x\\n    uint256[] public yLiquidationBoost;\\n    /// @inheritdoc IVaultManagerStorage\\n    uint64 public collateralFactor;\\n    /// @notice Maximum Health factor at which a vault can end up after a liquidation (unless it's fully liquidated)\\n    uint64 public targetHealthFactor;\\n    /// @notice Upfront fee taken when borrowing stablecoins\\n    uint64 public borrowFee;\\n    /// @notice Per second interest taken to borrowers taking agToken loans\\n    uint64 public interestRate;\\n    /// @notice Fee taken by the protocol during a liquidation. Technically, this value is not the fee per se, it's 1 - fee.\\n    /// For instance for a 2% fee, `liquidationSurcharge` should be 98%\\n    uint64 public liquidationSurcharge;\\n    /// @notice Maximum discount given to liquidators\\n    uint64 public maxLiquidationDiscount;\\n\\n    // =============================== Variables ===================================\\n\\n    /// @notice Timestamp at which the `interestAccumulator` was updated\\n    uint256 public lastInterestAccumulatorUpdated;\\n    /// @inheritdoc IVaultManagerStorage\\n    uint256 public interestAccumulator;\\n    /// @inheritdoc IVaultManagerStorage\\n    uint256 public totalNormalizedDebt;\\n    /// @notice Surplus accumulated by the contract: surplus is always in stablecoins, and is then reset\\n    /// when the value is communicated to the treasury contract\\n    uint256 public surplus;\\n    /// @notice Bad debt made from liquidated vaults which ended up having no collateral and a positive amount\\n    /// of stablecoins\\n    uint256 public badDebt;\\n\\n    // ================================ Mappings ===================================\\n\\n    /// @inheritdoc IVaultManagerStorage\\n    mapping(uint256 => Vault) public vaultData;\\n    /// @notice Maps an address to whether it's whitelisted and can open or own a vault\\n    mapping(address => bool) public isWhitelisted;\\n\\n    // =============================== Parameters ==================================\\n\\n    /// @notice Whether whitelisting is required to own a vault or not\\n    bool public whitelistingActivated;\\n\\n    /// @notice Whether the vault paused or not\\n    bool public paused;\\n\\n    // ================================ ERC721 Data ================================\\n\\n    /// @notice URI\\n    string internal _baseURI;\\n\\n    /// @notice Counter to generate a unique `vaultID` for each vault: `vaultID` acts as `tokenID` in basic ERC721\\n    /// contracts\\n    uint256 internal _vaultIDCount;\\n\\n    // Mapping from `vaultID` to owner address\\n    mapping(uint256 => address) internal _owners;\\n\\n    // Mapping from owner address to vault owned count\\n    mapping(address => uint256) internal _balances;\\n\\n    // Mapping from `vaultID` to approved address\\n    mapping(uint256 => address) internal _vaultApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) internal _operatorApprovals;\\n\\n    uint256[50] private __gap;\\n\\n    // =============================== Events ======================================\\n\\n    event AccruedToTreasury(uint256 surplusEndValue, uint256 badDebtEndValue);\\n    event CollateralAmountUpdated(uint256 vaultID, uint256 collateralAmount, uint8 isIncrease);\\n    event InterestRateAccumulatorUpdated(uint256 value, uint256 timestamp);\\n    event InternalDebtUpdated(uint256 vaultID, uint256 internalAmount, uint8 isIncrease);\\n    event FiledUint64(uint64 param, bytes32 what);\\n    event DebtCeilingUpdated(uint256 debtCeiling);\\n    event LiquidationBoostParametersUpdated(address indexed _veBoostProxy, uint256[] xBoost, uint256[] yBoost);\\n    event OracleUpdated(address indexed _oracle);\\n    event ToggledWhitelisting(bool);\\n\\n    /// @param _dust Minimum amount of debt a vault from this implementation can have\\n    /// @param dustCollateral_ Minimum amount of collateral (in stablecoin value) that can be left in a vault during a liquidation\\n    /// where the health factor function is decreasing\\n    /// @dev Run only at the implementation level\\n    constructor(uint256 _dust, uint256 dustCollateral_) initializer {\\n        dust = _dust;\\n        _dustCollateral = dustCollateral_;\\n    }\\n}\\n\",\"keccak256\":\"0xba0f1171f2aeda31088be9a394d34d5396f6bf39bf93c6d4ce8595aa1f50668b\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162005f4a38038062005f4a833981016040819052620000349162000136565b60005482908290610100900460ff16620000555760005460ff16156200005f565b6200005f62000112565b620000c75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000ea576000805461ffff19166101011790555b608083905260a0829052801562000107576000805461ff00191690555b50505050506200015b565b60006200012a306200013060201b620032071760201c565b15905090565b3b151590565b600080604083850312156200014a57600080fd5b505080516020909101519092909150565b60805160a051615da6620001a4600039600081816139510152613982015260008181610a7f0152818161382f015281816138cd01528181613b57015261483d0152615da66000f3fe6080604052600436106102bd5760003560e01c8063010db195146102c257806301ffc9a7146102f857806306fdde0314610328578063081812fc1461034a578063087a60071461036a578063095ea7b31461038e5780630e198f22146103b057806313888565146103c657806323b872dd146103dc578063254cf439146103fc578063307439af1461043b57806334ce998a1461046857806335836f151461047d57806339393ac91461049d57806339eb4dc6146104bd5780633ae2325f146104d75780633af32abf146104f757806342842e0e14610527578063430c2081146105475780634f7e43df1461056757806355f804b31461058e5780635c975abb146105ae57806361d027b3146105cd5780636352211e146105ed57806370a082311461060d578063741075431461062d5780637aacfffa1461064d5780637adbf973146106965780637c3a00fd146106b65780637dc0d1d0146106dd5780637e53bd97146106fd5780637e56d47c1461071d57806383ba59fc1461073d57806389050f1d1461076b57806395d89b411461078a5780639a3b6f2f1461079f5780639f48118f146107e5578063a22cb465146107fd578063af2c8c2e1461081d578063b1511cc914610833578063b4bd6f4614610853578063b88d4fde14610873578063bbcac55714610893578063c4ae3168146108a9578063c66d8b01146108be578063c87b56dd146108de578063d645c393146108fe578063d6bcab2a1461091e578063d8dfeb451461093e578063de1f77651461095e578063de8fc6981461097d578063df011c4114610990578063e182b883146109b0578063e1c84ea4146109d0578063e626648a146109e6578063e985e9c514610a0d578063e9cbd82214610a2d578063f0f4426014610a4d578063fad9aba314610a6d578063fbefa41314610aa1578063fc29b02114610ab6578063fd527cf814610ad6575b600080fd5b3480156102ce57600080fd5b506037546102e2906001600160a01b031681565b6040516102ef9190614ce3565b60405180910390f35b34801561030457600080fd5b50610318610313366004614d10565b610aeb565b60405190151581526020016102ef565b34801561033457600080fd5b5061033d610b50565b6040516102ef9190614d85565b34801561035657600080fd5b506102e2610365366004614d98565b610bde565b34801561037657600080fd5b50610380603f5481565b6040519081526020016102ef565b34801561039a57600080fd5b506103ae6103a9366004614dc6565b610c17565b005b3480156103bc57600080fd5b50610380603e5481565b3480156103d257600080fd5b5061038060415481565b3480156103e857600080fd5b506103ae6103f7366004614df2565b610cb2565b34801561040857600080fd5b50603c5461042390600160401b90046001600160401b031681565b6040516001600160401b0390911681526020016102ef565b34801561044757600080fd5b5061045b610456366004614e33565b610cec565b6040516102ef9190614e63565b34801561047457600080fd5b50610380610d9e565b34801561048957600080fd5b50610380610498366004614d98565b610dd0565b3480156104a957600080fd5b506103ae6104b8366004614e9c565b610e0c565b3480156104c957600080fd5b506045546103189060ff1681565b3480156104e357600080fd5b506103806104f2366004614d98565b610ec2565b34801561050357600080fd5b50610318610512366004614e9c565b60446020526000908152604090205460ff1681565b34801561053357600080fd5b506103ae610542366004614df2565b610ee3565b34801561055357600080fd5b50610318610562366004614dc6565b610efe565b34801561057357600080fd5b50603d5461042390600160401b90046001600160401b031681565b34801561059a57600080fd5b506103ae6105a9366004614f6e565b610f0a565b3480156105ba57600080fd5b5060455461031890610100900460ff1681565b3480156105d957600080fd5b506033546102e2906001600160a01b031681565b3480156105f957600080fd5b506102e2610608366004614d98565b610fae565b34801561061957600080fd5b50610380610628366004614e9c565b610fb9565b34801561063957600080fd5b506103ae610648366004614fb9565b611011565b34801561065957600080fd5b50610681610668366004614d98565b6043602052600090815260409020805460019091015482565b604080519283526020830191909152016102ef565b3480156106a257600080fd5b506103ae6106b1366004614e9c565b6113c3565b3480156106c257600080fd5b50603c5461042390600160c01b90046001600160401b031681565b3480156106e957600080fd5b506036546102e2906001600160a01b031681565b34801561070957600080fd5b506103ae610718366004615063565b611530565b34801561072957600080fd5b5061045b6107383660046150d8565b61171e565b34801561074957600080fd5b5061075d610758366004614e9c565b611bd1565b6040516102ef9291906151d7565b34801561077757600080fd5b50610380676765c793fa10079d601a1b81565b34801561079657600080fd5b5061033d611cf1565b6107b26107ad3660046152e1565b611cfe565b6040516102ef91908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b3480156107f157600080fd5b50610380633b9aca0081565b34801561080957600080fd5b506103ae610818366004615377565b611d33565b34801561082957600080fd5b5061038060405481565b34801561083f57600080fd5b506103ae61084e366004614d98565b611ddd565b34801561085f57600080fd5b5061038061086e366004614e9c565b611ea6565b34801561087f57600080fd5b506103ae61088e3660046153a5565b611edf565b34801561089f57600080fd5b5061038060425481565b3480156108b557600080fd5b506103ae611f1b565b3480156108ca57600080fd5b50603d54610423906001600160401b031681565b3480156108ea57600080fd5b5061033d6108f9366004614d98565b611fc5565b34801561090a57600080fd5b506103ae610919366004615410565b61211d565b34801561092a57600080fd5b506103ae61093936600461543c565b61226f565b34801561094a57600080fd5b506034546102e2906001600160a01b031681565b34801561096a57600080fd5b50610380676765c793fa10079d601b1b81565b6107b261098b3660046154d0565b61280c565b34801561099c57600080fd5b50603c54610423906001600160401b031681565b3480156109bc57600080fd5b506103806109cb366004614d98565b612f14565b3480156109dc57600080fd5b5061038060395481565b3480156109f257600080fd5b50603c5461042390600160801b90046001600160401b031681565b348015610a1957600080fd5b50610318610a2836600461552e565b612f24565b348015610a3957600080fd5b506035546102e2906001600160a01b031681565b348015610a5957600080fd5b506103ae610a68366004614e9c565b612f52565b348015610a7957600080fd5b506103807f000000000000000000000000000000000000000000000000000000000000000081565b348015610aad57600080fd5b506103ae612ff1565b348015610ac257600080fd5b5061045b610ad136600461555c565b6130c2565b348015610ae257600080fd5b506106816130ec565b60006001600160e01b03198216635b5e139f60e01b1480610b1c57506001600160e01b031982166380ac58cd60e01b145b80610b2f57506001600160e01b03198216155b80610b4a57506001600160e01b031982166301ffc9a760e01b145b92915050565b607e8054610b5d906155b8565b80601f0160208091040260200160405190810160405280929190818152602001828054610b89906155b8565b8015610bd65780601f10610bab57610100808354040283529160200191610bd6565b820191906000526020600020905b815481529060010190602001808311610bb957829003601f168201915b505050505081565b6000610be98261320d565b610c0e5760405162461bcd60e51b8152600401610c05906155ed565b60405180910390fd5b610b4a8261322a565b6000610c2282613245565b9050806001600160a01b0316836001600160a01b03161415610c6b5760405162461bcd60e51b8152602060048201526002602482015261323760f01b6044820152606401610c05565b336001600160a01b0382161480610c875750610c878133612f24565b610ca35760405162461bcd60e51b8152600401610c0590615609565b610cad838361327a565b505050565b3381610cbe82826132e8565b610cda5760405162461bcd60e51b8152600401610c0590615609565b610ce5858585613366565b5050505050565b610cf4614bb9565b60008381526043602090815260409182902082518084018452815481526001909101548183015260365483516315f789a960e21b81529351610d9794929387936001600160a01b03909316926357de26a492600480830193928290030181865afa158015610d66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8a9190615625565b610d926134ab565b613647565b9392505050565b6000676765c793fa10079d601b1b610db46134ab565b604054610dc19190615654565b610dcb9190615689565b905090565b6000676765c793fa10079d601b1b610de66134ab565b600084815260436020526040902060010154610e029190615654565b610b4a9190615689565b603354604051631c86b03760e31b81526001600160a01b039091169063e43581b890610e3c903390600401614ce3565b602060405180830381865afa158015610e59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7d919061569d565b610e995760405162461bcd60e51b8152600401610c05906156ba565b6001600160a01b03166000908152604460205260409020805460ff19811660ff90911615179055565b603b8181548110610ed257600080fd5b600091825260209091200154905081565b610cad83838360405180602001604052806000815250611edf565b6000610d9783836132e8565b60335460405163521d4de960e01b81526001600160a01b039091169063521d4de990610f3a903390600401614ce3565b602060405180830381865afa158015610f57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7b919061569d565b610f975760405162461bcd60e51b8152600401610c05906156d5565b8051610faa906046906020840190614be8565b5050565b6000610b4a82613245565b60006001600160a01b038216610ff55760405162461bcd60e51b81526020600482015260016024820152600360fc1b6044820152606401610c05565b506001600160a01b031660009081526049602052604090205490565b60335460405163521d4de960e01b81526001600160a01b039091169063521d4de990611041903390600401614ce3565b602060405180830381865afa15801561105e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611082919061569d565b61109e5760405162461bcd60e51b8152600401610c05906156d5565b806f31b7b63630ba32b930b62330b1ba37b960811b141561110857603d546001600160401b0390811690831611156110e85760405162461bcd60e51b8152600401610c05906156f0565b603c80546001600160401b0319166001600160401b03841617905561137c565b80713a30b933b2ba2432b0b63a342330b1ba37b960711b141561119057633b9aca00826001600160401b031610156111675760405162461bcd60e51b8152602060048201526002602482015261313760f01b6044820152606401610c05565b603c8054600160401b600160801b031916600160401b6001600160401b0385160217905561137c565b8068626f72726f7746656560b81b14156111fa57633b9aca00826001600160401b031611156111d15760405162461bcd60e51b8152600401610c05906156f0565b603c8054600160801b600160c01b031916600160801b6001600160401b0385160217905561137c565b806b696e7465726573745261746560a01b141561123e576112196139fc565b603c80546001600160c01b0316600160c01b6001600160401b0385160217905561137c565b80736c69717569646174696f6e53757263686172676560601b14156112d957603c546001600160401b038084169116118015906112885750633b9aca00826001600160401b031611155b6112b95760405162461bcd60e51b8152602060048201526002602482015261062760f31b6044820152606401610c05565b603d80546001600160401b0319166001600160401b03841617905561137c565b80751b585e131a5c5d5a59185d1a5bdb911a5cd8dbdd5b9d60521b141561134f57633b9aca00826001600160401b0316106113265760405162461bcd60e51b8152600401610c05906156f0565b603d8054600160401b600160801b031916600160401b6001600160401b0385160217905561137c565b60405162461bcd60e51b8152602060048201526002602482015261343360f01b6044820152606401610c05565b604080516001600160401b0384168152602081018390527f13b367dac93b85d1ed9b3d8961d8b48e1a677c9800bb1613b4b0416b2d5b61d091015b60405180910390a15050565b603354604051631c86b03760e31b81526001600160a01b039091169063e43581b8906113f3903390600401614ce3565b602060405180830381865afa158015611410573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611434919061569d565b6114505760405162461bcd60e51b8152600401610c05906156ba565b603354604080516361d027b360e01b815290516001600160a01b03928316928416916361d027b39160048083019260209291908290030181865afa15801561149c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c0919061570b565b6001600160a01b0316146114e65760405162461bcd60e51b8152600401610c0590615728565b603680546001600160a01b0319166001600160a01b0383169081179091556040517f3df77beb5db05fcdd70a30fc8adf3f83f9501b68579455adbd100b818094039490600090a250565b60335460405163521d4de960e01b81526001600160a01b039091169063521d4de990611560903390600401614ce3565b602060405180830381865afa15801561157d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a1919061569d565b6115bd5760405162461bcd60e51b8152600401610c05906156d5565b805182511480156115e857506000816000815181106115de576115de615744565b6020026020010151115b801561167757506001600160a01b038316158061167757508160008151811061161357611613615744565b60200260200101518260018151811061162e5761162e615744565b602002602001015111801561167757508060008151811061165157611651615744565b60200260200101518160018151811061166c5761166c615744565b602002602001015110155b6116935760405162461bcd60e51b8152600401610c059061575a565b603780546001600160a01b0319166001600160a01b03851617905581516116c190603a906020850190614c6c565b5080516116d590603b906020840190614c6c565b50826001600160a01b03167feb74d4d9fea592587c926aeb35eb6a7893fb28db0c1c8eb2eb3c586e7164b76c8383604051611711929190615776565b60405180910390a2505050565b611726614bb9565b604554610100900460ff161561174e5760405162461bcd60e51b8152600401610c059061579b565b600260015414156117715760405162461bcd60e51b8152600401610c05906157b7565b600260015585518751146117ac5760405162461bcd60e51b8152602060048201526002602482015261323560f01b6044820152606401610c05565b603660009054906101000a90046001600160a01b03166001600160a01b03166357de26a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118239190615625565b60608201526118306134ab565b608082015260005b8751811015611b49576000604360008a848151811061185957611859615744565b6020026020010151815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905060006118a6823386606001518760800151613647565b9050600081604001511180156118d8575080604001518984815181106118ce576118ce615744565b6020026020010151115b806118ff575080600001518984815181106118f5576118f5615744565b6020026020010151115b1561192857806000015189848151811061191b5761191b615744565b6020026020010181815250505b60008460600151826060015161193e9190615654565b603854633b9aca008c878151811061195857611958615744565b602002602001015161196a9190615654565b6119749190615654565b61197e9190615689565b905080836000015111611a365782600001519050604360008c86815181106119a8576119a8615744565b6020908102919091018101518252810191909152604001600090812081815560010155603d548a51633b9aca00916001600160401b0316908c90879081106119f2576119f2615744565b6020026020010151611a049190615654565b611a0e9190615689565b8260800151611a1d91906157ee565b85604001818151611a2e9190615805565b905250611aec565b80604360008d8781518110611a4d57611a4d615744565b602002602001015181526020019081526020016000206000016000828254611a7591906157ee565b92505081905550611ae98b8581518110611a9157611a91615744565b6020908102919091010151603d548c51633b9aca00916001600160401b0316908e9089908110611ac357611ac3615744565b6020026020010151611ad59190615654565b611adf9190615689565b8760800151613a96565b50505b8085602001818151611afe9190615805565b90525089518a9085908110611b1557611b15615744565b602002602001015185600001818151611b2e9190615805565b905250839250611b41915082905061581d565b915050611838565b50603d54633b9aca0090611b66906001600160401b0316826157ee565b8251611b729190615654565b611b7c9190615689565b60416000828254611b8d9190615805565b9091555050604081015160428054600090611ba9908490615805565b909155505060208101518151611bc3919087878787613bec565b600180559695505050505050565b60475460609060009081816001600160401b03811115611bf357611bf3614eb9565b604051908082528060200260200182016040528015611c1c578160200160208202803683370190505b50905060008060015b848111611ce3576000818152604860205260409020546001600160a01b0390811693508816831480611c705750876001600160a01b0316611c658261322a565b6001600160a01b0316145b80611ca057506001600160a01b038084166000908152604b60209081526040808320938c168352929052205460ff165b15611cd15780848381518110611cb857611cb8615744565b6020908102919091010152611cce600183615805565b91505b80611cdb8161581d565b915050611c25565b509196919550909350505050565b607f8054610b5d906155b8565b611d06614ca6565b60408051600080825260208201909252611d289187918791879187919061280c565b90505b949350505050565b6001600160a01b038216331415611d715760405162461bcd60e51b8152602060048201526002602482015261064760f31b6044820152606401610c05565b336000818152604b602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60335460405163521d4de960e01b81526001600160a01b039091169063521d4de990611e0d903390600401614ce3565b602060405180830381865afa158015611e2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4e919061569d565b611e6a5760405162461bcd60e51b8152600401610c05906156d5565b60398190556040518181527fdd63b3dcdbebad734892f7c7a26d0f647fbc7eec973e0775f5229018ac4ab47a906020015b60405180910390a150565b604554600090610100900460ff1615611ed15760405162461bcd60e51b8152600401610c059061579b565b610b4a82613ce9565b919050565b3382611eeb82826132e8565b611f075760405162461bcd60e51b8152600401610c0590615609565b611f1386868686613de8565b505050505050565b60335460405163521d4de960e01b81526001600160a01b039091169063521d4de990611f4b903390600401614ce3565b602060405180830381865afa158015611f68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8c919061569d565b611fa85760405162461bcd60e51b8152600401610c05906156d5565b6045805461ff001981166101009182900460ff1615909102179055565b6060611fd08261320d565b611fec5760405162461bcd60e51b8152600401610c05906155ed565b8160005b811561201657806120008161581d565b915061200f9050600a83615689565b9150611ff0565b6000816001600160401b0381111561203057612030614eb9565b6040519080825280601f01601f19166020018201604052801561205a576020820181803683370190505b5090505b84156120c55761206f6001836157ee565b915061207c600a86615838565b612087906030615805565b60f81b81838151811061209c5761209c615744565b60200101906001600160f81b031916908160001a9053506120be600a86615689565b945061205e565b6000604680546120d4906155b8565b9050116120f05760405180602001604052806000815250612114565b604681604051602001612104929190615868565b6040516020818303038152906040525b95945050505050565b604554610100900460ff16156121455760405162461bcd60e51b8152600401610c059061579b565b6033546040516333b52a9f60e11b81526001600160a01b039091169063676a553e90612175903390600401614ce3565b602060405180830381865afa158015612192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b6919061569d565b6121e65760405162461bcd60e51b81526020600482015260016024820152603360f81b6044820152606401610c05565b603c54600160801b90046001600160401b031681111561226357603c54600090633b9aca0090849061222890600160801b90046001600160401b0316856157ee565b6122329190615654565b61223c9190615689565b905061224881846157ee565b9250806041600082825461225c9190615805565b9091555050505b610ce583836000613a96565b600054610100900460ff1661228a5760005460ff161561228e565b303b155b6122f15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c05565b600054610100900460ff16158015612313576000805461ffff19166101011790555b856001600160a01b0316846001600160a01b03166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561235b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237f919061570b565b6001600160a01b0316146123a55760405162461bcd60e51b8152600401610c0590615728565b603380546001600160a01b038089166001600160a01b0319928316179092556034805492881692909116821790556040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa15801561240e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124329190615906565b61243d90600a615a0d565b603881905550856001600160a01b031663e9cbd8226040518163ffffffff1660e01b8152600401602060405180830381865afa158015612481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a5919061570b565b603580546001600160a01b03199081166001600160a01b0393841617909155603680549091169186169190911790556040516124e5908390602001615a1c565b604051602081830303815290604052607e9080519060200190612509929190614be8565b508160405160200161251b9190615a63565b604051602081830303815290604052607f908051906020019061253f929190614be8565b50676765c793fa10079d601b1b603f5542603e5561256360c0840160a08501615a8d565b6001600160401b031661257c6040850160208601615a8d565b6001600160401b0316111580156125af575061259e6060840160408501615a8d565b6001600160401b0316633b9aca0011155b80156125d75750633b9aca006125cb60c0850160a08601615a8d565b6001600160401b031611155b80156125ff5750633b9aca006125f36080850160608601615a8d565b6001600160401b031611155b80156126265750633b9aca0061261b60e0850160c08601615a8d565b6001600160401b0316105b801561263757508261010001356000105b6126535760405162461bcd60e51b8152600401610c059061575a565b82356039556126686040840160208501615a8d565b603c80546001600160401b0319166001600160401b03929092169190911790556126986060840160408501615a8d565b603c80546001600160401b0392909216600160401b02600160401b600160801b03199092169190911790556126d36080840160608501615a8d565b603c80546001600160401b0392909216600160801b02600160801b600160c01b031990921691909117905561270e60a0840160808501615a8d565b603c80546001600160401b0392909216600160c01b026001600160c01b0390921691909117905561274560c0840160a08501615a8d565b603d80546001600160401b0319166001600160401b039290921691909117905561277560e0840160c08501615a8d565b603d80546001600160401b0392909216600160401b02600160401b600160801b03199092169190911790556127b1610100840160e08501615aa8565b6045805460ff1916911515919091179055604080516020810190915261010084013581526127e390603b906001614c6c565b506045805461ff0019166101001790558015611f13576000805461ff0019169055505050505050565b612814614ca6565b604554610100900460ff161561283c5760405162461bcd60e51b8152600401610c059061579b565b6002600154141561285f5760405162461bcd60e51b8152600401610c05906157b7565b6002600155600080808080805b8c51811015612cab5760008d828151811061288957612889615744565b60200260200101519050600060078111156128a6576128a6615ac5565b8160078111156128b8576128b8615ac5565b14156128f9576128f38d83815181106128d3576128d3615744565b60200260200101518060200190518101906128ee919061570b565b613ce9565b50612c98565b600181600781111561290d5761290d615ac5565b14156129895761294a8d838151811061292857612928615744565b60200260200101518060200190518101906129439190615625565b8789613e21565b60408c018051919b5091995091975091955086919061296a908390615805565b905250602088018051859190612981908390615805565b905250612c98565b600281600781111561299d5761299d615ac5565b14156129f0578c82815181106129b5576129b5615744565b60200260200101518060200190518101906129d09190615adb565b955092506129de8386613edd565b84886060018181516129819190615805565b6003816007811115612a0457612a04615ac5565b1415612a61578c8281518110612a1c57612a1c615744565b6020026020010151806020019051810190612a379190615adb565b95509250612a478386888a613f3b565b809850819750505084886040018181516129819190615805565b6004816007811115612a7557612a75615ac5565b1415612ad1578c8281518110612a8d57612a8d615744565b6020026020010151806020019051810190612aa89190615adb565b94509250612ab7838589613a96565b809850819550505083886020018181516129819190615805565b6005816007811115612ae557612ae5615ac5565b1415612b42578c8281518110612afd57612afd615744565b6020026020010151806020019051810190612b189190615adb565b94509250612b288385888a614031565b8a5190995090975090945084908990612981908390615805565b6006816007811115612b5657612b56615ac5565b1415612baf576000808e8481518110612b7157612b71615744565b6020026020010151806020019051810190612b8c9190615aff565b985091965092509050612ba3858383898c8e6140e1565b99509750612c98915050565b6007816007811115612bc357612bc3615ac5565b1415612c985760008060008f8581518110612be057612be0615744565b6020026020010151806020019051810190612bfb9190615b3d565b60345460405163d505accf60e01b81526001600160a01b038089166004830152306024830152604482018890526064820187905260ff8616608483015260a4820185905260c48201849052969f50939d50939b509497509550929350169063d505accf9060e401600060405180830381600087803b158015612c7c57600080fd5b505af1158015612c90573d6000803e3d6000fd5b505050505050505b5080612ca38161581d565b91505061286c565b508551602087015110612da25785516020870151600091612ccb916157ee565b90508660600151876040015110612d0257612cfd87606001518860400151612cf391906157ee565b828d8d8d8d613bec565b612d9c565b8015612d6f57603554604051630d43af8160e21b81526001600160a01b039091169063350ebe0490612d3c9084908f903390600401615b90565b600060405180830381600087803b158015612d5657600080fd5b505af1158015612d6a573d6000803e3d6000fd5b505050505b612d9c333089604001518a60600151612d8891906157ee565b6034546001600160a01b031692919061427b565b50612f00565b60208601518651600091612db5916157ee565b6035546040516340c10f1960e01b81529192506001600160a01b0316906340c10f1990612de8908d908590600401615baf565b600060405180830381600087803b158015612e0257600080fd5b505af1158015612e16573d6000803e3d6000fd5b50505050866060015187604001511115612e5a57612e558a88606001518960400151612e4291906157ee565b6034546001600160a01b031691906142e6565b612efe565b600087604001518860600151612e7091906157ee565b90508015612efc57885115612ee4576040516364acc99f60e11b81526001600160a01b038b169063c959933e90612eb1903390869086908f90600401615bc8565b600060405180830381600087803b158015612ecb57600080fd5b505af1158015612edf573d6000803e3d6000fd5b505050505b603454612efc906001600160a01b031633308461427b565b505b505b505060018055509198975050505050505050565b603a8181548110610ed257600080fd5b6001600160a01b039182166000908152604b6020908152604080832093909416825291909152205460ff1690565b6033546001600160a01b03163314612f7c5760405162461bcd60e51b8152600401610c0590615bff565b603380546001600160a01b0319166001600160a01b0383811691909117909155603654604051630787a21360e51b815291169063f0f4426090612fc3908490600401614ce3565b600060405180830381600087803b158015612fdd57600080fd5b505af1158015610ce5573d6000803e3d6000fd5b603354604051631c86b03760e31b81526001600160a01b039091169063e43581b890613021903390600401614ce3565b602060405180830381865afa15801561303e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613062919061569d565b61307e5760405162461bcd60e51b8152600401610c05906156ba565b6045805460ff81161560ff1990911681179091556040518181527f9c4ac7d44b0a53ec3cc5ee648f44fa9e0a29b95945172b5f74b52462b9c1d85b90602001611e9b565b6130ca614bb9565b60408051600080825260208201909252611d289187918791879187919061171e565b60335460009081906001600160a01b0316331461311b5760405162461bcd60e51b8152600401610c0590615bff565b6131236139fc565b50506041546042548082106131af5761313c81836157ee565b6035546033546040516340c10f1960e01b8152929450600093506001600160a01b03918216926340c10f19926131789216908690600401615baf565b600060405180830381600087803b15801561319257600080fd5b505af11580156131a6573d6000803e3d6000fd5b505050506131c0565b6131b982826157ee565b9050600091505b6000604181905560425560408051838152602081018390527ffeb12225c131aab793a00c5239afb778932d170fa28ce6e9d23703e4bd892121910160405180910390a19091565b3b151590565b6000908152604860205260409020546001600160a01b0316151590565b6000908152604a60205260409020546001600160a01b031690565b6000818152604860205260409020546001600160a01b031680611eda5760405162461bcd60e51b8152600401610c05906155ed565b6000818152604a6020526040902080546001600160a01b0319166001600160a01b03841690811790915581906132af82613245565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806132f483613245565b9050806001600160a01b0316846001600160a01b0316148061332f5750836001600160a01b03166133248461322a565b6001600160a01b0316145b80611d2b57506001600160a01b038082166000908152604b602090815260408083209388168352929052205460ff16949350505050565b826001600160a01b031661337982613245565b6001600160a01b0316146133b45760405162461bcd60e51b8152602060048201526002602482015261033360f41b6044820152606401610c05565b6001600160a01b0382166133ef5760405162461bcd60e51b8152602060048201526002602482015261333160f01b6044820152606401610c05565b60455460ff16158061341957506001600160a01b03821660009081526044602052604090205460ff165b6134355760405162461bcd60e51b8152600401610c0590615c1b565b61344060008261327a565b6001600160a01b038084166000818152604960209081526040808320805460001901905593861680835284832080546001019055858352604890915283822080546001600160a01b03191682179055925184939291600080516020615d5183398151915291a4505050565b600080603e54426134bc91906157ee565b603c54909150600160c01b90046001600160401b03168115806134dd575080155b156134ec57603f549250505090565b60006134f96001846157ee565b905060006002841161350c576000613517565b6135176002856157ee565b90506000676765c793fa10079d601b1b676765c793fa10079d601a1b61353d8680615654565b6135479190615805565b6135519190615689565b90506000676765c793fa10079d601b1b676765c793fa10079d601a1b6135778785615654565b6135819190615805565b61358b9190615689565b9050600060028361359c878a615654565b6135a69190615654565b6135b09190615689565b90506000600683866135c2898c615654565b6135cc9190615654565b6135d69190615654565b6135e09190615689565b9050676765c793fa10079d601b1b81836135fa8b8b615654565b61360f90676765c793fa10079d601b1b615805565b6136199190615805565b6136239190615805565b603f546136309190615654565b61363a9190615689565b9850505050505050505090565b61364f614bb9565b600080600061365f888787614305565b5050925092509250633b9aca00831061369f5760405162461bcd60e51b81526020600482015260026024820152610d0d60f21b6044820152606401610c05565b6000633b9aca006136b085826157ee565b6136b98a614429565b6136c39190615654565b6136cd9190615689565b603d54909150600160401b90046001600160401b03168110156136fd576136f881633b9aca006157ee565b61371e565b603d5461371e90600160401b90046001600160401b0316633b9aca006157ee565b603d549091506001600160401b031660008061373f6002633b9aca00615a0d565b603c5461375591906001600160401b0316615654565b83613760868a615654565b61376a9190615654565b1061390e57603c546001600160401b031661378a6002633b9aca00615a0d565b6137949190615654565b603c5485906137b390600160401b90046001600160401b031686615654565b6137bd9190615654565b6137c791906157ee565b603c548590633b9aca00906137e5906001600160401b031689615654565b603c54613803908b90600160401b90046001600160401b0316615654565b61380d91906157ee565b6138179190615654565b6138219190615654565b61382b9190615689565b91507f0000000000000000000000000000000000000000000000000000000000000000633b9aca0061385d8585615654565b6138679190615689565b6138719190615805565b86116139095761388c676765c793fa10079d601b1b84615654565b633b9aca008a8e602001516138a19190615654565b6138ab9190615654565b6138b59190615689565b6138c0906001615805565b915082633b9aca006138f27f0000000000000000000000000000000000000000000000000000000000000000896157ee565b6138fc9190615654565b6139069190615689565b90505b6139aa565b60385461391f90633b9aca00615654565b8c518b9061392e908790615654565b6139389190615654565b6139429190615689565b61394d906001615805565b91507f00000000000000000000000000000000000000000000000000000000000000008511156139a757633b9aca00846138f27f0000000000000000000000000000000000000000000000000000000000000000886157ee565b50805b8188526139b7848b615654565b6038546139c8633b9aca0085615654565b6139d29190615654565b6139dc9190615689565b602089015260408801525050606085015250608083015250949350505050565b6000613a066134ab565b90506000676765c793fa10079d601b1b603f5483613a2491906157ee565b604054613a319190615654565b613a3b9190615689565b90508060416000828254613a4f9190615805565b9091555050603f82905542603e8190556040805184815260208101929092527f257ac715ccda9b5cfb21d54ca066524502c8103b5ebb5dcb23b03dad0f02be6591016113b7565b6000808480613aa457506047545b83613ab457613ab16134ab565b93505b60008681526043602052604081206001015490676765c793fa10079d601b1b613add8784615654565b613ae79190615689565b9050808710613af857955080613b1b565b85613b0e676765c793fa10079d601b1b89615654565b613b189190615689565b90505b613b2581836157ee565b91508060406000828254613b3991906157ee565b9091555050811580613b875750613b7b676765c793fa10079d601b1b7f0000000000000000000000000000000000000000000000000000000000000000615654565b613b858784615654565b115b613ba35760405162461bcd60e51b8152600401610c0590615c37565b60008881526043602052604080822060010184905551600080516020615d1183398151915291613bd6918b918591615c53565b60405180910390a1509496939550929350505050565b8515613c0957603454613c09906001600160a01b031684886142e6565b8415611f1357805115613c7b57604051635d794dc560e11b81526001600160a01b0383169063baf29b8a90613c4890879089908b908790600401615bc8565b600060405180830381600087803b158015613c6257600080fd5b505af1158015613c76573d6000803e3d6000fd5b505050505b603554604051630d43af8160e21b81526001600160a01b039091169063350ebe0490613caf90889088903390600401615b90565b600060405180830381600087803b158015613cc957600080fd5b505af1158015613cdd573d6000803e3d6000fd5b50505050505050505050565b60455460009060ff161580613d3057506001600160a01b03821660009081526044602052604090205460ff168015613d3057503360009081526044602052604090205460ff165b613d4c5760405162461bcd60e51b8152600401610c0590615c1b565b5060478054600190810182556001600160a01b038316600081815260496020908152604080832080549095019094559354808252604890945282812080546001600160a01b031916831790559151839290600080516020615d51833981519152908290a4613dcc6000838360405180602001604052806000815250614658565b611eda5760405162461bcd60e51b8152600401610c0590615c6c565b613df3848484613366565b613dff84848484614658565b613e1b5760405162461bcd60e51b8152600401610c0590615c6c565b50505050565b60008080808680613e3157506047545b3388613e3d82826132e8565b613e595760405162461bcd60e51b8152600401610c0590615609565b60008a8152604360209081526040808320815180830190925280548252600101549181019190915290808080613e90858f8f614305565b945094505093509350633b9aca008411613ebc5760405162461bcd60e51b8152600401610c0590615c88565b613ec58f614753565b9351919e919d509b5091995090975050505050505050565b8180613ee857506047545b60008381526043602052604081208054849290613f06908490615805565b9091555050604051600080516020615d3183398151915290613f2e9085908590600190615c53565b60405180910390a1505050565b6000808580613f4957506047545b3387613f5582826132e8565b613f715760405162461bcd60e51b8152600401610c0590615609565b600089815260436020526040812080548a9290613f8f9084906157ee565b90915550506000898152604360209081526040808320815180830190925280548252600101549181019190915281908190613fcb908b8b614305565b9450945050509250633b9aca008311613ff65760405162461bcd60e51b8152600401610c0590615c88565b600080516020615d318339815191528c8c600060405161401893929190615c53565b60405180910390a1909b909a5098505050505050505050565b60008080868061404057506047545b338861404c82826132e8565b6140685760405162461bcd60e51b8152600401610c0590615609565b6140748a8a8a8a6147d2565b603c54929b509096509450600090633b9aca00906140a3908c90600160801b90046001600160401b0316615654565b6140ad9190615689565b905080604160008282546140c19190615805565b909155506140d19050818b6157ee565b9650505050509450945094915050565b60008087806140ef57506047545b33896140fb82826132e8565b6141175760405162461bcd60e51b8152600401610c0590615609565b6141238b8989896147d2565b919950975095506001600160a01b038a1630141561414d57614146898988613a96565b505061426a565b6033546040516333b52a9f60e11b81526001600160a01b039091169063676a553e9061417d908d90600401614ce3565b602060405180830381865afa15801561419a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141be919061569d565b6141ef5760405162461bcd60e51b8152602060048201526002602482015261191960f11b6044820152606401610c05565b603c5460405163d645c39360e01b8152600481018b9052602481018a9052600160801b9091046001600160401b031660448201526001600160a01b038b169063d645c39390606401600060405180830381600087803b15801561425157600080fd5b505af1158015614265573d6000803e3d6000fd5b505050505b509499939850929650505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052613e1b9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526149dc565b610cad8363a9059cbb60e01b84846040516024016142af929190615baf565b6000808080808661438a57603660009054906101000a90046001600160a01b03166001600160a01b03166357de26a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015614363573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143879190615625565b96505b8561439a576143976134ab565b95505b6000676765c793fa10079d601b1b878a602001516143b89190615654565b6143c29190615689565b90506000603854898b600001516143d99190615654565b6143e39190615689565b90506000826143f5575060001961441a565b603c54839061440d906001600160401b031684615654565b6144179190615689565b90505b9a919950979695509350505050565b6037546000906001600160a01b031661446257603b60008154811061445057614450615744565b90600052602060002001549050919050565b603754604051635dfba04560e11b81526000916001600160a01b03169063bbf7408a90614493908690600401614ce3565b602060405180830381865afa1580156144b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144d49190615625565b9050603a6001815481106144ea576144ea615744565b9060005260206000200154811061452257603b60018154811061450f5761450f615744565b9060005260206000200154915050919050565b603a60008154811061453657614536615744565b9060005260206000200154811161455b57603b60008154811061450f5761450f615744565b603a60008154811061456f5761456f615744565b9060005260206000200154603a60018154811061458e5761458e615744565b90600052602060002001546145a391906157ee565b603a6000815481106145b7576145b7615744565b9060005260206000200154826145cd91906157ee565b603b6000815481106145e1576145e1615744565b9060005260206000200154603b60018154811061460057614600615744565b906000526020600020015461461591906157ee565b61461f9190615654565b6146299190615689565b603b60008154811061463d5761463d615744565b9060005260206000200154610d979190615805565b50919050565b60006001600160a01b0384163b1561474b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061469c903390899088908890600401615ca4565b6020604051808303816000875af19250505080156146d7575060408051601f3d908101601f191682019092526146d491810190615cd7565b60015b614731573d808015614705576040519150601f19603f3d011682016040523d82523d6000602084013e61470a565b606091505b5080516147295760405162461bcd60e51b8152600401610c0590615c37565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611d2b565b506001611d2b565b600061475e82613245565b905061476b60008361327a565b6001600160a01b038116600081815260496020908152604080832080546000190190558583526048825280832080546001600160a01b0319169055604390915280822082815560010182905551849290600080516020615d51833981519152908390a45050565b6000808086806147e157506047545b846147f1576147ee6134ab565b94505b600085614809676765c793fa10079d601b1b8a615654565b6148139190615689565b60008a81526043602052604090206001015490915061488857614861676765c793fa10079d601b1b7f0000000000000000000000000000000000000000000000000000000000000000615654565b61486b8783615654565b116148885760405162461bcd60e51b8152600401610c0590615c37565b600089815260436020526040812060010180548392906148a9908490615805565b9250508190555080604060008282546148c29190615805565b90915550506039546148e090676765c793fa10079d601b1b90615654565b866040546148ee9190615654565b11156149215760405162461bcd60e51b8152602060048201526002602482015261343560f01b6044820152606401610c05565b600089815260436020908152604080832081518083019092528054825260010154918101919091528190614956908a8a614305565b50935050509150633b9aca0082116149805760405162461bcd60e51b8152600401610c0590615c88565b600080516020615d118339815191528b8460016040516149a293929190615c53565b60405180910390a1876149c0676765c793fa10079d601b1b85615654565b6149ca9190615689565b9b909a50969850959650505050505050565b6000614a31826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614aae9092919063ffffffff16565b805190915015610cad5780806020019051810190614a4f919061569d565b610cad5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c05565b6060611d2b848460008585843b614b075760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c05565b600080866001600160a01b03168587604051614b239190615cf4565b60006040518083038185875af1925050503d8060008114614b60576040519150601f19603f3d011682016040523d82523d6000602084013e614b65565b606091505b5091509150614b75828286614b80565b979650505050505050565b60608315614b8f575081610d97565b825115614b9f5782518084602001fd5b8160405162461bcd60e51b8152600401610c059190614d85565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b828054614bf4906155b8565b90600052602060002090601f016020900481019282614c165760008555614c5c565b82601f10614c2f57805160ff1916838001178555614c5c565b82800160010185558215614c5c579182015b82811115614c5c578251825591602001919060010190614c41565b50614c68929150614cce565b5090565b828054828255906000526020600020908101928215614c5c5791602002820182811115614c5c578251825591602001919060010190614c41565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b5b80821115614c685760008155600101614ccf565b6001600160a01b0391909116815260200190565b6001600160e01b031981168114614d0d57600080fd5b50565b600060208284031215614d2257600080fd5b8135610d9781614cf7565b60005b83811015614d48578181015183820152602001614d30565b83811115613e1b5750506000910152565b60008151808452614d71816020860160208601614d2d565b601f01601f19169290920160200192915050565b602081526000610d976020830184614d59565b600060208284031215614daa57600080fd5b5035919050565b6001600160a01b0381168114614d0d57600080fd5b60008060408385031215614dd957600080fd5b8235614de481614db1565b946020939093013593505050565b600080600060608486031215614e0757600080fd5b8335614e1281614db1565b92506020840135614e2281614db1565b929592945050506040919091013590565b60008060408385031215614e4657600080fd5b823591506020830135614e5881614db1565b809150509250929050565b60a08101610b4a828480518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b600060208284031215614eae57600080fd5b8135610d9781614db1565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614ef757614ef7614eb9565b604052919050565b600082601f830112614f1057600080fd5b81356001600160401b03811115614f2957614f29614eb9565b614f3c601f8201601f1916602001614ecf565b818152846020838601011115614f5157600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215614f8057600080fd5b81356001600160401b03811115614f9657600080fd5b611d2b84828501614eff565b80356001600160401b0381168114611eda57600080fd5b60008060408385031215614fcc57600080fd5b614de483614fa2565b60006001600160401b03821115614fee57614fee614eb9565b5060051b60200190565b600082601f83011261500957600080fd5b8135602061501e61501983614fd5565b614ecf565b82815260059290921b8401810191818101908684111561503d57600080fd5b8286015b848110156150585780358352918301918301615041565b509695505050505050565b60008060006060848603121561507857600080fd5b833561508381614db1565b925060208401356001600160401b038082111561509f57600080fd5b6150ab87838801614ff8565b935060408601359150808211156150c157600080fd5b506150ce86828701614ff8565b9150509250925092565b60008060008060008060c087890312156150f157600080fd5b86356001600160401b038082111561510857600080fd5b6151148a838b01614ff8565b9750602089013591508082111561512a57600080fd5b6151368a838b01614ff8565b96506040890135915061514882614db1565b90945060608801359061515a82614db1565b90935060808801359061516c82614db1565b90925060a0880135908082111561518257600080fd5b5061518f89828a01614eff565b9150509295509295509295565b600081518084526020808501945080840160005b838110156151cc578151875295820195908201906001016151b0565b509495945050505050565b6040815260006151ea604083018561519c565b90508260208301529392505050565b600082601f83011261520a57600080fd5b8135602061521a61501983614fd5565b82815260059290921b8401810191818101908684111561523957600080fd5b8286015b84811015615058578035600881106152555760008081fd5b835291830191830161523d565b600082601f83011261527357600080fd5b8135602061528361501983614fd5565b82815260059290921b840181019181810190868411156152a257600080fd5b8286015b848110156150585780356001600160401b038111156152c55760008081fd5b6152d38986838b0101614eff565b8452509183019183016152a6565b600080600080608085870312156152f757600080fd5b84356001600160401b038082111561530e57600080fd5b61531a888389016151f9565b9550602087013591508082111561533057600080fd5b5061533d87828801615262565b935050604085013561534e81614db1565b9150606085013561535e81614db1565b939692955090935050565b8015158114614d0d57600080fd5b6000806040838503121561538a57600080fd5b823561539581614db1565b91506020830135614e5881615369565b600080600080608085870312156153bb57600080fd5b84356153c681614db1565b935060208501356153d681614db1565b92506040850135915060608501356001600160401b038111156153f857600080fd5b61540487828801614eff565b91505092959194509250565b60008060006060848603121561542557600080fd5b505081359360208301359350604090920135919050565b60008060008060008587036101a081121561545657600080fd5b863561546181614db1565b9550602087013561547181614db1565b9450604087013561548181614db1565b9350610120605f198201121561549657600080fd5b506060860191506101808601356001600160401b038111156154b757600080fd5b6154c388828901614eff565b9150509295509295909350565b60008060008060008060c087890312156154e957600080fd5b86356001600160401b038082111561550057600080fd5b61550c8a838b016151f9565b9750602089013591508082111561552257600080fd5b6151368a838b01615262565b6000806040838503121561554157600080fd5b823561554c81614db1565b91506020830135614e5881614db1565b6000806000806080858703121561557257600080fd5b84356001600160401b038082111561558957600080fd5b61559588838901614ff8565b955060208701359150808211156155ab57600080fd5b5061533d87828801614ff8565b600181811c908216806155cc57607f821691505b6020821081141561465257634e487b7160e01b600052602260045260246000fd5b602080825260029082015261191b60f11b604082015260600190565b602080825260029082015261189b60f11b604082015260600190565b60006020828403121561563757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561566e5761566e61563e565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261569857615698615673565b500490565b6000602082840312156156af57600080fd5b8151610d9781615369565b6020808252600190820152603160f81b604082015260600190565b6020808252600190820152601960f91b604082015260600190565b6020808252600190820152603960f81b604082015260600190565b60006020828403121561571d57600080fd5b8151610d9781614db1565b602080825260029082015261333360f01b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b602080825260029082015261313560f01b604082015260600190565b604081526000615789604083018561519c565b8281036020840152612114818561519c565b6020808252600290820152611a1960f11b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000828210156158005761580061563e565b500390565b600082198211156158185761581861563e565b500190565b60006000198214156158315761583161563e565b5060010190565b60008261584757615847615673565b500690565b6000815161585e818560208601614d2d565b9290920192915050565b600080845481600182811c91508083168061588457607f831692505b60208084108214156158a457634e487b7160e01b86526022600452602486fd5b8180156158b857600181146158c9576158f6565b60ff198616895284890196506158f6565b60008b81526020902060005b868110156158ee5781548b8201529085019083016158d5565b505084890196505b505050505050612114818561584c565b60006020828403121561591857600080fd5b815160ff81168114610d9757600080fd5b600181815b8085111561596457816000190482111561594a5761594a61563e565b8085161561595757918102915b93841c939080029061592e565b509250929050565b60008261597b57506001610b4a565b8161598857506000610b4a565b816001811461599e57600281146159a8576159c4565b6001915050610b4a565b60ff8411156159b9576159b961563e565b50506001821b610b4a565b5060208310610133831016604e8410600b84101617156159e7575081810a610b4a565b6159f18383615929565b8060001904821115615a0557615a0561563e565b029392505050565b6000610d9760ff84168361596c565b6e020b733b63290283937ba37b1b7b61608d1b815260008251615a4681600f850160208701614d2d565b650815985d5b1d60d21b600f939091019283015250601501919050565b60008251615a75818460208701614d2d565b650b5d985d5b1d60d21b920191825250600601919050565b600060208284031215615a9f57600080fd5b610d9782614fa2565b600060208284031215615aba57600080fd5b8135610d9781615369565b634e487b7160e01b600052602160045260246000fd5b60008060408385031215615aee57600080fd5b505080516020909101519092909150565b60008060008060808587031215615b1557600080fd5b845193506020850151615b2781614db1565b6040860151606090960151949790965092505050565b60008060008060008060c08789031215615b5657600080fd5b8651615b6181614db1565b6020880151604089015160608a015160808b015160a0909b0151939c929b509099909850965090945092505050565b9283526001600160a01b03918216602084015216604082015260600190565b6001600160a01b03929092168252602082015260400190565b60018060a01b0385168152836020820152826040820152608060608201526000615bf56080830184614d59565b9695505050505050565b6020808252600290820152610c4d60f21b604082015260600190565b602080825260029082015261032360f41b604082015260600190565b6020808252600290820152610c8d60f21b604082015260600190565b928352602083019190915260ff16604082015260600190565b602080825260029082015261323960f01b604082015260600190565b602080825260029082015261323160f01b604082015260600190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615bf590830184614d59565b600060208284031215615ce957600080fd5b8151610d9781614cf7565b60008251615d06818460208701614d2d565b919091019291505056fe70cf49afe7355562d5b022e594790f22b71ad8cc7eec902fa5feac7c67f71091722cb71fa87c947148cefc06dd890af5802a6a00207c5ddecf1191bf71ce3cd4ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220f8e1b0ac504f3c21121d073c1378956d113dc5fab8875cc18a13ade9f6e06c5864736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106102bd5760003560e01c8063010db195146102c257806301ffc9a7146102f857806306fdde0314610328578063081812fc1461034a578063087a60071461036a578063095ea7b31461038e5780630e198f22146103b057806313888565146103c657806323b872dd146103dc578063254cf439146103fc578063307439af1461043b57806334ce998a1461046857806335836f151461047d57806339393ac91461049d57806339eb4dc6146104bd5780633ae2325f146104d75780633af32abf146104f757806342842e0e14610527578063430c2081146105475780634f7e43df1461056757806355f804b31461058e5780635c975abb146105ae57806361d027b3146105cd5780636352211e146105ed57806370a082311461060d578063741075431461062d5780637aacfffa1461064d5780637adbf973146106965780637c3a00fd146106b65780637dc0d1d0146106dd5780637e53bd97146106fd5780637e56d47c1461071d57806383ba59fc1461073d57806389050f1d1461076b57806395d89b411461078a5780639a3b6f2f1461079f5780639f48118f146107e5578063a22cb465146107fd578063af2c8c2e1461081d578063b1511cc914610833578063b4bd6f4614610853578063b88d4fde14610873578063bbcac55714610893578063c4ae3168146108a9578063c66d8b01146108be578063c87b56dd146108de578063d645c393146108fe578063d6bcab2a1461091e578063d8dfeb451461093e578063de1f77651461095e578063de8fc6981461097d578063df011c4114610990578063e182b883146109b0578063e1c84ea4146109d0578063e626648a146109e6578063e985e9c514610a0d578063e9cbd82214610a2d578063f0f4426014610a4d578063fad9aba314610a6d578063fbefa41314610aa1578063fc29b02114610ab6578063fd527cf814610ad6575b600080fd5b3480156102ce57600080fd5b506037546102e2906001600160a01b031681565b6040516102ef9190614ce3565b60405180910390f35b34801561030457600080fd5b50610318610313366004614d10565b610aeb565b60405190151581526020016102ef565b34801561033457600080fd5b5061033d610b50565b6040516102ef9190614d85565b34801561035657600080fd5b506102e2610365366004614d98565b610bde565b34801561037657600080fd5b50610380603f5481565b6040519081526020016102ef565b34801561039a57600080fd5b506103ae6103a9366004614dc6565b610c17565b005b3480156103bc57600080fd5b50610380603e5481565b3480156103d257600080fd5b5061038060415481565b3480156103e857600080fd5b506103ae6103f7366004614df2565b610cb2565b34801561040857600080fd5b50603c5461042390600160401b90046001600160401b031681565b6040516001600160401b0390911681526020016102ef565b34801561044757600080fd5b5061045b610456366004614e33565b610cec565b6040516102ef9190614e63565b34801561047457600080fd5b50610380610d9e565b34801561048957600080fd5b50610380610498366004614d98565b610dd0565b3480156104a957600080fd5b506103ae6104b8366004614e9c565b610e0c565b3480156104c957600080fd5b506045546103189060ff1681565b3480156104e357600080fd5b506103806104f2366004614d98565b610ec2565b34801561050357600080fd5b50610318610512366004614e9c565b60446020526000908152604090205460ff1681565b34801561053357600080fd5b506103ae610542366004614df2565b610ee3565b34801561055357600080fd5b50610318610562366004614dc6565b610efe565b34801561057357600080fd5b50603d5461042390600160401b90046001600160401b031681565b34801561059a57600080fd5b506103ae6105a9366004614f6e565b610f0a565b3480156105ba57600080fd5b5060455461031890610100900460ff1681565b3480156105d957600080fd5b506033546102e2906001600160a01b031681565b3480156105f957600080fd5b506102e2610608366004614d98565b610fae565b34801561061957600080fd5b50610380610628366004614e9c565b610fb9565b34801561063957600080fd5b506103ae610648366004614fb9565b611011565b34801561065957600080fd5b50610681610668366004614d98565b6043602052600090815260409020805460019091015482565b604080519283526020830191909152016102ef565b3480156106a257600080fd5b506103ae6106b1366004614e9c565b6113c3565b3480156106c257600080fd5b50603c5461042390600160c01b90046001600160401b031681565b3480156106e957600080fd5b506036546102e2906001600160a01b031681565b34801561070957600080fd5b506103ae610718366004615063565b611530565b34801561072957600080fd5b5061045b6107383660046150d8565b61171e565b34801561074957600080fd5b5061075d610758366004614e9c565b611bd1565b6040516102ef9291906151d7565b34801561077757600080fd5b50610380676765c793fa10079d601a1b81565b34801561079657600080fd5b5061033d611cf1565b6107b26107ad3660046152e1565b611cfe565b6040516102ef91908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b3480156107f157600080fd5b50610380633b9aca0081565b34801561080957600080fd5b506103ae610818366004615377565b611d33565b34801561082957600080fd5b5061038060405481565b34801561083f57600080fd5b506103ae61084e366004614d98565b611ddd565b34801561085f57600080fd5b5061038061086e366004614e9c565b611ea6565b34801561087f57600080fd5b506103ae61088e3660046153a5565b611edf565b34801561089f57600080fd5b5061038060425481565b3480156108b557600080fd5b506103ae611f1b565b3480156108ca57600080fd5b50603d54610423906001600160401b031681565b3480156108ea57600080fd5b5061033d6108f9366004614d98565b611fc5565b34801561090a57600080fd5b506103ae610919366004615410565b61211d565b34801561092a57600080fd5b506103ae61093936600461543c565b61226f565b34801561094a57600080fd5b506034546102e2906001600160a01b031681565b34801561096a57600080fd5b50610380676765c793fa10079d601b1b81565b6107b261098b3660046154d0565b61280c565b34801561099c57600080fd5b50603c54610423906001600160401b031681565b3480156109bc57600080fd5b506103806109cb366004614d98565b612f14565b3480156109dc57600080fd5b5061038060395481565b3480156109f257600080fd5b50603c5461042390600160801b90046001600160401b031681565b348015610a1957600080fd5b50610318610a2836600461552e565b612f24565b348015610a3957600080fd5b506035546102e2906001600160a01b031681565b348015610a5957600080fd5b506103ae610a68366004614e9c565b612f52565b348015610a7957600080fd5b506103807f000000000000000000000000000000000000000000000000000000000000000081565b348015610aad57600080fd5b506103ae612ff1565b348015610ac257600080fd5b5061045b610ad136600461555c565b6130c2565b348015610ae257600080fd5b506106816130ec565b60006001600160e01b03198216635b5e139f60e01b1480610b1c57506001600160e01b031982166380ac58cd60e01b145b80610b2f57506001600160e01b03198216155b80610b4a57506001600160e01b031982166301ffc9a760e01b145b92915050565b607e8054610b5d906155b8565b80601f0160208091040260200160405190810160405280929190818152602001828054610b89906155b8565b8015610bd65780601f10610bab57610100808354040283529160200191610bd6565b820191906000526020600020905b815481529060010190602001808311610bb957829003601f168201915b505050505081565b6000610be98261320d565b610c0e5760405162461bcd60e51b8152600401610c05906155ed565b60405180910390fd5b610b4a8261322a565b6000610c2282613245565b9050806001600160a01b0316836001600160a01b03161415610c6b5760405162461bcd60e51b8152602060048201526002602482015261323760f01b6044820152606401610c05565b336001600160a01b0382161480610c875750610c878133612f24565b610ca35760405162461bcd60e51b8152600401610c0590615609565b610cad838361327a565b505050565b3381610cbe82826132e8565b610cda5760405162461bcd60e51b8152600401610c0590615609565b610ce5858585613366565b5050505050565b610cf4614bb9565b60008381526043602090815260409182902082518084018452815481526001909101548183015260365483516315f789a960e21b81529351610d9794929387936001600160a01b03909316926357de26a492600480830193928290030181865afa158015610d66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8a9190615625565b610d926134ab565b613647565b9392505050565b6000676765c793fa10079d601b1b610db46134ab565b604054610dc19190615654565b610dcb9190615689565b905090565b6000676765c793fa10079d601b1b610de66134ab565b600084815260436020526040902060010154610e029190615654565b610b4a9190615689565b603354604051631c86b03760e31b81526001600160a01b039091169063e43581b890610e3c903390600401614ce3565b602060405180830381865afa158015610e59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7d919061569d565b610e995760405162461bcd60e51b8152600401610c05906156ba565b6001600160a01b03166000908152604460205260409020805460ff19811660ff90911615179055565b603b8181548110610ed257600080fd5b600091825260209091200154905081565b610cad83838360405180602001604052806000815250611edf565b6000610d9783836132e8565b60335460405163521d4de960e01b81526001600160a01b039091169063521d4de990610f3a903390600401614ce3565b602060405180830381865afa158015610f57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7b919061569d565b610f975760405162461bcd60e51b8152600401610c05906156d5565b8051610faa906046906020840190614be8565b5050565b6000610b4a82613245565b60006001600160a01b038216610ff55760405162461bcd60e51b81526020600482015260016024820152600360fc1b6044820152606401610c05565b506001600160a01b031660009081526049602052604090205490565b60335460405163521d4de960e01b81526001600160a01b039091169063521d4de990611041903390600401614ce3565b602060405180830381865afa15801561105e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611082919061569d565b61109e5760405162461bcd60e51b8152600401610c05906156d5565b806f31b7b63630ba32b930b62330b1ba37b960811b141561110857603d546001600160401b0390811690831611156110e85760405162461bcd60e51b8152600401610c05906156f0565b603c80546001600160401b0319166001600160401b03841617905561137c565b80713a30b933b2ba2432b0b63a342330b1ba37b960711b141561119057633b9aca00826001600160401b031610156111675760405162461bcd60e51b8152602060048201526002602482015261313760f01b6044820152606401610c05565b603c8054600160401b600160801b031916600160401b6001600160401b0385160217905561137c565b8068626f72726f7746656560b81b14156111fa57633b9aca00826001600160401b031611156111d15760405162461bcd60e51b8152600401610c05906156f0565b603c8054600160801b600160c01b031916600160801b6001600160401b0385160217905561137c565b806b696e7465726573745261746560a01b141561123e576112196139fc565b603c80546001600160c01b0316600160c01b6001600160401b0385160217905561137c565b80736c69717569646174696f6e53757263686172676560601b14156112d957603c546001600160401b038084169116118015906112885750633b9aca00826001600160401b031611155b6112b95760405162461bcd60e51b8152602060048201526002602482015261062760f31b6044820152606401610c05565b603d80546001600160401b0319166001600160401b03841617905561137c565b80751b585e131a5c5d5a59185d1a5bdb911a5cd8dbdd5b9d60521b141561134f57633b9aca00826001600160401b0316106113265760405162461bcd60e51b8152600401610c05906156f0565b603d8054600160401b600160801b031916600160401b6001600160401b0385160217905561137c565b60405162461bcd60e51b8152602060048201526002602482015261343360f01b6044820152606401610c05565b604080516001600160401b0384168152602081018390527f13b367dac93b85d1ed9b3d8961d8b48e1a677c9800bb1613b4b0416b2d5b61d091015b60405180910390a15050565b603354604051631c86b03760e31b81526001600160a01b039091169063e43581b8906113f3903390600401614ce3565b602060405180830381865afa158015611410573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611434919061569d565b6114505760405162461bcd60e51b8152600401610c05906156ba565b603354604080516361d027b360e01b815290516001600160a01b03928316928416916361d027b39160048083019260209291908290030181865afa15801561149c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c0919061570b565b6001600160a01b0316146114e65760405162461bcd60e51b8152600401610c0590615728565b603680546001600160a01b0319166001600160a01b0383169081179091556040517f3df77beb5db05fcdd70a30fc8adf3f83f9501b68579455adbd100b818094039490600090a250565b60335460405163521d4de960e01b81526001600160a01b039091169063521d4de990611560903390600401614ce3565b602060405180830381865afa15801561157d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a1919061569d565b6115bd5760405162461bcd60e51b8152600401610c05906156d5565b805182511480156115e857506000816000815181106115de576115de615744565b6020026020010151115b801561167757506001600160a01b038316158061167757508160008151811061161357611613615744565b60200260200101518260018151811061162e5761162e615744565b602002602001015111801561167757508060008151811061165157611651615744565b60200260200101518160018151811061166c5761166c615744565b602002602001015110155b6116935760405162461bcd60e51b8152600401610c059061575a565b603780546001600160a01b0319166001600160a01b03851617905581516116c190603a906020850190614c6c565b5080516116d590603b906020840190614c6c565b50826001600160a01b03167feb74d4d9fea592587c926aeb35eb6a7893fb28db0c1c8eb2eb3c586e7164b76c8383604051611711929190615776565b60405180910390a2505050565b611726614bb9565b604554610100900460ff161561174e5760405162461bcd60e51b8152600401610c059061579b565b600260015414156117715760405162461bcd60e51b8152600401610c05906157b7565b600260015585518751146117ac5760405162461bcd60e51b8152602060048201526002602482015261323560f01b6044820152606401610c05565b603660009054906101000a90046001600160a01b03166001600160a01b03166357de26a46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118239190615625565b60608201526118306134ab565b608082015260005b8751811015611b49576000604360008a848151811061185957611859615744565b6020026020010151815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905060006118a6823386606001518760800151613647565b9050600081604001511180156118d8575080604001518984815181106118ce576118ce615744565b6020026020010151115b806118ff575080600001518984815181106118f5576118f5615744565b6020026020010151115b1561192857806000015189848151811061191b5761191b615744565b6020026020010181815250505b60008460600151826060015161193e9190615654565b603854633b9aca008c878151811061195857611958615744565b602002602001015161196a9190615654565b6119749190615654565b61197e9190615689565b905080836000015111611a365782600001519050604360008c86815181106119a8576119a8615744565b6020908102919091018101518252810191909152604001600090812081815560010155603d548a51633b9aca00916001600160401b0316908c90879081106119f2576119f2615744565b6020026020010151611a049190615654565b611a0e9190615689565b8260800151611a1d91906157ee565b85604001818151611a2e9190615805565b905250611aec565b80604360008d8781518110611a4d57611a4d615744565b602002602001015181526020019081526020016000206000016000828254611a7591906157ee565b92505081905550611ae98b8581518110611a9157611a91615744565b6020908102919091010151603d548c51633b9aca00916001600160401b0316908e9089908110611ac357611ac3615744565b6020026020010151611ad59190615654565b611adf9190615689565b8760800151613a96565b50505b8085602001818151611afe9190615805565b90525089518a9085908110611b1557611b15615744565b602002602001015185600001818151611b2e9190615805565b905250839250611b41915082905061581d565b915050611838565b50603d54633b9aca0090611b66906001600160401b0316826157ee565b8251611b729190615654565b611b7c9190615689565b60416000828254611b8d9190615805565b9091555050604081015160428054600090611ba9908490615805565b909155505060208101518151611bc3919087878787613bec565b600180559695505050505050565b60475460609060009081816001600160401b03811115611bf357611bf3614eb9565b604051908082528060200260200182016040528015611c1c578160200160208202803683370190505b50905060008060015b848111611ce3576000818152604860205260409020546001600160a01b0390811693508816831480611c705750876001600160a01b0316611c658261322a565b6001600160a01b0316145b80611ca057506001600160a01b038084166000908152604b60209081526040808320938c168352929052205460ff165b15611cd15780848381518110611cb857611cb8615744565b6020908102919091010152611cce600183615805565b91505b80611cdb8161581d565b915050611c25565b509196919550909350505050565b607f8054610b5d906155b8565b611d06614ca6565b60408051600080825260208201909252611d289187918791879187919061280c565b90505b949350505050565b6001600160a01b038216331415611d715760405162461bcd60e51b8152602060048201526002602482015261064760f31b6044820152606401610c05565b336000818152604b602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60335460405163521d4de960e01b81526001600160a01b039091169063521d4de990611e0d903390600401614ce3565b602060405180830381865afa158015611e2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4e919061569d565b611e6a5760405162461bcd60e51b8152600401610c05906156d5565b60398190556040518181527fdd63b3dcdbebad734892f7c7a26d0f647fbc7eec973e0775f5229018ac4ab47a906020015b60405180910390a150565b604554600090610100900460ff1615611ed15760405162461bcd60e51b8152600401610c059061579b565b610b4a82613ce9565b919050565b3382611eeb82826132e8565b611f075760405162461bcd60e51b8152600401610c0590615609565b611f1386868686613de8565b505050505050565b60335460405163521d4de960e01b81526001600160a01b039091169063521d4de990611f4b903390600401614ce3565b602060405180830381865afa158015611f68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8c919061569d565b611fa85760405162461bcd60e51b8152600401610c05906156d5565b6045805461ff001981166101009182900460ff1615909102179055565b6060611fd08261320d565b611fec5760405162461bcd60e51b8152600401610c05906155ed565b8160005b811561201657806120008161581d565b915061200f9050600a83615689565b9150611ff0565b6000816001600160401b0381111561203057612030614eb9565b6040519080825280601f01601f19166020018201604052801561205a576020820181803683370190505b5090505b84156120c55761206f6001836157ee565b915061207c600a86615838565b612087906030615805565b60f81b81838151811061209c5761209c615744565b60200101906001600160f81b031916908160001a9053506120be600a86615689565b945061205e565b6000604680546120d4906155b8565b9050116120f05760405180602001604052806000815250612114565b604681604051602001612104929190615868565b6040516020818303038152906040525b95945050505050565b604554610100900460ff16156121455760405162461bcd60e51b8152600401610c059061579b565b6033546040516333b52a9f60e11b81526001600160a01b039091169063676a553e90612175903390600401614ce3565b602060405180830381865afa158015612192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b6919061569d565b6121e65760405162461bcd60e51b81526020600482015260016024820152603360f81b6044820152606401610c05565b603c54600160801b90046001600160401b031681111561226357603c54600090633b9aca0090849061222890600160801b90046001600160401b0316856157ee565b6122329190615654565b61223c9190615689565b905061224881846157ee565b9250806041600082825461225c9190615805565b9091555050505b610ce583836000613a96565b600054610100900460ff1661228a5760005460ff161561228e565b303b155b6122f15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c05565b600054610100900460ff16158015612313576000805461ffff19166101011790555b856001600160a01b0316846001600160a01b03166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561235b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237f919061570b565b6001600160a01b0316146123a55760405162461bcd60e51b8152600401610c0590615728565b603380546001600160a01b038089166001600160a01b0319928316179092556034805492881692909116821790556040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa15801561240e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124329190615906565b61243d90600a615a0d565b603881905550856001600160a01b031663e9cbd8226040518163ffffffff1660e01b8152600401602060405180830381865afa158015612481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a5919061570b565b603580546001600160a01b03199081166001600160a01b0393841617909155603680549091169186169190911790556040516124e5908390602001615a1c565b604051602081830303815290604052607e9080519060200190612509929190614be8565b508160405160200161251b9190615a63565b604051602081830303815290604052607f908051906020019061253f929190614be8565b50676765c793fa10079d601b1b603f5542603e5561256360c0840160a08501615a8d565b6001600160401b031661257c6040850160208601615a8d565b6001600160401b0316111580156125af575061259e6060840160408501615a8d565b6001600160401b0316633b9aca0011155b80156125d75750633b9aca006125cb60c0850160a08601615a8d565b6001600160401b031611155b80156125ff5750633b9aca006125f36080850160608601615a8d565b6001600160401b031611155b80156126265750633b9aca0061261b60e0850160c08601615a8d565b6001600160401b0316105b801561263757508261010001356000105b6126535760405162461bcd60e51b8152600401610c059061575a565b82356039556126686040840160208501615a8d565b603c80546001600160401b0319166001600160401b03929092169190911790556126986060840160408501615a8d565b603c80546001600160401b0392909216600160401b02600160401b600160801b03199092169190911790556126d36080840160608501615a8d565b603c80546001600160401b0392909216600160801b02600160801b600160c01b031990921691909117905561270e60a0840160808501615a8d565b603c80546001600160401b0392909216600160c01b026001600160c01b0390921691909117905561274560c0840160a08501615a8d565b603d80546001600160401b0319166001600160401b039290921691909117905561277560e0840160c08501615a8d565b603d80546001600160401b0392909216600160401b02600160401b600160801b03199092169190911790556127b1610100840160e08501615aa8565b6045805460ff1916911515919091179055604080516020810190915261010084013581526127e390603b906001614c6c565b506045805461ff0019166101001790558015611f13576000805461ff0019169055505050505050565b612814614ca6565b604554610100900460ff161561283c5760405162461bcd60e51b8152600401610c059061579b565b6002600154141561285f5760405162461bcd60e51b8152600401610c05906157b7565b6002600155600080808080805b8c51811015612cab5760008d828151811061288957612889615744565b60200260200101519050600060078111156128a6576128a6615ac5565b8160078111156128b8576128b8615ac5565b14156128f9576128f38d83815181106128d3576128d3615744565b60200260200101518060200190518101906128ee919061570b565b613ce9565b50612c98565b600181600781111561290d5761290d615ac5565b14156129895761294a8d838151811061292857612928615744565b60200260200101518060200190518101906129439190615625565b8789613e21565b60408c018051919b5091995091975091955086919061296a908390615805565b905250602088018051859190612981908390615805565b905250612c98565b600281600781111561299d5761299d615ac5565b14156129f0578c82815181106129b5576129b5615744565b60200260200101518060200190518101906129d09190615adb565b955092506129de8386613edd565b84886060018181516129819190615805565b6003816007811115612a0457612a04615ac5565b1415612a61578c8281518110612a1c57612a1c615744565b6020026020010151806020019051810190612a379190615adb565b95509250612a478386888a613f3b565b809850819750505084886040018181516129819190615805565b6004816007811115612a7557612a75615ac5565b1415612ad1578c8281518110612a8d57612a8d615744565b6020026020010151806020019051810190612aa89190615adb565b94509250612ab7838589613a96565b809850819550505083886020018181516129819190615805565b6005816007811115612ae557612ae5615ac5565b1415612b42578c8281518110612afd57612afd615744565b6020026020010151806020019051810190612b189190615adb565b94509250612b288385888a614031565b8a5190995090975090945084908990612981908390615805565b6006816007811115612b5657612b56615ac5565b1415612baf576000808e8481518110612b7157612b71615744565b6020026020010151806020019051810190612b8c9190615aff565b985091965092509050612ba3858383898c8e6140e1565b99509750612c98915050565b6007816007811115612bc357612bc3615ac5565b1415612c985760008060008f8581518110612be057612be0615744565b6020026020010151806020019051810190612bfb9190615b3d565b60345460405163d505accf60e01b81526001600160a01b038089166004830152306024830152604482018890526064820187905260ff8616608483015260a4820185905260c48201849052969f50939d50939b509497509550929350169063d505accf9060e401600060405180830381600087803b158015612c7c57600080fd5b505af1158015612c90573d6000803e3d6000fd5b505050505050505b5080612ca38161581d565b91505061286c565b508551602087015110612da25785516020870151600091612ccb916157ee565b90508660600151876040015110612d0257612cfd87606001518860400151612cf391906157ee565b828d8d8d8d613bec565b612d9c565b8015612d6f57603554604051630d43af8160e21b81526001600160a01b039091169063350ebe0490612d3c9084908f903390600401615b90565b600060405180830381600087803b158015612d5657600080fd5b505af1158015612d6a573d6000803e3d6000fd5b505050505b612d9c333089604001518a60600151612d8891906157ee565b6034546001600160a01b031692919061427b565b50612f00565b60208601518651600091612db5916157ee565b6035546040516340c10f1960e01b81529192506001600160a01b0316906340c10f1990612de8908d908590600401615baf565b600060405180830381600087803b158015612e0257600080fd5b505af1158015612e16573d6000803e3d6000fd5b50505050866060015187604001511115612e5a57612e558a88606001518960400151612e4291906157ee565b6034546001600160a01b031691906142e6565b612efe565b600087604001518860600151612e7091906157ee565b90508015612efc57885115612ee4576040516364acc99f60e11b81526001600160a01b038b169063c959933e90612eb1903390869086908f90600401615bc8565b600060405180830381600087803b158015612ecb57600080fd5b505af1158015612edf573d6000803e3d6000fd5b505050505b603454612efc906001600160a01b031633308461427b565b505b505b505060018055509198975050505050505050565b603a8181548110610ed257600080fd5b6001600160a01b039182166000908152604b6020908152604080832093909416825291909152205460ff1690565b6033546001600160a01b03163314612f7c5760405162461bcd60e51b8152600401610c0590615bff565b603380546001600160a01b0319166001600160a01b0383811691909117909155603654604051630787a21360e51b815291169063f0f4426090612fc3908490600401614ce3565b600060405180830381600087803b158015612fdd57600080fd5b505af1158015610ce5573d6000803e3d6000fd5b603354604051631c86b03760e31b81526001600160a01b039091169063e43581b890613021903390600401614ce3565b602060405180830381865afa15801561303e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613062919061569d565b61307e5760405162461bcd60e51b8152600401610c05906156ba565b6045805460ff81161560ff1990911681179091556040518181527f9c4ac7d44b0a53ec3cc5ee648f44fa9e0a29b95945172b5f74b52462b9c1d85b90602001611e9b565b6130ca614bb9565b60408051600080825260208201909252611d289187918791879187919061171e565b60335460009081906001600160a01b0316331461311b5760405162461bcd60e51b8152600401610c0590615bff565b6131236139fc565b50506041546042548082106131af5761313c81836157ee565b6035546033546040516340c10f1960e01b8152929450600093506001600160a01b03918216926340c10f19926131789216908690600401615baf565b600060405180830381600087803b15801561319257600080fd5b505af11580156131a6573d6000803e3d6000fd5b505050506131c0565b6131b982826157ee565b9050600091505b6000604181905560425560408051838152602081018390527ffeb12225c131aab793a00c5239afb778932d170fa28ce6e9d23703e4bd892121910160405180910390a19091565b3b151590565b6000908152604860205260409020546001600160a01b0316151590565b6000908152604a60205260409020546001600160a01b031690565b6000818152604860205260409020546001600160a01b031680611eda5760405162461bcd60e51b8152600401610c05906155ed565b6000818152604a6020526040902080546001600160a01b0319166001600160a01b03841690811790915581906132af82613245565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806132f483613245565b9050806001600160a01b0316846001600160a01b0316148061332f5750836001600160a01b03166133248461322a565b6001600160a01b0316145b80611d2b57506001600160a01b038082166000908152604b602090815260408083209388168352929052205460ff16949350505050565b826001600160a01b031661337982613245565b6001600160a01b0316146133b45760405162461bcd60e51b8152602060048201526002602482015261033360f41b6044820152606401610c05565b6001600160a01b0382166133ef5760405162461bcd60e51b8152602060048201526002602482015261333160f01b6044820152606401610c05565b60455460ff16158061341957506001600160a01b03821660009081526044602052604090205460ff165b6134355760405162461bcd60e51b8152600401610c0590615c1b565b61344060008261327a565b6001600160a01b038084166000818152604960209081526040808320805460001901905593861680835284832080546001019055858352604890915283822080546001600160a01b03191682179055925184939291600080516020615d5183398151915291a4505050565b600080603e54426134bc91906157ee565b603c54909150600160c01b90046001600160401b03168115806134dd575080155b156134ec57603f549250505090565b60006134f96001846157ee565b905060006002841161350c576000613517565b6135176002856157ee565b90506000676765c793fa10079d601b1b676765c793fa10079d601a1b61353d8680615654565b6135479190615805565b6135519190615689565b90506000676765c793fa10079d601b1b676765c793fa10079d601a1b6135778785615654565b6135819190615805565b61358b9190615689565b9050600060028361359c878a615654565b6135a69190615654565b6135b09190615689565b90506000600683866135c2898c615654565b6135cc9190615654565b6135d69190615654565b6135e09190615689565b9050676765c793fa10079d601b1b81836135fa8b8b615654565b61360f90676765c793fa10079d601b1b615805565b6136199190615805565b6136239190615805565b603f546136309190615654565b61363a9190615689565b9850505050505050505090565b61364f614bb9565b600080600061365f888787614305565b5050925092509250633b9aca00831061369f5760405162461bcd60e51b81526020600482015260026024820152610d0d60f21b6044820152606401610c05565b6000633b9aca006136b085826157ee565b6136b98a614429565b6136c39190615654565b6136cd9190615689565b603d54909150600160401b90046001600160401b03168110156136fd576136f881633b9aca006157ee565b61371e565b603d5461371e90600160401b90046001600160401b0316633b9aca006157ee565b603d549091506001600160401b031660008061373f6002633b9aca00615a0d565b603c5461375591906001600160401b0316615654565b83613760868a615654565b61376a9190615654565b1061390e57603c546001600160401b031661378a6002633b9aca00615a0d565b6137949190615654565b603c5485906137b390600160401b90046001600160401b031686615654565b6137bd9190615654565b6137c791906157ee565b603c548590633b9aca00906137e5906001600160401b031689615654565b603c54613803908b90600160401b90046001600160401b0316615654565b61380d91906157ee565b6138179190615654565b6138219190615654565b61382b9190615689565b91507f0000000000000000000000000000000000000000000000000000000000000000633b9aca0061385d8585615654565b6138679190615689565b6138719190615805565b86116139095761388c676765c793fa10079d601b1b84615654565b633b9aca008a8e602001516138a19190615654565b6138ab9190615654565b6138b59190615689565b6138c0906001615805565b915082633b9aca006138f27f0000000000000000000000000000000000000000000000000000000000000000896157ee565b6138fc9190615654565b6139069190615689565b90505b6139aa565b60385461391f90633b9aca00615654565b8c518b9061392e908790615654565b6139389190615654565b6139429190615689565b61394d906001615805565b91507f00000000000000000000000000000000000000000000000000000000000000008511156139a757633b9aca00846138f27f0000000000000000000000000000000000000000000000000000000000000000886157ee565b50805b8188526139b7848b615654565b6038546139c8633b9aca0085615654565b6139d29190615654565b6139dc9190615689565b602089015260408801525050606085015250608083015250949350505050565b6000613a066134ab565b90506000676765c793fa10079d601b1b603f5483613a2491906157ee565b604054613a319190615654565b613a3b9190615689565b90508060416000828254613a4f9190615805565b9091555050603f82905542603e8190556040805184815260208101929092527f257ac715ccda9b5cfb21d54ca066524502c8103b5ebb5dcb23b03dad0f02be6591016113b7565b6000808480613aa457506047545b83613ab457613ab16134ab565b93505b60008681526043602052604081206001015490676765c793fa10079d601b1b613add8784615654565b613ae79190615689565b9050808710613af857955080613b1b565b85613b0e676765c793fa10079d601b1b89615654565b613b189190615689565b90505b613b2581836157ee565b91508060406000828254613b3991906157ee565b9091555050811580613b875750613b7b676765c793fa10079d601b1b7f0000000000000000000000000000000000000000000000000000000000000000615654565b613b858784615654565b115b613ba35760405162461bcd60e51b8152600401610c0590615c37565b60008881526043602052604080822060010184905551600080516020615d1183398151915291613bd6918b918591615c53565b60405180910390a1509496939550929350505050565b8515613c0957603454613c09906001600160a01b031684886142e6565b8415611f1357805115613c7b57604051635d794dc560e11b81526001600160a01b0383169063baf29b8a90613c4890879089908b908790600401615bc8565b600060405180830381600087803b158015613c6257600080fd5b505af1158015613c76573d6000803e3d6000fd5b505050505b603554604051630d43af8160e21b81526001600160a01b039091169063350ebe0490613caf90889088903390600401615b90565b600060405180830381600087803b158015613cc957600080fd5b505af1158015613cdd573d6000803e3d6000fd5b50505050505050505050565b60455460009060ff161580613d3057506001600160a01b03821660009081526044602052604090205460ff168015613d3057503360009081526044602052604090205460ff165b613d4c5760405162461bcd60e51b8152600401610c0590615c1b565b5060478054600190810182556001600160a01b038316600081815260496020908152604080832080549095019094559354808252604890945282812080546001600160a01b031916831790559151839290600080516020615d51833981519152908290a4613dcc6000838360405180602001604052806000815250614658565b611eda5760405162461bcd60e51b8152600401610c0590615c6c565b613df3848484613366565b613dff84848484614658565b613e1b5760405162461bcd60e51b8152600401610c0590615c6c565b50505050565b60008080808680613e3157506047545b3388613e3d82826132e8565b613e595760405162461bcd60e51b8152600401610c0590615609565b60008a8152604360209081526040808320815180830190925280548252600101549181019190915290808080613e90858f8f614305565b945094505093509350633b9aca008411613ebc5760405162461bcd60e51b8152600401610c0590615c88565b613ec58f614753565b9351919e919d509b5091995090975050505050505050565b8180613ee857506047545b60008381526043602052604081208054849290613f06908490615805565b9091555050604051600080516020615d3183398151915290613f2e9085908590600190615c53565b60405180910390a1505050565b6000808580613f4957506047545b3387613f5582826132e8565b613f715760405162461bcd60e51b8152600401610c0590615609565b600089815260436020526040812080548a9290613f8f9084906157ee565b90915550506000898152604360209081526040808320815180830190925280548252600101549181019190915281908190613fcb908b8b614305565b9450945050509250633b9aca008311613ff65760405162461bcd60e51b8152600401610c0590615c88565b600080516020615d318339815191528c8c600060405161401893929190615c53565b60405180910390a1909b909a5098505050505050505050565b60008080868061404057506047545b338861404c82826132e8565b6140685760405162461bcd60e51b8152600401610c0590615609565b6140748a8a8a8a6147d2565b603c54929b509096509450600090633b9aca00906140a3908c90600160801b90046001600160401b0316615654565b6140ad9190615689565b905080604160008282546140c19190615805565b909155506140d19050818b6157ee565b9650505050509450945094915050565b60008087806140ef57506047545b33896140fb82826132e8565b6141175760405162461bcd60e51b8152600401610c0590615609565b6141238b8989896147d2565b919950975095506001600160a01b038a1630141561414d57614146898988613a96565b505061426a565b6033546040516333b52a9f60e11b81526001600160a01b039091169063676a553e9061417d908d90600401614ce3565b602060405180830381865afa15801561419a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141be919061569d565b6141ef5760405162461bcd60e51b8152602060048201526002602482015261191960f11b6044820152606401610c05565b603c5460405163d645c39360e01b8152600481018b9052602481018a9052600160801b9091046001600160401b031660448201526001600160a01b038b169063d645c39390606401600060405180830381600087803b15801561425157600080fd5b505af1158015614265573d6000803e3d6000fd5b505050505b509499939850929650505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052613e1b9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526149dc565b610cad8363a9059cbb60e01b84846040516024016142af929190615baf565b6000808080808661438a57603660009054906101000a90046001600160a01b03166001600160a01b03166357de26a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015614363573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143879190615625565b96505b8561439a576143976134ab565b95505b6000676765c793fa10079d601b1b878a602001516143b89190615654565b6143c29190615689565b90506000603854898b600001516143d99190615654565b6143e39190615689565b90506000826143f5575060001961441a565b603c54839061440d906001600160401b031684615654565b6144179190615689565b90505b9a919950979695509350505050565b6037546000906001600160a01b031661446257603b60008154811061445057614450615744565b90600052602060002001549050919050565b603754604051635dfba04560e11b81526000916001600160a01b03169063bbf7408a90614493908690600401614ce3565b602060405180830381865afa1580156144b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144d49190615625565b9050603a6001815481106144ea576144ea615744565b9060005260206000200154811061452257603b60018154811061450f5761450f615744565b9060005260206000200154915050919050565b603a60008154811061453657614536615744565b9060005260206000200154811161455b57603b60008154811061450f5761450f615744565b603a60008154811061456f5761456f615744565b9060005260206000200154603a60018154811061458e5761458e615744565b90600052602060002001546145a391906157ee565b603a6000815481106145b7576145b7615744565b9060005260206000200154826145cd91906157ee565b603b6000815481106145e1576145e1615744565b9060005260206000200154603b60018154811061460057614600615744565b906000526020600020015461461591906157ee565b61461f9190615654565b6146299190615689565b603b60008154811061463d5761463d615744565b9060005260206000200154610d979190615805565b50919050565b60006001600160a01b0384163b1561474b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061469c903390899088908890600401615ca4565b6020604051808303816000875af19250505080156146d7575060408051601f3d908101601f191682019092526146d491810190615cd7565b60015b614731573d808015614705576040519150601f19603f3d011682016040523d82523d6000602084013e61470a565b606091505b5080516147295760405162461bcd60e51b8152600401610c0590615c37565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611d2b565b506001611d2b565b600061475e82613245565b905061476b60008361327a565b6001600160a01b038116600081815260496020908152604080832080546000190190558583526048825280832080546001600160a01b0319169055604390915280822082815560010182905551849290600080516020615d51833981519152908390a45050565b6000808086806147e157506047545b846147f1576147ee6134ab565b94505b600085614809676765c793fa10079d601b1b8a615654565b6148139190615689565b60008a81526043602052604090206001015490915061488857614861676765c793fa10079d601b1b7f0000000000000000000000000000000000000000000000000000000000000000615654565b61486b8783615654565b116148885760405162461bcd60e51b8152600401610c0590615c37565b600089815260436020526040812060010180548392906148a9908490615805565b9250508190555080604060008282546148c29190615805565b90915550506039546148e090676765c793fa10079d601b1b90615654565b866040546148ee9190615654565b11156149215760405162461bcd60e51b8152602060048201526002602482015261343560f01b6044820152606401610c05565b600089815260436020908152604080832081518083019092528054825260010154918101919091528190614956908a8a614305565b50935050509150633b9aca0082116149805760405162461bcd60e51b8152600401610c0590615c88565b600080516020615d118339815191528b8460016040516149a293929190615c53565b60405180910390a1876149c0676765c793fa10079d601b1b85615654565b6149ca9190615689565b9b909a50969850959650505050505050565b6000614a31826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614aae9092919063ffffffff16565b805190915015610cad5780806020019051810190614a4f919061569d565b610cad5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610c05565b6060611d2b848460008585843b614b075760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c05565b600080866001600160a01b03168587604051614b239190615cf4565b60006040518083038185875af1925050503d8060008114614b60576040519150601f19603f3d011682016040523d82523d6000602084013e614b65565b606091505b5091509150614b75828286614b80565b979650505050505050565b60608315614b8f575081610d97565b825115614b9f5782518084602001fd5b8160405162461bcd60e51b8152600401610c059190614d85565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b828054614bf4906155b8565b90600052602060002090601f016020900481019282614c165760008555614c5c565b82601f10614c2f57805160ff1916838001178555614c5c565b82800160010185558215614c5c579182015b82811115614c5c578251825591602001919060010190614c41565b50614c68929150614cce565b5090565b828054828255906000526020600020908101928215614c5c5791602002820182811115614c5c578251825591602001919060010190614c41565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b5b80821115614c685760008155600101614ccf565b6001600160a01b0391909116815260200190565b6001600160e01b031981168114614d0d57600080fd5b50565b600060208284031215614d2257600080fd5b8135610d9781614cf7565b60005b83811015614d48578181015183820152602001614d30565b83811115613e1b5750506000910152565b60008151808452614d71816020860160208601614d2d565b601f01601f19169290920160200192915050565b602081526000610d976020830184614d59565b600060208284031215614daa57600080fd5b5035919050565b6001600160a01b0381168114614d0d57600080fd5b60008060408385031215614dd957600080fd5b8235614de481614db1565b946020939093013593505050565b600080600060608486031215614e0757600080fd5b8335614e1281614db1565b92506020840135614e2281614db1565b929592945050506040919091013590565b60008060408385031215614e4657600080fd5b823591506020830135614e5881614db1565b809150509250929050565b60a08101610b4a828480518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b600060208284031215614eae57600080fd5b8135610d9781614db1565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614ef757614ef7614eb9565b604052919050565b600082601f830112614f1057600080fd5b81356001600160401b03811115614f2957614f29614eb9565b614f3c601f8201601f1916602001614ecf565b818152846020838601011115614f5157600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215614f8057600080fd5b81356001600160401b03811115614f9657600080fd5b611d2b84828501614eff565b80356001600160401b0381168114611eda57600080fd5b60008060408385031215614fcc57600080fd5b614de483614fa2565b60006001600160401b03821115614fee57614fee614eb9565b5060051b60200190565b600082601f83011261500957600080fd5b8135602061501e61501983614fd5565b614ecf565b82815260059290921b8401810191818101908684111561503d57600080fd5b8286015b848110156150585780358352918301918301615041565b509695505050505050565b60008060006060848603121561507857600080fd5b833561508381614db1565b925060208401356001600160401b038082111561509f57600080fd5b6150ab87838801614ff8565b935060408601359150808211156150c157600080fd5b506150ce86828701614ff8565b9150509250925092565b60008060008060008060c087890312156150f157600080fd5b86356001600160401b038082111561510857600080fd5b6151148a838b01614ff8565b9750602089013591508082111561512a57600080fd5b6151368a838b01614ff8565b96506040890135915061514882614db1565b90945060608801359061515a82614db1565b90935060808801359061516c82614db1565b90925060a0880135908082111561518257600080fd5b5061518f89828a01614eff565b9150509295509295509295565b600081518084526020808501945080840160005b838110156151cc578151875295820195908201906001016151b0565b509495945050505050565b6040815260006151ea604083018561519c565b90508260208301529392505050565b600082601f83011261520a57600080fd5b8135602061521a61501983614fd5565b82815260059290921b8401810191818101908684111561523957600080fd5b8286015b84811015615058578035600881106152555760008081fd5b835291830191830161523d565b600082601f83011261527357600080fd5b8135602061528361501983614fd5565b82815260059290921b840181019181810190868411156152a257600080fd5b8286015b848110156150585780356001600160401b038111156152c55760008081fd5b6152d38986838b0101614eff565b8452509183019183016152a6565b600080600080608085870312156152f757600080fd5b84356001600160401b038082111561530e57600080fd5b61531a888389016151f9565b9550602087013591508082111561533057600080fd5b5061533d87828801615262565b935050604085013561534e81614db1565b9150606085013561535e81614db1565b939692955090935050565b8015158114614d0d57600080fd5b6000806040838503121561538a57600080fd5b823561539581614db1565b91506020830135614e5881615369565b600080600080608085870312156153bb57600080fd5b84356153c681614db1565b935060208501356153d681614db1565b92506040850135915060608501356001600160401b038111156153f857600080fd5b61540487828801614eff565b91505092959194509250565b60008060006060848603121561542557600080fd5b505081359360208301359350604090920135919050565b60008060008060008587036101a081121561545657600080fd5b863561546181614db1565b9550602087013561547181614db1565b9450604087013561548181614db1565b9350610120605f198201121561549657600080fd5b506060860191506101808601356001600160401b038111156154b757600080fd5b6154c388828901614eff565b9150509295509295909350565b60008060008060008060c087890312156154e957600080fd5b86356001600160401b038082111561550057600080fd5b61550c8a838b016151f9565b9750602089013591508082111561552257600080fd5b6151368a838b01615262565b6000806040838503121561554157600080fd5b823561554c81614db1565b91506020830135614e5881614db1565b6000806000806080858703121561557257600080fd5b84356001600160401b038082111561558957600080fd5b61559588838901614ff8565b955060208701359150808211156155ab57600080fd5b5061533d87828801614ff8565b600181811c908216806155cc57607f821691505b6020821081141561465257634e487b7160e01b600052602260045260246000fd5b602080825260029082015261191b60f11b604082015260600190565b602080825260029082015261189b60f11b604082015260600190565b60006020828403121561563757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561566e5761566e61563e565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261569857615698615673565b500490565b6000602082840312156156af57600080fd5b8151610d9781615369565b6020808252600190820152603160f81b604082015260600190565b6020808252600190820152601960f91b604082015260600190565b6020808252600190820152603960f81b604082015260600190565b60006020828403121561571d57600080fd5b8151610d9781614db1565b602080825260029082015261333360f01b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b602080825260029082015261313560f01b604082015260600190565b604081526000615789604083018561519c565b8281036020840152612114818561519c565b6020808252600290820152611a1960f11b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000828210156158005761580061563e565b500390565b600082198211156158185761581861563e565b500190565b60006000198214156158315761583161563e565b5060010190565b60008261584757615847615673565b500690565b6000815161585e818560208601614d2d565b9290920192915050565b600080845481600182811c91508083168061588457607f831692505b60208084108214156158a457634e487b7160e01b86526022600452602486fd5b8180156158b857600181146158c9576158f6565b60ff198616895284890196506158f6565b60008b81526020902060005b868110156158ee5781548b8201529085019083016158d5565b505084890196505b505050505050612114818561584c565b60006020828403121561591857600080fd5b815160ff81168114610d9757600080fd5b600181815b8085111561596457816000190482111561594a5761594a61563e565b8085161561595757918102915b93841c939080029061592e565b509250929050565b60008261597b57506001610b4a565b8161598857506000610b4a565b816001811461599e57600281146159a8576159c4565b6001915050610b4a565b60ff8411156159b9576159b961563e565b50506001821b610b4a565b5060208310610133831016604e8410600b84101617156159e7575081810a610b4a565b6159f18383615929565b8060001904821115615a0557615a0561563e565b029392505050565b6000610d9760ff84168361596c565b6e020b733b63290283937ba37b1b7b61608d1b815260008251615a4681600f850160208701614d2d565b650815985d5b1d60d21b600f939091019283015250601501919050565b60008251615a75818460208701614d2d565b650b5d985d5b1d60d21b920191825250600601919050565b600060208284031215615a9f57600080fd5b610d9782614fa2565b600060208284031215615aba57600080fd5b8135610d9781615369565b634e487b7160e01b600052602160045260246000fd5b60008060408385031215615aee57600080fd5b505080516020909101519092909150565b60008060008060808587031215615b1557600080fd5b845193506020850151615b2781614db1565b6040860151606090960151949790965092505050565b60008060008060008060c08789031215615b5657600080fd5b8651615b6181614db1565b6020880151604089015160608a015160808b015160a0909b0151939c929b509099909850965090945092505050565b9283526001600160a01b03918216602084015216604082015260600190565b6001600160a01b03929092168252602082015260400190565b60018060a01b0385168152836020820152826040820152608060608201526000615bf56080830184614d59565b9695505050505050565b6020808252600290820152610c4d60f21b604082015260600190565b602080825260029082015261032360f41b604082015260600190565b6020808252600290820152610c8d60f21b604082015260600190565b928352602083019190915260ff16604082015260600190565b602080825260029082015261323960f01b604082015260600190565b602080825260029082015261323160f01b604082015260600190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615bf590830184614d59565b600060208284031215615ce957600080fd5b8151610d9781614cf7565b60008251615d06818460208701614d2d565b919091019291505056fe70cf49afe7355562d5b022e594790f22b71ad8cc7eec902fa5feac7c67f71091722cb71fa87c947148cefc06dd890af5802a6a00207c5ddecf1191bf71ce3cd4ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220f8e1b0ac504f3c21121d073c1378956d113dc5fab8875cc18a13ade9f6e06c5864736f6c634300080c0033",
  "devdoc": {
    "author": "Angle Core Team",
    "details": "This implementation only supports non-rebasing ERC20 tokens as collateralThis contract is encoded as a NFT contract",
    "kind": "dev",
    "methods": {
      "accrueInterestToTreasury()": {
        "details": "`surplus` and `badDebt` should be reset to 0 once their current value have been given to the `treasury` contract",
        "returns": {
          "badDebtValue": "Value of the bad debt communicated to the `Treasury`",
          "surplusValue": "Value of the surplus communicated to the `Treasury`"
        }
      },
      "angle(uint8[],bytes[],address,address)": {
        "details": "This function is optimized to reduce gas cost due to payment from or to the user and that expensive calls or computations (like `oracleValue`) are done only once",
        "params": {
          "actions": "Set of actions to perform",
          "datas": "Data to be decoded for each action: it can include like the `vaultID` or the",
          "from": "Address from which stablecoins will be taken if one action includes burning stablecoins. This address should either be the `msg.sender` or be approved by the latter",
          "to": "Address to which stablecoins and/or collateral will be sent in case of"
        },
        "returns": {
          "_0": "Struct containing the final transfers executed"
        }
      },
      "angle(uint8[],bytes[],address,address,address,bytes)": {
        "details": "This function is optimized to reduce gas cost due to payment from or to the user and that expensive calls or computations (like `oracleValue`) are done only once",
        "params": {
          "actions": "Set of actions to perform",
          "datas": "Data to be decoded for each action: it can include like the `vaultID` or the",
          "from": "Address from which stablecoins will be taken if one action includes burning stablecoins. This address should either be the `msg.sender` or be approved by the latter",
          "repayData": "Data to pass to the repayment contract in case of",
          "to": "Address to which stablecoins and/or collateral will be sent in case of",
          "who": "Address of the contract to handle in case of repayment of stablecoins from received collateral"
        },
        "returns": {
          "paymentData": "Struct containing the final transfers executed"
        }
      },
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in ``owner``'s account."
      },
      "checkLiquidation(uint256,address)": {
        "details": "This function will revert if it's called on a vault that does not exist",
        "params": {
          "liquidator": "Address of the liquidator which will be performing the liquidation",
          "vaultID": "ID of the vault to check"
        },
        "returns": {
          "liqOpp": "Description of the opportunity of liquidation"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createVault(address)": {
        "details": "This function just creates the vault without doing any collateral or",
        "params": {
          "toVault": "Address for which the va"
        },
        "returns": {
          "_0": "vaultID ID of the vault created"
        }
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "getControlledVaults(address)": {
        "details": "This function is never to be called on-chain since it iterates over all addresses and is here to reduce dependency on an external graph to link an ID to its owner",
        "params": {
          "spender": "Address for which vault ownerships should be checked"
        },
        "returns": {
          "_0": "List of `vaultID` controlled by this address"
        }
      },
      "getDebtOut(uint256,uint256,uint256)": {
        "params": {
          "amountStablecoins": "Amount of stablecoins to remove from the debt: this amount is to be converted to an internal debt amount",
          "senderBorrowFee": "Borrowing fees from the contract which requested this: this is to make sure that people are not arbitraging difference in minting fees",
          "vaultID": "ID of the vault to remove debt from"
        }
      },
      "getTotalDebt()": {
        "returns": {
          "_0": "Total debt across all vaults, taking into account the interest accumulated over time"
        }
      },
      "getVaultDebt(uint256)": {
        "params": {
          "vaultID": "ID of the vault to check"
        },
        "returns": {
          "_0": "Debt of the vault"
        }
      },
      "initialize(address,address,address,(uint256,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint256),string)": {
        "details": "The parameters and the oracle are the only elements which could be modified once the contract has been initializedFor the contract to be fully initialized, governance needs to set the parameters for the liquidation boost",
        "params": {
          "_collateral": "Collateral supported by this contract",
          "_oracle": "Oracle contract used",
          "_symbol": "Symbol used to define the `VaultManager` name and symbol",
          "_treasury": "Treasury address handling the contract"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
      },
      "isApprovedOrOwner(address,uint256)": {
        "params": {
          "spender": "Address for which vault ownership should be checked",
          "vaultID": "ID of the vault to check"
        },
        "returns": {
          "_0": "Whether the `spender` address owns or is approved for `vaultID`"
        }
      },
      "liquidate(uint256[],uint256[],address,address)": {
        "details": "This function will not revert if it's called on a vault that cannot be liquidated",
        "params": {
          "amounts": "Amount of stablecoin to bring for the liquidation of each vault",
          "from": "Address from which the stablecoins for the liquidation should be taken: this address should be the `msg.sender` or have received an approval",
          "to": "Address to which discounted collateral should be sent",
          "vaultIDs": "List of the vaults to liquidate"
        }
      },
      "liquidate(uint256[],uint256[],address,address,address,bytes)": {
        "details": "This function will revert if it's called on a vault that cannot be liquidated or that does not exist",
        "params": {
          "amounts": "Amount of stablecoin to bring for the liquidation of each vault",
          "data": "Data to pass to the repayment contract in case of",
          "from": "Address from which the stablecoins for the liquidation should be taken: this address should be the `msg.sender` or have received an approval",
          "to": "Address to which discounted collateral should be sent",
          "vaultIDs": "List of the vaults to liquidate",
          "who": "Address of the contract to handle repayment of stablecoins from received collateral"
        }
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "setDebtCeiling(uint256)": {
        "params": {
          "_debtCeiling": "New value for `debtCeiling`"
        }
      },
      "setLiquidationBoostParameters(address,uint256[],uint256[])": {
        "details": "There are 2 modes: When boost is enabled, `xBoost` and `yBoost` should have a length of 2, but if they have a higher length contract will still work as expected. Contract will also work as expected if their length differ When boost is disabled, `_veBoostProxy` needs to be zero address and `yBoost[0]` is the base boost",
        "params": {
          "_veBoostProxy": "Address which queries veANGLE balances and adjusted balances from delegation",
          "xBoost": "Threshold values of veANGLE adjusted balances",
          "yBoost": "Values of the liquidation boost at the threshold values of x"
        }
      },
      "setOracle(address)": {
        "params": {
          "_oracle": "Reference to the oracle contract"
        }
      },
      "setTreasury(address)": {
        "details": "All required checks when setting up a treasury contract are performed in the contract calling this function",
        "params": {
          "_treasury": "New treasury contract"
        }
      },
      "setUint64(uint64,bytes32)": {
        "details": "This function performs the required checks when updating a parameterWhen setting parameters governance should make sure that when `HF < CF/((1-surcharge)(1-discount))` and hence when liquidating a vault is going to decrease its health factor, `discount = max discount`. Otherwise, it may be profitable for the liquidator to liquidate in multiple times: as it will decrease the HF and therefore increase the discount between each time",
        "params": {
          "param": "Value for the parameter",
          "what": "Parameter to change"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "toggleWhitelist(address)": {
        "params": {
          "target": "Address to toggle"
        }
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      }
    },
    "title": "VaultManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BASE_INTEREST()": {
        "notice": "Base used for interest rate computation"
      },
      "BASE_PARAMS()": {
        "notice": "Base used for parameter computation"
      },
      "HALF_BASE_INTEREST()": {
        "notice": "Used for interest rate computation"
      },
      "accrueInterestToTreasury()": {
        "notice": "Accrues interest accumulated across all vaults to the surplus and sends the surplus to the treasury"
      },
      "angle(uint8[],bytes[],address,address)": {
        "notice": "Allows composability between calls to the different entry points of this module. Any user calling this function can perform any of the allowed actions in the order of their choice"
      },
      "angle(uint8[],bytes[],address,address,address,bytes)": {
        "notice": "Allows composability between calls to the different entry points of this module. Any user calling this function can perform any of the allowed actions in the order of their choice"
      },
      "badDebt()": {
        "notice": "Bad debt made from liquidated vaults which ended up having no collateral and a positive amount of stablecoins"
      },
      "borrowFee()": {
        "notice": "Upfront fee taken when borrowing stablecoins"
      },
      "checkLiquidation(uint256,address)": {
        "notice": "Checks whether a given vault is liquidable and if yes gives information regarding its liquidation"
      },
      "collateral()": {
        "notice": "Reference to the collateral handled by this `VaultManager`"
      },
      "collateralFactor()": {
        "notice": "Encodes the maximum ratio stablecoin/collateral a vault can have before being liquidated. It's what determines the minimum collateral ratio of a position"
      },
      "createVault(address)": {
        "notice": "Creates a vault"
      },
      "debtCeiling()": {
        "notice": "Maximum amount of stablecoins that can be issued with this contract"
      },
      "dust()": {
        "notice": "Minimum amount of debt a vault can have"
      },
      "getControlledVaults(address)": {
        "notice": "Returns all the vaults owned or controlled (under the form of approval) by an address"
      },
      "getDebtOut(uint256,uint256,uint256)": {
        "notice": "Removes debt from a vault after being requested to do so by another `vaultManager` contract"
      },
      "getTotalDebt()": {
        "notice": "Gets the total debt across all vaults"
      },
      "getVaultDebt(uint256)": {
        "notice": "Gets the current debt of a vault"
      },
      "initialize(address,address,address,(uint256,uint64,uint64,uint64,uint64,uint64,uint64,bool,uint256),string)": {
        "notice": "Initializes the `VaultManager` contract"
      },
      "interestAccumulator()": {
        "notice": "The `interestAccumulator` variable keeps track of the interest that should accrue to the protocol. The stored value is not necessarily the true value: this one is recomputed every time an action takes place within the protocol"
      },
      "interestRate()": {
        "notice": "Per second interest taken to borrowers taking agToken loans"
      },
      "isApprovedOrOwner(address,uint256)": {
        "notice": "Checks whether a given address is approved for a vault or owns this vault"
      },
      "isWhitelisted(address)": {
        "notice": "Maps an address to whether it's whitelisted and can open or own a vault"
      },
      "lastInterestAccumulatorUpdated()": {
        "notice": "Timestamp at which the `interestAccumulator` was updated"
      },
      "liquidate(uint256[],uint256[],address,address)": {
        "notice": "Liquidates an ensemble of vaults specified by their IDs"
      },
      "liquidate(uint256[],uint256[],address,address,address,bytes)": {
        "notice": "Liquidates an ensemble of vaults specified by their IDs"
      },
      "liquidationSurcharge()": {
        "notice": "Fee taken by the protocol during a liquidation. Technically, this value is not the fee per se, it's 1 - fee. For instance for a 2% fee, `liquidationSurcharge` should be 98%"
      },
      "maxLiquidationDiscount()": {
        "notice": "Maximum discount given to liquidators"
      },
      "oracle()": {
        "notice": "Oracle contract to get access to the price of the collateral with respect to the stablecoin"
      },
      "paused()": {
        "notice": "Whether the vault paused or not"
      },
      "setBaseURI(string)": {
        "notice": "Changes the ERC721 metadata URI"
      },
      "setDebtCeiling(uint256)": {
        "notice": "Sets `debtCeiling`"
      },
      "setLiquidationBoostParameters(address,uint256[],uint256[])": {
        "notice": "Sets the parameters for the liquidation booster which encodes the slope of the discount"
      },
      "setOracle(address)": {
        "notice": "Changes the reference to the oracle contract used to get the price of the oracle"
      },
      "setTreasury(address)": {
        "notice": "Sets the treasury contract"
      },
      "setUint64(uint64,bytes32)": {
        "notice": "Sets parameters encoded as uint64"
      },
      "stablecoin()": {
        "notice": "Stablecoin handled by this contract. Another `VaultManager` contract could have the same rights as this `VaultManager` on the stablecoin contract"
      },
      "surplus()": {
        "notice": "Surplus accumulated by the contract: surplus is always in stablecoins, and is then reset when the value is communicated to the treasury contract"
      },
      "targetHealthFactor()": {
        "notice": "Maximum Health factor at which a vault can end up after a liquidation (unless it's fully liquidated)"
      },
      "togglePause()": {
        "notice": "Pauses external permissionless functions of the contract"
      },
      "toggleWhitelist(address)": {
        "notice": "Changes the whitelisting of an address"
      },
      "toggleWhitelisting()": {
        "notice": "Toggles permission for owning vaults by any account"
      },
      "totalNormalizedDebt()": {
        "notice": "Total normalized amount of stablecoins borrowed"
      },
      "treasury()": {
        "notice": "Reference to the `treasury` contract handling this `VaultManager`"
      },
      "vaultData(uint256)": {
        "notice": "Maps a `vaultID` to its data (namely collateral amount and normalized debt)"
      },
      "veBoostProxy()": {
        "notice": "Reference to the contract which computes adjusted veANGLE balances for liquidators boosts"
      },
      "whitelistingActivated()": {
        "notice": "Whether whitelisting is required to own a vault or not"
      },
      "xLiquidationBoost(uint256)": {
        "notice": "Threshold veANGLE balance values for the computation of the boost for liquidators: the length of this array should be 2"
      },
      "yLiquidationBoost(uint256)": {
        "notice": "Values of the liquidation boost at the threshold values of x"
      }
    },
    "notice": "This contract allows people to deposit collateral and open up loans of a given AgToken. It handles all the loan logic (fees and interest rate) as well as the liquidation logic",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 646,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 649,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 727,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 770,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 19095,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "treasury",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(ITreasury)9684"
      },
      {
        "astId": 19099,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "collateral",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IERC20)5169"
      },
      {
        "astId": 19103,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "stablecoin",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IAgToken)8901"
      },
      {
        "astId": 19107,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "oracle",
        "offset": 0,
        "slot": "54",
        "type": "t_contract(IOracle)9590"
      },
      {
        "astId": 19111,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "veBoostProxy",
        "offset": 0,
        "slot": "55",
        "type": "t_contract(IVeBoostProxy)9938"
      },
      {
        "astId": 19114,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "_collatBase",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 19123,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "debtCeiling",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 19127,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "xLiquidationBoost",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 19131,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "yLiquidationBoost",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 19134,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "collateralFactor",
        "offset": 0,
        "slot": "60",
        "type": "t_uint64"
      },
      {
        "astId": 19137,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "targetHealthFactor",
        "offset": 8,
        "slot": "60",
        "type": "t_uint64"
      },
      {
        "astId": 19140,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "borrowFee",
        "offset": 16,
        "slot": "60",
        "type": "t_uint64"
      },
      {
        "astId": 19143,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "interestRate",
        "offset": 24,
        "slot": "60",
        "type": "t_uint64"
      },
      {
        "astId": 19146,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "liquidationSurcharge",
        "offset": 0,
        "slot": "61",
        "type": "t_uint64"
      },
      {
        "astId": 19149,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "maxLiquidationDiscount",
        "offset": 8,
        "slot": "61",
        "type": "t_uint64"
      },
      {
        "astId": 19152,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "lastInterestAccumulatorUpdated",
        "offset": 0,
        "slot": "62",
        "type": "t_uint256"
      },
      {
        "astId": 19155,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "interestAccumulator",
        "offset": 0,
        "slot": "63",
        "type": "t_uint256"
      },
      {
        "astId": 19158,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "totalNormalizedDebt",
        "offset": 0,
        "slot": "64",
        "type": "t_uint256"
      },
      {
        "astId": 19161,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "surplus",
        "offset": 0,
        "slot": "65",
        "type": "t_uint256"
      },
      {
        "astId": 19164,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "badDebt",
        "offset": 0,
        "slot": "66",
        "type": "t_uint256"
      },
      {
        "astId": 19170,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "vaultData",
        "offset": 0,
        "slot": "67",
        "type": "t_mapping(t_uint256,t_struct(Vault)9714_storage)"
      },
      {
        "astId": 19175,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "isWhitelisted",
        "offset": 0,
        "slot": "68",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 19178,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "whitelistingActivated",
        "offset": 0,
        "slot": "69",
        "type": "t_bool"
      },
      {
        "astId": 19181,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "paused",
        "offset": 1,
        "slot": "69",
        "type": "t_bool"
      },
      {
        "astId": 19184,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "_baseURI",
        "offset": 0,
        "slot": "70",
        "type": "t_string_storage"
      },
      {
        "astId": 19187,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "_vaultIDCount",
        "offset": 0,
        "slot": "71",
        "type": "t_uint256"
      },
      {
        "astId": 19191,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "_owners",
        "offset": 0,
        "slot": "72",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 19195,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "_balances",
        "offset": 0,
        "slot": "73",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 19199,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "_vaultApprovals",
        "offset": 0,
        "slot": "74",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 19205,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "75",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 19209,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "__gap",
        "offset": 0,
        "slot": "76",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 18189,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "name",
        "offset": 0,
        "slot": "126",
        "type": "t_string_storage"
      },
      {
        "astId": 18192,
        "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
        "label": "symbol",
        "offset": 0,
        "slot": "127",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAgToken)8901": {
        "encoding": "inplace",
        "label": "contract IAgToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)5169": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IOracle)9590": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)9684": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_contract(IVeBoostProxy)9938": {
        "encoding": "inplace",
        "label": "contract IVeBoostProxy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Vault)9714_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vault)",
        "numberOfBytes": "32",
        "value": "t_struct(Vault)9714_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Vault)9714_storage": {
        "encoding": "inplace",
        "label": "struct Vault",
        "members": [
          {
            "astId": 9711,
            "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
            "label": "collateralAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9713,
            "contract": "contracts/vaultManager/VaultManager.sol:VaultManager",
            "label": "normalizedDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}