{
  "address": "0x347BbcE2CA425060C5020ae811C18bD8101aF448",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_circuitChainlink",
          "type": "address[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_circuitChainIsMultiplied",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256",
          "name": "_outBase",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_stalePeriod",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "IncompatibleLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidChainlinkRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernorOrGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotVaultManagerOrGovernor",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_stalePeriod",
          "type": "uint32"
        }
      ],
      "name": "StalePeriodUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "chainlinkDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_stalePeriod",
          "type": "uint32"
        }
      ],
      "name": "changeStalePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "circuitChainIsMultiplied",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "circuitChainlink",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "outBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "read",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quoteAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stalePeriod",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "contract ITreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe89cf699038daa3892c87c6c5180dc5cb720dfcafd05725fac0f60423254570e",
  "receipt": {
    "to": null,
    "from": "0x8A97FBD532A5C1eD67fd67c11dD76013abAc840e",
    "contractAddress": "0x347BbcE2CA425060C5020ae811C18bD8101aF448",
    "transactionIndex": 24,
    "gasUsed": "1014989",
    "logsBloom": "0x
    "blockHash": "0x3dba2b2e03cab19202528ceb1a936b1f16adfef8805de4078ac48838d2fe4bbd",
    "transactionHash": "0xe89cf699038daa3892c87c6c5180dc5cb720dfcafd05725fac0f60423254570e",
    "logs": [],
    "blockNumber": 10503787,
    "cumulativeGasUsed": "6852518",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xd8bD0a1cB028a31AA859A21A3758685a95dE4623",
      "0x78F9e60608bF48a1155b4B2A5e31F32318a1d85F"
    ],
    [
      1,
      0
    ],
    "1000000000000000000",
    172800,
    "0x37D906BE462AdaE3B4A4370d9B082f1286c12984",
    "LINK/EUR Oracle"
  ],
  "solcInputHash": "0f313fcf3b5985c6510d3bdf5eb3060c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_circuitChainlink\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_circuitChainIsMultiplied\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256\",\"name\":\"_outBase\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_stalePeriod\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IncompatibleLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidChainlinkRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernorOrGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVaultManagerOrGovernor\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_stalePeriod\",\"type\":\"uint32\"}],\"name\":\"StalePeriodUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainlinkDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_stalePeriod\",\"type\":\"uint32\"}],\"name\":\"changeStalePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"circuitChainIsMultiplied\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"circuitChainlink\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"read\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stalePeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Core Team\",\"details\":\"This contract concerns an oracle that uses Chainlink with multiple pools to read fromTypically we expect to use this contract to read like the ETH/USD and then USD/EUR feed\",\"kind\":\"dev\",\"methods\":{\"changeStalePeriod(uint32)\":{\"params\":{\"_stalePeriod\":\"New stale period (in seconds)\"}},\"constructor\":{\"details\":\"For instance, if this oracle is supposed to give the price of ETH in EUR, and if the agEUR stablecoin associated to EUR has 18 decimals, then `outBase` should be 10**18\",\"params\":{\"_circuitChainIsMultiplied\":\"Whether we should multiply or divide by this rate\",\"_circuitChainlink\":\"Chainlink pool addresses (in order)\",\"_description\":\"Description of the assets concerned by the oracle\",\"_outBase\":\"Unit of the stablecoin (or the out asset) associated to the oracle\",\"_stalePeriod\":\"Minimum feed update frequency for the oracle to not revert\",\"_treasury\":\"Treasury associated to the VaultManager which reads from this feed\"}},\"read()\":{\"details\":\"For instance if the out currency is EUR (and hence agEUR), then the base of the returned value is 10**18\",\"returns\":{\"quoteAmount\":\"The current rate between the in-currency and out-currency in the base of the out currency\"}},\"setTreasury(address)\":{\"details\":\"This function can be called by an approved `VaultManager` contract which can call this function after being requested to do so by a `treasury` contractIn some situations (like reactor contracts), the `VaultManager` may not directly be linked to the `oracle` contract and as such we may need governors to be able to call this function as well\",\"params\":{\"_treasury\":\"Address of the new treasury contract\"}}},\"title\":\"OracleChainlinkMulti\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"chainlinkDecimals(uint256)\":{\"notice\":\"Decimals for each Chainlink pairs\"},\"changeStalePeriod(uint32)\":{\"notice\":\"Changes the stale period\"},\"circuitChainIsMultiplied(uint256)\":{\"notice\":\"Whether each rate for the pairs in `circuitChainlink` should be multiplied or divided\"},\"circuitChainlink(uint256)\":{\"notice\":\"Chainlink pools, the order of the pools has to be the order in which they are read for the computation of the price\"},\"constructor\":{\"notice\":\"Constructor for an oracle using Chainlink with multiple pools to read from\"},\"description()\":{\"notice\":\"Description of the assets concerned by the oracle and the price outputted\"},\"outBase()\":{\"notice\":\"Unit of the stablecoin\"},\"read()\":{\"notice\":\"Reads the rate from the Chainlink circuit and other data provided\"},\"setTreasury(address)\":{\"notice\":\"Changes the treasury contract\"},\"stalePeriod()\":{\"notice\":\"Represent the maximum amount of time (in seconds) between each Chainlink update before the price feed is considered stale\"},\"treasury()\":{\"notice\":\"Reference to the `treasury` contract handling this `VaultManager`\"}},\"notice\":\"Oracle contract, one contract is deployed per collateral/stablecoin pair\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/OracleChainlinkMulti.sol\":\"OracleChainlinkMulti\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"contracts/interfaces/IAgToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title IAgToken\\n/// @author Angle Core Team\\n/// @notice Interface for the stablecoins `AgToken` contracts\\n/// @dev This interface only contains functions of the `AgToken` contract which are called by other contracts\\n/// of this module or of the first module of the Angle Protocol\\ninterface IAgToken is IERC20Upgradeable {\\n    // ======================= Minter Role Only Functions ===========================\\n\\n    /// @notice Lets the `StableMaster` contract or another whitelisted contract mint agTokens\\n    /// @param account Address to mint to\\n    /// @param amount Amount to mint\\n    /// @dev The contracts allowed to issue agTokens are the `StableMaster` contract, `VaultManager` contracts\\n    /// associated to this stablecoin as well as the flash loan module (if activated) and potentially contracts\\n    /// whitelisted by governance\\n    function mint(address account, uint256 amount) external;\\n\\n    /// @notice Burns `amount` tokens from a `burner` address after being asked to by `sender`\\n    /// @param amount Amount of tokens to burn\\n    /// @param burner Address to burn from\\n    /// @param sender Address which requested the burn from `burner`\\n    /// @dev This method is to be called by a contract with the minter right after being requested\\n    /// to do so by a `sender` address willing to burn tokens from another `burner` address\\n    /// @dev The method checks the allowance between the `sender` and the `burner`\\n    function burnFrom(\\n        uint256 amount,\\n        address burner,\\n        address sender\\n    ) external;\\n\\n    /// @notice Burns `amount` tokens from a `burner` address\\n    /// @param amount Amount of tokens to burn\\n    /// @param burner Address to burn from\\n    /// @dev This method is to be called by a contract with a minter right on the AgToken after being\\n    /// requested to do so by an address willing to burn tokens from its address\\n    function burnSelf(uint256 amount, address burner) external;\\n\\n    // ========================= Treasury Only Functions ===========================\\n\\n    /// @notice Adds a minter in the contract\\n    /// @param minter Minter address to add\\n    /// @dev Zero address checks are performed directly in the `Treasury` contract\\n    function addMinter(address minter) external;\\n\\n    /// @notice Removes a minter from the contract\\n    /// @param minter Minter address to remove\\n    /// @dev This function can also be called by a minter wishing to revoke itself\\n    function removeMinter(address minter) external;\\n\\n    /// @notice Sets a new treasury contract\\n    /// @param _treasury New treasury address\\n    function setTreasury(address _treasury) external;\\n\\n    // ========================= External functions ================================\\n\\n    /// @notice Checks whether an address has the right to mint agTokens\\n    /// @param minter Address for which the minting right should be checked\\n    /// @return Whether the address has the right to mint agTokens or not\\n    function isMinter(address minter) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcd50d86128e457543483981ea6127cb8dac03584b919614352aa89d7e991405c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICoreBorrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\n/// @title ICoreBorrow\\n/// @author Angle Core Team\\n/// @notice Interface for the `CoreBorrow` contract\\n/// @dev This interface only contains functions of the `CoreBorrow` contract which are called by other contracts\\n/// of this module\\ninterface ICoreBorrow {\\n    /// @notice Checks if an address corresponds to a treasury of a stablecoin with a flash loan\\n    /// module initialized on it\\n    /// @param treasury Address to check\\n    /// @return Whether the address has the `FLASHLOANER_TREASURY_ROLE` or not\\n    function isFlashLoanerTreasury(address treasury) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GOVERNOR_ROLE` or not\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor or a guardian of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GUARDIAN_ROLE` or not\\n    /// @dev Governance should make sure when adding a governor to also give this governor the guardian\\n    /// role by calling the `addGovernor` function\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x25b65b3f506ca91745a444502a36f0556585d82d9d60f4bd32fbcaabc12840d4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFlashAngle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IAgToken.sol\\\";\\nimport \\\"./ICoreBorrow.sol\\\";\\n\\n/// @title IFlashAngle\\n/// @author Angle Core Team\\n/// @notice Interface for the `FlashAngle` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module\\ninterface IFlashAngle {\\n    /// @notice Reference to the `CoreBorrow` contract managing the FlashLoan module\\n    function core() external view returns (ICoreBorrow);\\n\\n    /// @notice Sends the fees taken from flash loans to the treasury contract associated to the stablecoin\\n    /// @param stablecoin Stablecoin from which profits should be sent\\n    /// @return balance Amount of profits sent\\n    /// @dev This function can only be called by the treasury contract\\n    function accrueInterestToTreasury(IAgToken stablecoin) external returns (uint256 balance);\\n\\n    /// @notice Adds support for a stablecoin\\n    /// @param _treasury Treasury associated to the stablecoin to add support for\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function addStablecoinSupport(address _treasury) external;\\n\\n    /// @notice Removes support for a stablecoin\\n    /// @param _treasury Treasury associated to the stablecoin to remove support for\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function removeStablecoinSupport(address _treasury) external;\\n\\n    /// @notice Sets a new core contract\\n    /// @param _core Core contract address to set\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function setCore(address _core) external;\\n}\\n\",\"keccak256\":\"0xc17654e512897efe41e3f1173c07dd4676e8c699a72b859d14b473d1e8300e45\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./ITreasury.sol\\\";\\n\\n/// @title IOracle\\n/// @author Angle Core Team\\n/// @notice Interface for the `Oracle` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module\\ninterface IOracle {\\n    /// @notice Reads the rate from the Chainlink circuit and other data provided\\n    /// @return quoteAmount The current rate between the in-currency and out-currency in the base\\n    /// of the out currency\\n    /// @dev For instance if the out currency is EUR (and hence agEUR), then the base of the returned\\n    /// value is 10**18\\n    function read() external view returns (uint256);\\n\\n    /// @notice Changes the treasury contract\\n    /// @param _treasury Address of the new treasury contract\\n    /// @dev This function can be called by an approved `VaultManager` contract which can call\\n    /// this function after being requested to do so by a `treasury` contract\\n    /// @dev In some situations (like reactor contracts), the `VaultManager` may not directly be linked\\n    /// to the `oracle` contract and as such we may need governors to be able to call this function as well\\n    function setTreasury(address _treasury) external;\\n\\n    /// @notice Reference to the `treasury` contract handling this `VaultManager`\\n    function treasury() external view returns (ITreasury treasury);\\n}\\n\",\"keccak256\":\"0x90fc39ba314b05884005b9deb1d949ca20f7fc5158fa0a7e41f1c798fb0c0a43\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IAgToken.sol\\\";\\nimport \\\"./ICoreBorrow.sol\\\";\\nimport \\\"./IFlashAngle.sol\\\";\\n\\n/// @title ITreasury\\n/// @author Angle Core Team\\n/// @notice Interface for the `Treasury` contract\\n/// @dev This interface only contains functions of the `Treasury` which are called by other contracts\\n/// of this module\\ninterface ITreasury {\\n    /// @notice Stablecoin handled by this `treasury` contract\\n    function stablecoin() external view returns (IAgToken);\\n\\n    /// @notice Checks whether a given address has the  governor role\\n    /// @param admin Address to check\\n    /// @return Whether the address has the governor role\\n    /// @dev Access control is only kept in the `CoreBorrow` contract\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether a given address has the guardian or the governor role\\n    /// @param admin Address to check\\n    /// @return Whether the address has the guardian or the governor role\\n    /// @dev Access control is only kept in the `CoreBorrow` contract which means that this function\\n    /// queries the `CoreBorrow` contract\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether a given address has well been initialized in this contract\\n    /// as a `VaultManager``\\n    /// @param _vaultManager Address to check\\n    /// @return Whether the address has been initialized or not\\n    function isVaultManager(address _vaultManager) external view returns (bool);\\n\\n    /// @notice Sets a new flash loan module for this stablecoin\\n    /// @param _flashLoanModule Reference to the new flash loan module\\n    /// @dev This function removes the minting right to the old flash loan module and grants\\n    /// it to the new module\\n    function setFlashLoanModule(address _flashLoanModule) external;\\n}\\n\",\"keccak256\":\"0xced9b7256fcbedc75682037e11ce51fe9116e5604794b8545e00dea0607629cc\",\"license\":\"GPL-3.0\"},\"contracts/oracle/BaseOracleChainlinkMulti.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\n\\n/// @title BaseOracleChainlinkMulti\\n/// @author Angle Core Team\\n/// @notice Base Contract to be overriden by all contracts of the protocol\\n/// @dev This base contract concerns an oracle that uses Chainlink with multiple pools to read from\\n/// @dev All gas-efficient implementation of the `OracleChainlinkMulti` contract should inherit from this\\nabstract contract BaseOracleChainlinkMulti is IOracle {\\n    // ========================= Parameters and References =========================\\n\\n    /// @inheritdoc IOracle\\n    ITreasury public override treasury;\\n    /// @notice Represent the maximum amount of time (in seconds) between each Chainlink update\\n    /// before the price feed is considered stale\\n    uint32 public stalePeriod;\\n\\n    // =================================== Event ===================================\\n\\n    event StalePeriodUpdated(uint32 _stalePeriod);\\n\\n    // =================================== Errors ===================================\\n\\n    error InvalidChainlinkRate();\\n    error NotGovernorOrGuardian();\\n    error NotVaultManagerOrGovernor();\\n\\n    /// @notice Constructor for an oracle using Chainlink with multiple pools to read from\\n    /// @param _stalePeriod Minimum feed update frequency for the oracle to not revert\\n    /// @param _treasury Treasury associated to the VaultManager which reads from this feed\\n    constructor(uint32 _stalePeriod, address _treasury) {\\n        stalePeriod = _stalePeriod;\\n        treasury = ITreasury(_treasury);\\n    }\\n\\n    // ============================= Reading Oracles ===============================\\n\\n    /// @inheritdoc IOracle\\n    function read() external view virtual override returns (uint256 quoteAmount);\\n\\n    /// @notice Reads a Chainlink feed using a quote amount and converts the quote amount to\\n    /// the out-currency\\n    /// @param quoteAmount The amount for which to compute the price expressed with base decimal\\n    /// @param feed Chainlink feed to query\\n    /// @param multiplied Whether the ratio outputted by Chainlink should be multiplied or divided\\n    /// to the `quoteAmount`\\n    /// @param decimals Number of decimals of the corresponding Chainlink pair\\n    /// @return The `quoteAmount` converted in out-currency\\n    function _readChainlinkFeed(\\n        uint256 quoteAmount,\\n        AggregatorV3Interface feed,\\n        uint8 multiplied,\\n        uint256 decimals\\n    ) internal view returns (uint256) {\\n        (uint80 roundId, int256 ratio, , uint256 updatedAt, uint80 answeredInRound) = feed.latestRoundData();\\n        if (ratio <= 0 || roundId > answeredInRound || block.timestamp - updatedAt > stalePeriod)\\n            revert InvalidChainlinkRate();\\n        uint256 castedRatio = uint256(ratio);\\n        // Checking whether we should multiply or divide by the ratio computed\\n        if (multiplied == 1) return (quoteAmount * castedRatio) / (10**decimals);\\n        else return (quoteAmount * (10**decimals)) / castedRatio;\\n    }\\n\\n    // ======================= Governance Related Functions ========================\\n\\n    /// @notice Changes the stale period\\n    /// @param _stalePeriod New stale period (in seconds)\\n    function changeStalePeriod(uint32 _stalePeriod) external {\\n        if (!treasury.isGovernorOrGuardian(msg.sender)) revert NotGovernorOrGuardian();\\n        stalePeriod = _stalePeriod;\\n        emit StalePeriodUpdated(_stalePeriod);\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function setTreasury(address _treasury) external override {\\n        if (!treasury.isVaultManager(msg.sender) && !treasury.isGovernor(msg.sender))\\n            revert NotVaultManagerOrGovernor();\\n        treasury = ITreasury(_treasury);\\n    }\\n}\\n\",\"keccak256\":\"0xb88f2ccb95f6c1d777cb700380dcc47dcc442feaeb698d951acbb4437d126f63\",\"license\":\"GPL-3.0\"},\"contracts/oracle/OracleChainlinkMulti.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"./BaseOracleChainlinkMulti.sol\\\";\\n\\n/// @title OracleChainlinkMulti\\n/// @author Angle Core Team\\n/// @notice Oracle contract, one contract is deployed per collateral/stablecoin pair\\n/// @dev This contract concerns an oracle that uses Chainlink with multiple pools to read from\\n/// @dev Typically we expect to use this contract to read like the ETH/USD and then USD/EUR feed\\ncontract OracleChainlinkMulti is BaseOracleChainlinkMulti {\\n    // ========================= Parameters and References =========================\\n\\n    /// @notice Chainlink pools, the order of the pools has to be the order in which they are read for the computation\\n    /// of the price\\n    AggregatorV3Interface[] public circuitChainlink;\\n    /// @notice Whether each rate for the pairs in `circuitChainlink` should be multiplied or divided\\n    uint8[] public circuitChainIsMultiplied;\\n    /// @notice Decimals for each Chainlink pairs\\n    uint8[] public chainlinkDecimals;\\n    /// @notice Unit of the stablecoin\\n    uint256 public immutable outBase;\\n    /// @notice Description of the assets concerned by the oracle and the price outputted\\n    string public description;\\n\\n    // ===================================== Error =================================\\n\\n    error IncompatibleLengths();\\n\\n    /// @notice Constructor for an oracle using Chainlink with multiple pools to read from\\n    /// @param _circuitChainlink Chainlink pool addresses (in order)\\n    /// @param _circuitChainIsMultiplied Whether we should multiply or divide by this rate\\n    /// @param _outBase Unit of the stablecoin (or the out asset) associated to the oracle\\n    /// @param _stalePeriod Minimum feed update frequency for the oracle to not revert\\n    /// @param _treasury Treasury associated to the VaultManager which reads from this feed\\n    /// @param _description Description of the assets concerned by the oracle\\n    /// @dev For instance, if this oracle is supposed to give the price of ETH in EUR, and if the agEUR\\n    /// stablecoin associated to EUR has 18 decimals, then `outBase` should be 10**18\\n    constructor(\\n        address[] memory _circuitChainlink,\\n        uint8[] memory _circuitChainIsMultiplied,\\n        uint256 _outBase,\\n        uint32 _stalePeriod,\\n        address _treasury,\\n        string memory _description\\n    ) BaseOracleChainlinkMulti(_stalePeriod, _treasury) {\\n        outBase = _outBase;\\n        description = _description;\\n        uint256 circuitLength = _circuitChainlink.length;\\n        if (circuitLength == 0 || circuitLength != _circuitChainIsMultiplied.length) revert IncompatibleLengths();\\n        for (uint256 i = 0; i < circuitLength; i++) {\\n            AggregatorV3Interface _pool = AggregatorV3Interface(_circuitChainlink[i]);\\n            circuitChainlink.push(_pool);\\n            chainlinkDecimals.push(_pool.decimals());\\n        }\\n        circuitChainIsMultiplied = _circuitChainIsMultiplied;\\n    }\\n\\n    // ============================= Reading Oracles ===============================\\n\\n    /// @inheritdoc IOracle\\n    function read() external view override returns (uint256 quoteAmount) {\\n        quoteAmount = outBase;\\n        for (uint256 i = 0; i < circuitChainlink.length; i++) {\\n            quoteAmount = _readChainlinkFeed(\\n                quoteAmount,\\n                circuitChainlink[i],\\n                circuitChainIsMultiplied[i],\\n                chainlinkDecimals[i]\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa182a1e25acd04062bd8bb28339a1739c96c98a7dce4b2be99ad882807b85e84\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620013be380380620013be833981016040819052620000349162000513565b600080546001600160c01b031916600160a01b63ffffffff8616026001600160a01b031916176001600160a01b038416179055608084905280516200008190600490602084019062000206565b50855180158062000093575085518114155b15620000b2576040516346282e8d60e01b815260040160405180910390fd5b60005b81811015620001e2576000888281518110620000d557620000d562000638565b6020908102919091018101516001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0383169081179091556040805163313ce56760e01b81529051929450600393919263313ce567926004808401939192918290030181865afa1580156200016f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200019591906200064e565b81546001810183556000928352602092839020928104909201805460ff928316601f9094166101000a93840292909302199092161790555080620001d98162000673565b915050620000b5565b508551620001f890600290602089019062000295565b5050505050505050620006da565b82805462000214906200069d565b90600052602060002090601f01602090048101928262000238576000855562000283565b82601f106200025357805160ff191683800117855562000283565b8280016001018555821562000283579182015b828111156200028357825182559160200191906001019062000266565b506200029192915062000338565b5090565b82805482825590600052602060002090601f01602090048101928215620002835791602002820160005b83821115620002ff57835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302620002bf565b80156200032e5782816101000a81549060ff0219169055600101602081600001049283019260010302620002ff565b5050620002919291505b5b8082111562000291576000815560010162000339565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200039057620003906200034f565b604052919050565b60006001600160401b03821115620003b457620003b46200034f565b5060051b60200190565b80516001600160a01b0381168114620003d657600080fd5b919050565b805160ff81168114620003d657600080fd5b600082601f830112620003ff57600080fd5b8151602062000418620004128362000398565b62000365565b82815260059290921b840181019181810190868411156200043857600080fd5b8286015b848110156200045e576200045081620003db565b83529183019183016200043c565b509695505050505050565b805163ffffffff81168114620003d657600080fd5b600082601f8301126200049057600080fd5b81516001600160401b03811115620004ac57620004ac6200034f565b6020620004c2601f8301601f1916820162000365565b8281528582848701011115620004d757600080fd5b60005b83811015620004f7578581018301518282018401528201620004da565b83811115620005095760008385840101525b5095945050505050565b60008060008060008060c087890312156200052d57600080fd5b86516001600160401b03808211156200054557600080fd5b818901915089601f8301126200055a57600080fd5b815160206200056d620004128362000398565b82815260059290921b8401810191818101908d8411156200058d57600080fd5b948201945b83861015620005b657620005a686620003be565b8252948201949082019062000592565b918c0151919a50909350505080821115620005d057600080fd5b620005de8a838b01620003ed565b965060408901519550620005f560608a0162000469565b94506200060560808a01620003be565b935060a08901519150808211156200061c57600080fd5b506200062b89828a016200047e565b9150509295509295509295565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156200066157600080fd5b6200066c82620003db565b9392505050565b60006000198214156200069657634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c90821680620006b257607f821691505b60208210811415620006d457634e487b7160e01b600052602260045260246000fd5b50919050565b608051610cc2620006fc6000396000818160c801526102110152610cc26000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80639e0a850011610076578063cf330c261161005b578063cf330c26146101d6578063dbda63de146101e9578063f0f44260146101fc57600080fd5b80639e0a850014610174578063a5b36a361461019957600080fd5b806361d027b3116100a757806361d027b314610105578063630914d11461014a5780637284e4161461015f57600080fd5b806322834baa146100c357806357de26a4146100fd575b600080fd5b6100ea7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100ea61020f565b6000546101259073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100f4565b61015d610158366004610864565b6102fd565b005b610167610448565b6040516100f49190610891565b610187610182366004610904565b6104d6565b60405160ff90911681526020016100f4565b6000546101c19074010000000000000000000000000000000000000000900463ffffffff1681565b60405163ffffffff90911681526020016100f4565b6101256101e4366004610904565b61050a565b6101876101f7366004610904565b610541565b61015d61020a36600461091d565b610551565b7f000000000000000000000000000000000000000000000000000000000000000060005b6001548110156102f9576102e5826001838154811061025457610254610953565b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff909216918590811061028d5761028d610953565b90600052602060002090602091828204019190069054906101000a900460ff16600385815481106102c0576102c0610953565b60009182526020918290209181049091015460ff601f9092166101000a9004166106fd565b9150806102f1816109b1565b915050610233565b5090565b6000546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa15801561036b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038f91906109ea565b6103c5576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000063ffffffff8416908102919091179091556040519081527f4040b15332969bfd8b2035c1a701c8e13f2b5d62ce89b311684a601b2eb44e019060200160405180910390a150565b6004805461045590610a0c565b80601f016020809104026020016040519081016040528092919081815260200182805461048190610a0c565b80156104ce5780601f106104a3576101008083540402835291602001916104ce565b820191906000526020600020905b8154815290600101906020018083116104b157829003601f168201915b505050505081565b600281815481106104e657600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b6001818154811061051a57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600381815481106104e657600080fd5b6000546040517f676a553e00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063676a553e90602401602060405180830381865afa1580156105bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e391906109ea565b15801561067f57506000546040517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063e43581b890602401602060405180830381865afa158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d91906109ea565b155b156106b6576040517fb05b9b9f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60008060008060008773ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610750573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107749190610a7f565b9450945050935093506000831315806107a457508069ffffffffffffffffffff168469ffffffffffffffffffff16115b806107d7575060005474010000000000000000000000000000000000000000900463ffffffff166107d58342610acf565b115b1561080e576040517fae19356300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600160ff891614156108465761082687600a610c08565b610830828c610c14565b61083a9190610c51565b9550505050505061085c565b8061085288600a610c08565b610830908c610c14565b949350505050565b60006020828403121561087657600080fd5b813563ffffffff8116811461088a57600080fd5b9392505050565b600060208083528351808285015260005b818110156108be578581018301518582016040015282016108a2565b818111156108d0576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60006020828403121561091657600080fd5b5035919050565b60006020828403121561092f57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461088a57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156109e3576109e3610982565b5060010190565b6000602082840312156109fc57600080fd5b8151801515811461088a57600080fd5b600181811c90821680610a2057607f821691505b60208210811415610a5a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b805169ffffffffffffffffffff81168114610a7a57600080fd5b919050565b600080600080600060a08688031215610a9757600080fd5b610aa086610a60565b9450602086015193506040860151925060608601519150610ac360808701610a60565b90509295509295909350565b600082821015610ae157610ae1610982565b500390565b600181815b80851115610b3f57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610b2557610b25610982565b80851615610b3257918102915b93841c9390800290610aeb565b509250929050565b600082610b5657506001610c02565b81610b6357506000610c02565b8160018114610b795760028114610b8357610b9f565b6001915050610c02565b60ff841115610b9457610b94610982565b50506001821b610c02565b5060208310610133831016604e8410600b8410161715610bc2575081810a610c02565b610bcc8383610ae6565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610bfe57610bfe610982565b0290505b92915050565b600061088a8383610b47565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c4c57610c4c610982565b500290565b600082610c87577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220b031ad08502fe2c3167dbac13206e0d756820e3766cce4e2711b2a83746b741e64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80639e0a850011610076578063cf330c261161005b578063cf330c26146101d6578063dbda63de146101e9578063f0f44260146101fc57600080fd5b80639e0a850014610174578063a5b36a361461019957600080fd5b806361d027b3116100a757806361d027b314610105578063630914d11461014a5780637284e4161461015f57600080fd5b806322834baa146100c357806357de26a4146100fd575b600080fd5b6100ea7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100ea61020f565b6000546101259073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100f4565b61015d610158366004610864565b6102fd565b005b610167610448565b6040516100f49190610891565b610187610182366004610904565b6104d6565b60405160ff90911681526020016100f4565b6000546101c19074010000000000000000000000000000000000000000900463ffffffff1681565b60405163ffffffff90911681526020016100f4565b6101256101e4366004610904565b61050a565b6101876101f7366004610904565b610541565b61015d61020a36600461091d565b610551565b7f000000000000000000000000000000000000000000000000000000000000000060005b6001548110156102f9576102e5826001838154811061025457610254610953565b6000918252602090912001546002805473ffffffffffffffffffffffffffffffffffffffff909216918590811061028d5761028d610953565b90600052602060002090602091828204019190069054906101000a900460ff16600385815481106102c0576102c0610953565b60009182526020918290209181049091015460ff601f9092166101000a9004166106fd565b9150806102f1816109b1565b915050610233565b5090565b6000546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa15801561036b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038f91906109ea565b6103c5576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000063ffffffff8416908102919091179091556040519081527f4040b15332969bfd8b2035c1a701c8e13f2b5d62ce89b311684a601b2eb44e019060200160405180910390a150565b6004805461045590610a0c565b80601f016020809104026020016040519081016040528092919081815260200182805461048190610a0c565b80156104ce5780601f106104a3576101008083540402835291602001916104ce565b820191906000526020600020905b8154815290600101906020018083116104b157829003601f168201915b505050505081565b600281815481106104e657600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b6001818154811061051a57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600381815481106104e657600080fd5b6000546040517f676a553e00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063676a553e90602401602060405180830381865afa1580156105bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e391906109ea565b15801561067f57506000546040517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063e43581b890602401602060405180830381865afa158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d91906109ea565b155b156106b6576040517fb05b9b9f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60008060008060008773ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610750573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107749190610a7f565b9450945050935093506000831315806107a457508069ffffffffffffffffffff168469ffffffffffffffffffff16115b806107d7575060005474010000000000000000000000000000000000000000900463ffffffff166107d58342610acf565b115b1561080e576040517fae19356300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600160ff891614156108465761082687600a610c08565b610830828c610c14565b61083a9190610c51565b9550505050505061085c565b8061085288600a610c08565b610830908c610c14565b949350505050565b60006020828403121561087657600080fd5b813563ffffffff8116811461088a57600080fd5b9392505050565b600060208083528351808285015260005b818110156108be578581018301518582016040015282016108a2565b818111156108d0576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b60006020828403121561091657600080fd5b5035919050565b60006020828403121561092f57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461088a57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156109e3576109e3610982565b5060010190565b6000602082840312156109fc57600080fd5b8151801515811461088a57600080fd5b600181811c90821680610a2057607f821691505b60208210811415610a5a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b805169ffffffffffffffffffff81168114610a7a57600080fd5b919050565b600080600080600060a08688031215610a9757600080fd5b610aa086610a60565b9450602086015193506040860151925060608601519150610ac360808701610a60565b90509295509295909350565b600082821015610ae157610ae1610982565b500390565b600181815b80851115610b3f57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610b2557610b25610982565b80851615610b3257918102915b93841c9390800290610aeb565b509250929050565b600082610b5657506001610c02565b81610b6357506000610c02565b8160018114610b795760028114610b8357610b9f565b6001915050610c02565b60ff841115610b9457610b94610982565b50506001821b610c02565b5060208310610133831016604e8410600b8410161715610bc2575081810a610c02565b610bcc8383610ae6565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610bfe57610bfe610982565b0290505b92915050565b600061088a8383610b47565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c4c57610c4c610982565b500290565b600082610c87577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220b031ad08502fe2c3167dbac13206e0d756820e3766cce4e2711b2a83746b741e64736f6c634300080c0033",
  "devdoc": {
    "author": "Angle Core Team",
    "details": "This contract concerns an oracle that uses Chainlink with multiple pools to read fromTypically we expect to use this contract to read like the ETH/USD and then USD/EUR feed",
    "kind": "dev",
    "methods": {
      "changeStalePeriod(uint32)": {
        "params": {
          "_stalePeriod": "New stale period (in seconds)"
        }
      },
      "constructor": {
        "details": "For instance, if this oracle is supposed to give the price of ETH in EUR, and if the agEUR stablecoin associated to EUR has 18 decimals, then `outBase` should be 10**18",
        "params": {
          "_circuitChainIsMultiplied": "Whether we should multiply or divide by this rate",
          "_circuitChainlink": "Chainlink pool addresses (in order)",
          "_description": "Description of the assets concerned by the oracle",
          "_outBase": "Unit of the stablecoin (or the out asset) associated to the oracle",
          "_stalePeriod": "Minimum feed update frequency for the oracle to not revert",
          "_treasury": "Treasury associated to the VaultManager which reads from this feed"
        }
      },
      "read()": {
        "details": "For instance if the out currency is EUR (and hence agEUR), then the base of the returned value is 10**18",
        "returns": {
          "quoteAmount": "The current rate between the in-currency and out-currency in the base of the out currency"
        }
      },
      "setTreasury(address)": {
        "details": "This function can be called by an approved `VaultManager` contract which can call this function after being requested to do so by a `treasury` contractIn some situations (like reactor contracts), the `VaultManager` may not directly be linked to the `oracle` contract and as such we may need governors to be able to call this function as well",
        "params": {
          "_treasury": "Address of the new treasury contract"
        }
      }
    },
    "title": "OracleChainlinkMulti",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "chainlinkDecimals(uint256)": {
        "notice": "Decimals for each Chainlink pairs"
      },
      "changeStalePeriod(uint32)": {
        "notice": "Changes the stale period"
      },
      "circuitChainIsMultiplied(uint256)": {
        "notice": "Whether each rate for the pairs in `circuitChainlink` should be multiplied or divided"
      },
      "circuitChainlink(uint256)": {
        "notice": "Chainlink pools, the order of the pools has to be the order in which they are read for the computation of the price"
      },
      "constructor": {
        "notice": "Constructor for an oracle using Chainlink with multiple pools to read from"
      },
      "description()": {
        "notice": "Description of the assets concerned by the oracle and the price outputted"
      },
      "outBase()": {
        "notice": "Unit of the stablecoin"
      },
      "read()": {
        "notice": "Reads the rate from the Chainlink circuit and other data provided"
      },
      "setTreasury(address)": {
        "notice": "Changes the treasury contract"
      },
      "stalePeriod()": {
        "notice": "Represent the maximum amount of time (in seconds) between each Chainlink update before the price feed is considered stale"
      },
      "treasury()": {
        "notice": "Reference to the `treasury` contract handling this `VaultManager`"
      }
    },
    "notice": "Oracle contract, one contract is deployed per collateral/stablecoin pair",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15169,
        "contract": "contracts/oracle/OracleChainlinkMulti.sol:OracleChainlinkMulti",
        "label": "treasury",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ITreasury)11743"
      },
      {
        "astId": 15172,
        "contract": "contracts/oracle/OracleChainlinkMulti.sol:OracleChainlinkMulti",
        "label": "stalePeriod",
        "offset": 20,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 15354,
        "contract": "contracts/oracle/OracleChainlinkMulti.sol:OracleChainlinkMulti",
        "label": "circuitChainlink",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_contract(AggregatorV3Interface)45)dyn_storage"
      },
      {
        "astId": 15358,
        "contract": "contracts/oracle/OracleChainlinkMulti.sol:OracleChainlinkMulti",
        "label": "circuitChainIsMultiplied",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint8)dyn_storage"
      },
      {
        "astId": 15362,
        "contract": "contracts/oracle/OracleChainlinkMulti.sol:OracleChainlinkMulti",
        "label": "chainlinkDecimals",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint8)dyn_storage"
      },
      {
        "astId": 15368,
        "contract": "contracts/oracle/OracleChainlinkMulti.sol:OracleChainlinkMulti",
        "label": "description",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_array(t_contract(AggregatorV3Interface)45)dyn_storage": {
        "base": "t_contract(AggregatorV3Interface)45",
        "encoding": "dynamic_array",
        "label": "contract AggregatorV3Interface[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)11743": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}