{
  "address": "0x1fB42b5e1d7ec3fdfDd4dca82feAA9D7a06090aB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_circuitChainlink",
          "type": "address[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_circuitChainIsMultiplied",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256",
          "name": "_outBase",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_stalePeriod",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_description",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_stalePeriod",
          "type": "uint32"
        }
      ],
      "name": "StalePeriodUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "chainlinkDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_stalePeriod",
          "type": "uint32"
        }
      ],
      "name": "changeStalePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "circuitChainIsMultiplied",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "circuitChainlink",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "outBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "read",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quoteAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stalePeriod",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "contract ITreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xee9e95b1cf40c9f370f96e3712b4ca8376825ab550ea46b15a161685a57e38bd",
  "receipt": {
    "to": null,
    "from": "0x8A97FBD532A5C1eD67fd67c11dD76013abAc840e",
    "contractAddress": "0x1fB42b5e1d7ec3fdfDd4dca82feAA9D7a06090aB",
    "transactionIndex": 91,
    "gasUsed": "802610",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x883abe49b5048d63481bceaa41751283a21915d8308f56726230018e9f1455e0",
    "transactionHash": "0xee9e95b1cf40c9f370f96e3712b4ca8376825ab550ea46b15a161685a57e38bd",
    "logs": [],
    "blockNumber": 10343832,
    "cumulativeGasUsed": "8593830",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xECe365B379E1dD183B20fc5f022230C044d51404",
      "0x78F9e60608bF48a1155b4B2A5e31F32318a1d85F"
    ],
    [
      1,
      0
    ],
    "1000000000000000000",
    172800,
    "0x5fa4c7f1DFDcdf3406A4473211A83d497018A869",
    "0x4b8b7d55c40807c3e6120666f6ceeeb936ed82db34af5bf463ff9d019faf2ab0"
  ],
  "solcInputHash": "dbecfd0646ca35a67c6afa8d1f32a581",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_circuitChainlink\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_circuitChainIsMultiplied\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256\",\"name\":\"_outBase\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_stalePeriod\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_description\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_stalePeriod\",\"type\":\"uint32\"}],\"name\":\"StalePeriodUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainlinkDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_stalePeriod\",\"type\":\"uint32\"}],\"name\":\"changeStalePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"circuitChainIsMultiplied\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"circuitChainlink\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"read\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stalePeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Core Team\",\"details\":\"This contract concerns an oracle that uses Chainlink with multiple pools to read fromTypically we expect to use this contract to read like the ETH/USD and then USD/EUR feed\",\"kind\":\"dev\",\"methods\":{\"changeStalePeriod(uint32)\":{\"params\":{\"_stalePeriod\":\"New stale period (in seconds)\"}},\"constructor\":{\"details\":\"For instance, if this oracle is supposed to give the price of ETH in EUR, and if the agEUR stablecoin associated to EUR has 18 decimals, then `outBase` should be 10**18\",\"params\":{\"_circuitChainIsMultiplied\":\"Whether we should multiply or divide by this rate\",\"_circuitChainlink\":\"Chainlink pool addresses (in order)\",\"_description\":\"Description of the assets concerned by the oracle\",\"_outBase\":\"Unit of the stablecoin (or the out asset) associated to the oracle\",\"_stalePeriod\":\"Minimum feed update frequency for the oracle to not revert\",\"_treasury\":\"Treasury associated to the VaultManager which reads from this feed\"}},\"read()\":{\"details\":\"For instance if the out currency is EUR (and hence agEUR), then the base of the returned value is 10**18\",\"returns\":{\"quoteAmount\":\"The current rate between the in-currency and out-currency in the base of the out currency\"}},\"setTreasury(address)\":{\"details\":\"This function can be called by an approved `vaultManager` contract which can call this function after being requested to do so by a `treasury` contractIn some situations (like reactor contracts), the `vaultManager` may not directly be linked to the `oracle` contract and as such we may need governors to be able to call this function as well\",\"params\":{\"_treasury\":\"Address of the new treasury contract\"}}},\"title\":\"OracleChainlinkMulti\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"chainlinkDecimals(uint256)\":{\"notice\":\"Decimals for each Chainlink pairs\"},\"changeStalePeriod(uint32)\":{\"notice\":\"Changes the stale period\"},\"circuitChainIsMultiplied(uint256)\":{\"notice\":\"Whether each rate for the pairs in `circuitChainlink` should be multiplied or divided\"},\"circuitChainlink(uint256)\":{\"notice\":\"Chainlink pools, the order of the pools has to be the order in which they are read for the computation of the price\"},\"constructor\":{\"notice\":\"Constructor for an oracle using Chainlink with multiple pools to read from\"},\"description()\":{\"notice\":\"Description of the assets concerned by the oracle and the price outputted\"},\"outBase()\":{\"notice\":\"Unit of the stablecoin\"},\"read()\":{\"notice\":\"Reads the rate from the Chainlink circuit\"},\"setTreasury(address)\":{\"notice\":\"Changes the treasury contract\"},\"stalePeriod()\":{\"notice\":\"Represent the maximum amount of time (in seconds) between each Chainlink update before the price feed is considered stale\"},\"treasury()\":{\"notice\":\"Reference to the `treasury` contract handling this `VaultManager`\"}},\"notice\":\"Oracle contract, one contract is deployed per collateral/stablecoin pair\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/OracleChainlinkMulti.sol\":\"OracleChainlinkMulti\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"contracts/interfaces/IAgToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title IAgToken\\n/// @author Angle Core Team\\n/// @notice Interface for the stablecoins `AgToken` contracts\\n/// @dev This interface only contains functions of the `AgToken` contract which are called by other contracts\\n/// of this module or of the first module of the Angle Protocol\\ninterface IAgToken is IERC20Upgradeable {\\n    // ======================= Minter Role Only Functions ===========================\\n\\n    /// @notice Lets the `StableMaster` contract or another whitelisted contract mint agTokens\\n    /// @param account Address to mint to\\n    /// @param amount Amount to mint\\n    /// @dev The contracts allowed to issue agTokens are the `StableMaster` contract, `VaultManager` contracts\\n    /// associated to this stablecoin as well as the flash loan module (if activated) and potentially contracts\\n    /// whitelisted by governance\\n    function mint(address account, uint256 amount) external;\\n\\n    /// @notice Burns `amount` tokens from a `burner` address after being asked to by `sender`\\n    /// @param amount Amount of tokens to burn\\n    /// @param burner Address to burn from\\n    /// @param sender Address which requested the burn from `burner`\\n    /// @dev This method is to be called by a contract with the minter right after being requested\\n    /// to do so by a `sender` address willing to burn tokens from another `burner` address\\n    /// @dev The method checks the allowance between the `sender` and the `burner`\\n    function burnFrom(\\n        uint256 amount,\\n        address burner,\\n        address sender\\n    ) external;\\n\\n    /// @notice Burns `amount` tokens from a `burner` address\\n    /// @param amount Amount of tokens to burn\\n    /// @param burner Address to burn from\\n    /// @dev This method is to be called by a contract with a minter right on the AgToken after being\\n    /// requested to do so by an address willing to burn tokens from its address\\n    function burnSelf(uint256 amount, address burner) external;\\n\\n    // ========================= Treasury Only Functions ===========================\\n\\n    /// @notice Adds a minter in the contract\\n    /// @param minter Minter address to add\\n    /// @dev Zero address checks are performed directly in the `Treasury` contract\\n    function addMinter(address minter) external;\\n\\n    /// @notice Removes a minter from the contract\\n    /// @param minter Minter address to remove\\n    /// @dev This function can also be called by a minter wishing to revoke itself\\n    function removeMinter(address minter) external;\\n\\n    /// @notice Sets a new treasury contract\\n    /// @param _treasury New treasury address\\n    function setTreasury(address _treasury) external;\\n\\n    // ========================= External functions ================================\\n\\n    /// @notice Checks whether an address has the right to mint agTokens\\n    /// @param minter Address for which the minting right should be checked\\n    /// @return Whether the address has the right to mint agTokens or not\\n    function isMinter(address minter) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcd50d86128e457543483981ea6127cb8dac03584b919614352aa89d7e991405c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICoreBorrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\n/// @title ICoreBorrow\\n/// @author Angle Core Team\\n/// @notice Interface for the `CoreBorrow` contract\\n/// @dev This interface only contains functions of the `CoreBorrow` contract which are called by other contracts\\n/// of this module\\ninterface ICoreBorrow {\\n    /// @notice Checks if an address corresponds to a treasury of a stablecoin with a flash loan\\n    /// module initialized on it\\n    /// @param treasury Address to check\\n    /// @return Whether the address has the `FLASHLOANER_TREASURY_ROLE` or not\\n    function isFlashLoanerTreasury(address treasury) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GOVERNOR_ROLE` or not\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor or a guardian of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GUARDIAN_ROLE` or not\\n    /// @dev Governance should make sure when adding a governor to also give this governor the guardian\\n    /// role by calling the `addGovernor` function\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x25b65b3f506ca91745a444502a36f0556585d82d9d60f4bd32fbcaabc12840d4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFlashAngle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IAgToken.sol\\\";\\nimport \\\"./ICoreBorrow.sol\\\";\\n\\n/// @title IFlashAngle\\n/// @author Angle Core Team\\n/// @notice Interface for the `FlashAngle` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module\\ninterface IFlashAngle {\\n    /// @notice Reference to the `CoreBorrow` contract managing the FlashLoan module\\n    function core() external view returns (ICoreBorrow);\\n\\n    /// @notice Sends the fees taken from flash loans to the treasury contract associated to the stablecoin\\n    /// @param stablecoin Stablecoin from which profits should be sent\\n    /// @return balance Amount of profits sent\\n    /// @dev This function can only be called by the treasury contract\\n    function accrueInterestToTreasury(IAgToken stablecoin) external returns (uint256 balance);\\n\\n    /// @notice Adds support for a stablecoin\\n    /// @param _treasury Treasury associated to the stablecoin to add support for\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function addStablecoinSupport(address _treasury) external;\\n\\n    /// @notice Removes support for a stablecoin\\n    /// @param _treasury Treasury associated to the stablecoin to remove support for\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function removeStablecoinSupport(address _treasury) external;\\n\\n    /// @notice Sets a new core contract\\n    /// @param _core Core contract address to set\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function setCore(address _core) external;\\n}\\n\",\"keccak256\":\"0xc17654e512897efe41e3f1173c07dd4676e8c699a72b859d14b473d1e8300e45\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./ITreasury.sol\\\";\\n\\n/// @title IOracle\\n/// @author Angle Core Team\\n/// @notice Interface for the `Oracle` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module\\ninterface IOracle {\\n    /// @notice Reads the rate from the Chainlink circuit\\n    /// @return quoteAmount The current rate between the in-currency and out-currency in the base\\n    /// of the out currency\\n    /// @dev For instance if the out currency is EUR (and hence agEUR), then the base of the returned\\n    /// value is 10**18\\n    function read() external view returns (uint256);\\n\\n    /// @notice Changes the treasury contract\\n    /// @param _treasury Address of the new treasury contract\\n    /// @dev This function can be called by an approved `vaultManager` contract which can call\\n    /// this function after being requested to do so by a `treasury` contract\\n    /// @dev In some situations (like reactor contracts), the `vaultManager` may not directly be linked\\n    /// to the `oracle` contract and as such we may need governors to be able to call this function as well\\n    function setTreasury(address _treasury) external;\\n\\n    /// @notice Reference to the `treasury` contract handling this `VaultManager`\\n    function treasury() external view returns (ITreasury treasury);\\n}\\n\",\"keccak256\":\"0x20dae087817418c90ba2b3cd096cd50c6b57d61e86d4bb794356f88aaeaf9ff1\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IAgToken.sol\\\";\\nimport \\\"./ICoreBorrow.sol\\\";\\nimport \\\"./IFlashAngle.sol\\\";\\n\\n/// @title ITreasury\\n/// @author Angle Core Team\\n/// @notice Interface for the `Treasury` contract\\n/// @dev This interface only contains functions of the `Treasury` which are called by other contracts\\n/// of this module\\ninterface ITreasury {\\n    /// @notice Stablecoin handled by this `treasury` contract\\n    function stablecoin() external view returns (IAgToken);\\n\\n    /// @notice Checks whether a given address has the  governor role\\n    /// @param admin Address to check\\n    /// @return Whether the address has the governor role\\n    /// @dev Access control is only kept in the `CoreBorrow` contract\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether a given address has the guardian or the governor role\\n    /// @param admin Address to check\\n    /// @return Whether the address has the guardian or the governor role\\n    /// @dev Access control is only kept in the `CoreBorrow` contract which means that this function\\n    /// queries the `CoreBorrow` contract\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether a given address has well been initialized in this contract\\n    /// as a `VaultManager``\\n    /// @param _vaultManager Address to check\\n    /// @return Whether the address has been initialized or not\\n    function isVaultManager(address _vaultManager) external view returns (bool);\\n\\n    /// @notice Sets a new flash loan module for this stablecoin\\n    /// @param _flashLoanModule Reference to the new flash loan module\\n    /// @dev This function removes the minting right to the old flash loan module and grants\\n    /// it to the new module\\n    function setFlashLoanModule(address _flashLoanModule) external;\\n}\\n\",\"keccak256\":\"0xced9b7256fcbedc75682037e11ce51fe9116e5604794b8545e00dea0607629cc\",\"license\":\"GPL-3.0\"},\"contracts/oracle/BaseOracleChainlinkMulti.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\n\\n/// @title BaseOracleChainlinkMulti\\n/// @author Angle Core Team\\n/// @notice Base Contract to be overriden by all contracts of the protocol\\n/// @dev This base contract concerns an oracle that uses Chainlink with multiple pools to read from\\n/// @dev All gas-efficient implementation of the `OracleChainlinkMulti` contract should inherit from this\\nabstract contract BaseOracleChainlinkMulti is IOracle {\\n    // ========================= Parameters and References =========================\\n\\n    /// @inheritdoc IOracle\\n    ITreasury public override treasury;\\n    /// @notice Represent the maximum amount of time (in seconds) between each Chainlink update\\n    /// before the price feed is considered stale\\n    uint32 public stalePeriod;\\n\\n    // =================================== Event ===================================\\n\\n    event StalePeriodUpdated(uint32 _stalePeriod);\\n\\n    /// @notice Constructor for an oracle using Chainlink with multiple pools to read from\\n    /// @param _stalePeriod Minimum feed update frequency for the oracle to not revert\\n    /// @param _treasury Treasury associated to the VaultManager which reads from this feed\\n    constructor(uint32 _stalePeriod, address _treasury) {\\n        stalePeriod = _stalePeriod;\\n        treasury = ITreasury(_treasury);\\n    }\\n\\n    // ============================= Reading Oracles ===============================\\n\\n    /// @inheritdoc IOracle\\n    function read() external view virtual override returns (uint256 quoteAmount);\\n\\n    /// @notice Reads a Chainlink feed using a quote amount and converts the quote amount to\\n    /// the out-currency\\n    /// @param quoteAmount The amount for which to compute the price expressed with base decimal\\n    /// @param feed Chainlink feed to query\\n    /// @param multiplied Whether the ratio outputted by Chainlink should be multiplied or divided\\n    /// to the `quoteAmount`\\n    /// @param decimals Number of decimals of the corresponding Chainlink pair\\n    /// @return The `quoteAmount` converted in out-currency\\n    function _readChainlinkFeed(\\n        uint256 quoteAmount,\\n        AggregatorV3Interface feed,\\n        uint8 multiplied,\\n        uint256 decimals\\n    ) internal view returns (uint256) {\\n        (uint80 roundId, int256 ratio, , uint256 updatedAt, uint80 answeredInRound) = feed.latestRoundData();\\n        require(ratio > 0 && roundId <= answeredInRound && block.timestamp - updatedAt <= stalePeriod, \\\"37\\\");\\n        uint256 castedRatio = uint256(ratio);\\n        // Checking whether we should multiply or divide by the ratio computed\\n        if (multiplied == 1) return (quoteAmount * castedRatio) / (10**decimals);\\n        else return (quoteAmount * (10**decimals)) / castedRatio;\\n    }\\n\\n    // ======================= Governance Related Functions ========================\\n\\n    /// @notice Changes the stale period\\n    /// @param _stalePeriod New stale period (in seconds)\\n    function changeStalePeriod(uint32 _stalePeriod) external {\\n        require(treasury.isGovernorOrGuardian(msg.sender), \\\"2\\\");\\n        stalePeriod = _stalePeriod;\\n        emit StalePeriodUpdated(_stalePeriod);\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function setTreasury(address _treasury) external override {\\n        require(treasury.isVaultManager(msg.sender) || treasury.isGovernor(msg.sender), \\\"3\\\");\\n        treasury = ITreasury(_treasury);\\n    }\\n}\\n\",\"keccak256\":\"0x7b4786ae4969426a8a2605b94f593670c7eb1e7dde7564ed53063f917a28207f\",\"license\":\"GPL-3.0\"},\"contracts/oracle/OracleChainlinkMulti.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"./BaseOracleChainlinkMulti.sol\\\";\\n\\n/// @title OracleChainlinkMulti\\n/// @author Angle Core Team\\n/// @notice Oracle contract, one contract is deployed per collateral/stablecoin pair\\n/// @dev This contract concerns an oracle that uses Chainlink with multiple pools to read from\\n/// @dev Typically we expect to use this contract to read like the ETH/USD and then USD/EUR feed\\ncontract OracleChainlinkMulti is BaseOracleChainlinkMulti {\\n    // ========================= Parameters and References =========================\\n\\n    /// @notice Chainlink pools, the order of the pools has to be the order in which they are read for the computation\\n    /// of the price\\n    AggregatorV3Interface[] public circuitChainlink;\\n    /// @notice Whether each rate for the pairs in `circuitChainlink` should be multiplied or divided\\n    uint8[] public circuitChainIsMultiplied;\\n    /// @notice Decimals for each Chainlink pairs\\n    uint8[] public chainlinkDecimals;\\n    /// @notice Unit of the stablecoin\\n    uint256 public immutable outBase;\\n    /// @notice Description of the assets concerned by the oracle and the price outputted\\n    bytes32 public immutable description;\\n\\n    /// @notice Constructor for an oracle using Chainlink with multiple pools to read from\\n    /// @param _circuitChainlink Chainlink pool addresses (in order)\\n    /// @param _circuitChainIsMultiplied Whether we should multiply or divide by this rate\\n    /// @param _outBase Unit of the stablecoin (or the out asset) associated to the oracle\\n    /// @param _stalePeriod Minimum feed update frequency for the oracle to not revert\\n    /// @param _treasury Treasury associated to the VaultManager which reads from this feed\\n    /// @param _description Description of the assets concerned by the oracle\\n    /// @dev For instance, if this oracle is supposed to give the price of ETH in EUR, and if the agEUR\\n    /// stablecoin associated to EUR has 18 decimals, then `outBase` should be 10**18\\n    constructor(\\n        address[] memory _circuitChainlink,\\n        uint8[] memory _circuitChainIsMultiplied,\\n        uint256 _outBase,\\n        uint32 _stalePeriod,\\n        address _treasury,\\n        bytes32 _description\\n    ) BaseOracleChainlinkMulti(_stalePeriod, _treasury) {\\n        outBase = _outBase;\\n        description = _description;\\n        uint256 circuitLength = _circuitChainlink.length;\\n        require(circuitLength > 0 && circuitLength == _circuitChainIsMultiplied.length, \\\"25\\\");\\n        for (uint256 i = 0; i < circuitLength; i++) {\\n            AggregatorV3Interface _pool = AggregatorV3Interface(_circuitChainlink[i]);\\n            circuitChainlink.push(_pool);\\n            chainlinkDecimals.push(_pool.decimals());\\n        }\\n        circuitChainIsMultiplied = _circuitChainIsMultiplied;\\n    }\\n\\n    // ============================= Reading Oracles ===============================\\n\\n    /// @inheritdoc IOracle\\n    function read() external view override returns (uint256 quoteAmount) {\\n        quoteAmount = outBase;\\n        for (uint256 i = 0; i < circuitChainlink.length; i++) {\\n            quoteAmount = _readChainlinkFeed(\\n                quoteAmount,\\n                circuitChainlink[i],\\n                circuitChainIsMultiplied[i],\\n                chainlinkDecimals[i]\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x659147b58116cdba873e2132146a86fc55f179587e3ffbbf160597f0afec1f84\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162000ef438038062000ef4833981016040819052620000349162000400565b600080546001600160c01b031916600160a01b63ffffffff8616026001600160a01b031916176001600160a01b038416179055608084905260a081905285518015801590620000835750855181145b620000b95760405162461bcd60e51b8152602060048201526002602482015261323560f01b604482015260640160405180910390fd5b60005b81811015620001e9576000888281518110620000dc57620000dc62000507565b6020908102919091018101516001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0383169081179091556040805163313ce56760e01b81529051929450600393919263313ce567926004808401939192918290030181865afa15801562000176573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200019c91906200051d565b81546001810183556000928352602092839020928104909201805460ff928316601f9094166101000a93840292909302199092161790555080620001e08162000542565b915050620000bc565b508551620001ff9060029060208901906200020d565b50505050505050506200056c565b82805482825590600052602060002090601f01602090048101928215620002a85791602002820160005b838211156200027757835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030262000237565b8015620002a65782816101000a81549060ff021916905560010160208160000104928301926001030262000277565b505b50620002b6929150620002ba565b5090565b5b80821115620002b65760008155600101620002bb565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620003125762000312620002d1565b604052919050565b60006001600160401b03821115620003365762000336620002d1565b5060051b60200190565b80516001600160a01b03811681146200035857600080fd5b919050565b805160ff811681146200035857600080fd5b600082601f8301126200038157600080fd5b815160206200039a62000394836200031a565b620002e7565b82815260059290921b84018101918181019086841115620003ba57600080fd5b8286015b84811015620003e057620003d2816200035d565b8352918301918301620003be565b509695505050505050565b805163ffffffff811681146200035857600080fd5b60008060008060008060c087890312156200041a57600080fd5b86516001600160401b03808211156200043257600080fd5b818901915089601f8301126200044757600080fd5b815160206200045a62000394836200031a565b82815260059290921b8401810191818101908d8411156200047a57600080fd5b948201945b83861015620004a357620004938662000340565b825294820194908201906200047f565b918c0151919a50909350505080821115620004bd57600080fd5b50620004cc89828a016200036f565b95505060408701519350620004e460608801620003eb565b9250620004f46080880162000340565b915060a087015190509295509295509295565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156200053057600080fd5b6200053b826200035d565b9392505050565b60006000198214156200056557634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a05161095c62000598600039600061010f015260008181609801526101bd015261095c6000f3fe608060405234801561001057600080fd5b506004361061008e5760003560e01c806322834baa1461009357806357de26a4146100cd57806361d027b3146100d5578063630914d1146100f55780637284e4161461010a5780639e0a850014610131578063a5b36a3614610156578063cf330c2614610182578063dbda63de14610195578063f0f44260146101a8575b600080fd5b6100ba7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100ba6101bb565b6000546100e8906001600160a01b031681565b6040516100c49190610684565b610108610103366004610698565b61029c565b005b6100ba7f000000000000000000000000000000000000000000000000000000000000000081565b61014461013f3660046106c5565b61039c565b60405160ff90911681526020016100c4565b60005461016d90600160a01b900463ffffffff1681565b60405163ffffffff90911681526020016100c4565b6100e86101903660046106c5565b6103d0565b6101446101a33660046106c5565b6103fa565b6101086101b63660046106de565b61040a565b7f000000000000000000000000000000000000000000000000000000000000000060005b60015481101561029857610284826001838154811061020057610200610707565b600091825260209091200154600280546001600160a01b03909216918590811061022c5761022c610707565b90600052602060002090602091828204019190069054906101000a900460ff166003858154811061025f5761025f610707565b60009182526020918290209181049091015460ff601f9092166101000a900416610544565b91508061029081610733565b9150506101df565b5090565b60005460405163521d4de960e01b81526001600160a01b039091169063521d4de9906102cc903390600401610684565b602060405180830381865afa1580156102e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030d919061074e565b6103425760405162461bcd60e51b81526020600482015260016024820152601960f91b60448201526064015b60405180910390fd5b6000805463ffffffff60a01b1916600160a01b63ffffffff8416908102919091179091556040519081527f4040b15332969bfd8b2035c1a701c8e13f2b5d62ce89b311684a601b2eb44e019060200160405180910390a150565b600281815481106103ac57600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b600181815481106103e057600080fd5b6000918252602090912001546001600160a01b0316905081565b600381815481106103ac57600080fd5b6000546040516333b52a9f60e11b81526001600160a01b039091169063676a553e9061043a903390600401610684565b602060405180830381865afa158015610457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047b919061074e565b806104f25750600054604051631c86b03760e31b81526001600160a01b039091169063e43581b8906104b1903390600401610684565b602060405180830381865afa1580156104ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f2919061074e565b6105225760405162461bcd60e51b81526020600482015260016024820152603360f81b6044820152606401610339565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000806000876001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ae919061078c565b9450945050935093506000831380156105d95750806001600160501b0316846001600160501b031611155b80156105fd5750600054600160a01b900463ffffffff166105fa83426107dc565b11155b61062e5760405162461bcd60e51b8152602060048201526002602482015261333760f01b6044820152606401610339565b82600160ff891614156106665761064687600a6108d9565b610650828c6108e5565b61065a9190610904565b9550505050505061067c565b8061067288600a6108d9565b610650908c6108e5565b949350505050565b6001600160a01b0391909116815260200190565b6000602082840312156106aa57600080fd5b813563ffffffff811681146106be57600080fd5b9392505050565b6000602082840312156106d757600080fd5b5035919050565b6000602082840312156106f057600080fd5b81356001600160a01b03811681146106be57600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156107475761074761071d565b5060010190565b60006020828403121561076057600080fd5b815180151581146106be57600080fd5b80516001600160501b038116811461078757600080fd5b919050565b600080600080600060a086880312156107a457600080fd5b6107ad86610770565b94506020860151935060408601519250606086015191506107d060808701610770565b90509295509295909350565b6000828210156107ee576107ee61071d565b500390565b600181815b8085111561082e5781600019048211156108145761081461071d565b8085161561082157918102915b93841c93908002906107f8565b509250929050565b600082610845575060016108d3565b81610852575060006108d3565b816001811461086857600281146108725761088e565b60019150506108d3565b60ff8411156108835761088361071d565b50506001821b6108d3565b5060208310610133831016604e8410600b84101617156108b1575081810a6108d3565b6108bb83836107f3565b80600019048211156108cf576108cf61071d565b0290505b92915050565b60006106be8383610836565b60008160001904831182151516156108ff576108ff61071d565b500290565b60008261092157634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212202026c7f464025be4fa4d1ba3885543722a4ce8a7592c94817c77dfc2127e729764736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061008e5760003560e01c806322834baa1461009357806357de26a4146100cd57806361d027b3146100d5578063630914d1146100f55780637284e4161461010a5780639e0a850014610131578063a5b36a3614610156578063cf330c2614610182578063dbda63de14610195578063f0f44260146101a8575b600080fd5b6100ba7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100ba6101bb565b6000546100e8906001600160a01b031681565b6040516100c49190610684565b610108610103366004610698565b61029c565b005b6100ba7f000000000000000000000000000000000000000000000000000000000000000081565b61014461013f3660046106c5565b61039c565b60405160ff90911681526020016100c4565b60005461016d90600160a01b900463ffffffff1681565b60405163ffffffff90911681526020016100c4565b6100e86101903660046106c5565b6103d0565b6101446101a33660046106c5565b6103fa565b6101086101b63660046106de565b61040a565b7f000000000000000000000000000000000000000000000000000000000000000060005b60015481101561029857610284826001838154811061020057610200610707565b600091825260209091200154600280546001600160a01b03909216918590811061022c5761022c610707565b90600052602060002090602091828204019190069054906101000a900460ff166003858154811061025f5761025f610707565b60009182526020918290209181049091015460ff601f9092166101000a900416610544565b91508061029081610733565b9150506101df565b5090565b60005460405163521d4de960e01b81526001600160a01b039091169063521d4de9906102cc903390600401610684565b602060405180830381865afa1580156102e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030d919061074e565b6103425760405162461bcd60e51b81526020600482015260016024820152601960f91b60448201526064015b60405180910390fd5b6000805463ffffffff60a01b1916600160a01b63ffffffff8416908102919091179091556040519081527f4040b15332969bfd8b2035c1a701c8e13f2b5d62ce89b311684a601b2eb44e019060200160405180910390a150565b600281815481106103ac57600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b600181815481106103e057600080fd5b6000918252602090912001546001600160a01b0316905081565b600381815481106103ac57600080fd5b6000546040516333b52a9f60e11b81526001600160a01b039091169063676a553e9061043a903390600401610684565b602060405180830381865afa158015610457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047b919061074e565b806104f25750600054604051631c86b03760e31b81526001600160a01b039091169063e43581b8906104b1903390600401610684565b602060405180830381865afa1580156104ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f2919061074e565b6105225760405162461bcd60e51b81526020600482015260016024820152603360f81b6044820152606401610339565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000806000876001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ae919061078c565b9450945050935093506000831380156105d95750806001600160501b0316846001600160501b031611155b80156105fd5750600054600160a01b900463ffffffff166105fa83426107dc565b11155b61062e5760405162461bcd60e51b8152602060048201526002602482015261333760f01b6044820152606401610339565b82600160ff891614156106665761064687600a6108d9565b610650828c6108e5565b61065a9190610904565b9550505050505061067c565b8061067288600a6108d9565b610650908c6108e5565b949350505050565b6001600160a01b0391909116815260200190565b6000602082840312156106aa57600080fd5b813563ffffffff811681146106be57600080fd5b9392505050565b6000602082840312156106d757600080fd5b5035919050565b6000602082840312156106f057600080fd5b81356001600160a01b03811681146106be57600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156107475761074761071d565b5060010190565b60006020828403121561076057600080fd5b815180151581146106be57600080fd5b80516001600160501b038116811461078757600080fd5b919050565b600080600080600060a086880312156107a457600080fd5b6107ad86610770565b94506020860151935060408601519250606086015191506107d060808701610770565b90509295509295909350565b6000828210156107ee576107ee61071d565b500390565b600181815b8085111561082e5781600019048211156108145761081461071d565b8085161561082157918102915b93841c93908002906107f8565b509250929050565b600082610845575060016108d3565b81610852575060006108d3565b816001811461086857600281146108725761088e565b60019150506108d3565b60ff8411156108835761088361071d565b50506001821b6108d3565b5060208310610133831016604e8410600b84101617156108b1575081810a6108d3565b6108bb83836107f3565b80600019048211156108cf576108cf61071d565b0290505b92915050565b60006106be8383610836565b60008160001904831182151516156108ff576108ff61071d565b500290565b60008261092157634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212202026c7f464025be4fa4d1ba3885543722a4ce8a7592c94817c77dfc2127e729764736f6c634300080c0033",
  "devdoc": {
    "author": "Angle Core Team",
    "details": "This contract concerns an oracle that uses Chainlink with multiple pools to read fromTypically we expect to use this contract to read like the ETH/USD and then USD/EUR feed",
    "kind": "dev",
    "methods": {
      "changeStalePeriod(uint32)": {
        "params": {
          "_stalePeriod": "New stale period (in seconds)"
        }
      },
      "constructor": {
        "details": "For instance, if this oracle is supposed to give the price of ETH in EUR, and if the agEUR stablecoin associated to EUR has 18 decimals, then `outBase` should be 10**18",
        "params": {
          "_circuitChainIsMultiplied": "Whether we should multiply or divide by this rate",
          "_circuitChainlink": "Chainlink pool addresses (in order)",
          "_description": "Description of the assets concerned by the oracle",
          "_outBase": "Unit of the stablecoin (or the out asset) associated to the oracle",
          "_stalePeriod": "Minimum feed update frequency for the oracle to not revert",
          "_treasury": "Treasury associated to the VaultManager which reads from this feed"
        }
      },
      "read()": {
        "details": "For instance if the out currency is EUR (and hence agEUR), then the base of the returned value is 10**18",
        "returns": {
          "quoteAmount": "The current rate between the in-currency and out-currency in the base of the out currency"
        }
      },
      "setTreasury(address)": {
        "details": "This function can be called by an approved `vaultManager` contract which can call this function after being requested to do so by a `treasury` contractIn some situations (like reactor contracts), the `vaultManager` may not directly be linked to the `oracle` contract and as such we may need governors to be able to call this function as well",
        "params": {
          "_treasury": "Address of the new treasury contract"
        }
      }
    },
    "title": "OracleChainlinkMulti",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "chainlinkDecimals(uint256)": {
        "notice": "Decimals for each Chainlink pairs"
      },
      "changeStalePeriod(uint32)": {
        "notice": "Changes the stale period"
      },
      "circuitChainIsMultiplied(uint256)": {
        "notice": "Whether each rate for the pairs in `circuitChainlink` should be multiplied or divided"
      },
      "circuitChainlink(uint256)": {
        "notice": "Chainlink pools, the order of the pools has to be the order in which they are read for the computation of the price"
      },
      "constructor": {
        "notice": "Constructor for an oracle using Chainlink with multiple pools to read from"
      },
      "description()": {
        "notice": "Description of the assets concerned by the oracle and the price outputted"
      },
      "outBase()": {
        "notice": "Unit of the stablecoin"
      },
      "read()": {
        "notice": "Reads the rate from the Chainlink circuit"
      },
      "setTreasury(address)": {
        "notice": "Changes the treasury contract"
      },
      "stalePeriod()": {
        "notice": "Represent the maximum amount of time (in seconds) between each Chainlink update before the price feed is considered stale"
      },
      "treasury()": {
        "notice": "Reference to the `treasury` contract handling this `VaultManager`"
      }
    },
    "notice": "Oracle contract, one contract is deployed per collateral/stablecoin pair",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11398,
        "contract": "contracts/oracle/OracleChainlinkMulti.sol:OracleChainlinkMulti",
        "label": "treasury",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ITreasury)9684"
      },
      {
        "astId": 11401,
        "contract": "contracts/oracle/OracleChainlinkMulti.sol:OracleChainlinkMulti",
        "label": "stalePeriod",
        "offset": 20,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 11574,
        "contract": "contracts/oracle/OracleChainlinkMulti.sol:OracleChainlinkMulti",
        "label": "circuitChainlink",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_contract(AggregatorV3Interface)45)dyn_storage"
      },
      {
        "astId": 11578,
        "contract": "contracts/oracle/OracleChainlinkMulti.sol:OracleChainlinkMulti",
        "label": "circuitChainIsMultiplied",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint8)dyn_storage"
      },
      {
        "astId": 11582,
        "contract": "contracts/oracle/OracleChainlinkMulti.sol:OracleChainlinkMulti",
        "label": "chainlinkDecimals",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint8)dyn_storage"
      }
    ],
    "types": {
      "t_array(t_contract(AggregatorV3Interface)45)dyn_storage": {
        "base": "t_contract(AggregatorV3Interface)45",
        "encoding": "dynamic_array",
        "label": "contract AggregatorV3Interface[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)9684": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}