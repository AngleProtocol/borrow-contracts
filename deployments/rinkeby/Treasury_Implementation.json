{
  "address": "0xAc802b541a335643C98ACA43AA31bBB00217F1D2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "badDebtValue",
          "type": "uint256"
        }
      ],
      "name": "BadDebtUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_core",
          "type": "address"
        }
      ],
      "name": "CoreUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "NewTreasurySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "surplusBufferValue",
          "type": "uint256"
        }
      ],
      "name": "SurplusBufferUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_surplusForGovernance",
          "type": "uint64"
        }
      ],
      "name": "SurplusForGovernanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_surplusManager",
          "type": "address"
        }
      ],
      "name": "SurplusManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultManager",
          "type": "address"
        }
      ],
      "name": "VaultManagerToggled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_PARAMS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultManager",
          "type": "address"
        }
      ],
      "name": "addVaultManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "badDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "contract ICoreBorrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchSurplusFromAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchSurplusFromFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "vaultManagers",
          "type": "address[]"
        }
      ],
      "name": "fetchSurplusFromVaultManagers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanModule",
      "outputs": [
        {
          "internalType": "contract IFlashAngle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICoreBorrow",
          "name": "_core",
          "type": "address"
        },
        {
          "internalType": "contract IAgToken",
          "name": "_stablecoin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "isGovernorOrGuardian",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultManager",
          "type": "address"
        }
      ],
      "name": "isVaultManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pushSurplus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "governanceAllocation",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToRecover",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "removeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultManager",
          "type": "address"
        }
      ],
      "name": "removeVaultManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICoreBorrow",
          "name": "_core",
          "type": "address"
        }
      ],
      "name": "setCore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_flashLoanModule",
          "type": "address"
        }
      ],
      "name": "setFlashLoanModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_surplusForGovernance",
          "type": "uint64"
        }
      ],
      "name": "setSurplusForGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_surplusManager",
          "type": "address"
        }
      ],
      "name": "setSurplusManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stablecoin",
      "outputs": [
        {
          "internalType": "contract IAgToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "surplusBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "surplusForGovernance",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "surplusManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "updateBadDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "badDebtValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaultManagerList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultManagerMap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd6e234a296b0c1aa2a9a745e347e31c69a82fafa5c7b584b3428444989af3fe0",
  "receipt": {
    "to": null,
    "from": "0x8A97FBD532A5C1eD67fd67c11dD76013abAc840e",
    "contractAddress": "0xAc802b541a335643C98ACA43AA31bBB00217F1D2",
    "transactionIndex": 7,
    "gasUsed": "2113092",
    "logsBloom": "0x
    "blockHash": "0xc130d6a06d92a9271ea7d06b4532eef7fa14ea8a21487a28d12b9af1c635281c",
    "transactionHash": "0xd6e234a296b0c1aa2a9a745e347e31c69a82fafa5c7b584b3428444989af3fe0",
    "logs": [],
    "blockNumber": 10299433,
    "cumulativeGasUsed": "4179629",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "889158584004053240c8dc2a15a012d3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"badDebtValue\",\"type\":\"uint256\"}],\"name\":\"BadDebtUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"CoreUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"NewTreasurySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"surplusBufferValue\",\"type\":\"uint256\"}],\"name\":\"SurplusBufferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_surplusForGovernance\",\"type\":\"uint64\"}],\"name\":\"SurplusForGovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_surplusManager\",\"type\":\"address\"}],\"name\":\"SurplusManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultManager\",\"type\":\"address\"}],\"name\":\"VaultManagerToggled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_PARAMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultManager\",\"type\":\"address\"}],\"name\":\"addVaultManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"badDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICoreBorrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchSurplusFromAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchSurplusFromFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vaultManagers\",\"type\":\"address[]\"}],\"name\":\"fetchSurplusFromVaultManagers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanModule\",\"outputs\":[{\"internalType\":\"contract IFlashAngle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICoreBorrow\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"contract IAgToken\",\"name\":\"_stablecoin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isGovernorOrGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManager\",\"type\":\"address\"}],\"name\":\"isVaultManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pushSurplus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"governanceAllocation\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToRecover\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultManager\",\"type\":\"address\"}],\"name\":\"removeVaultManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICoreBorrow\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"setCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flashLoanModule\",\"type\":\"address\"}],\"name\":\"setFlashLoanModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_surplusForGovernance\",\"type\":\"uint64\"}],\"name\":\"setSurplusForGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_surplusManager\",\"type\":\"address\"}],\"name\":\"setSurplusManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoin\",\"outputs\":[{\"internalType\":\"contract IAgToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surplusBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surplusForGovernance\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surplusManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateBadDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"badDebtValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultManagerList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultManagerMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Core Team\",\"kind\":\"dev\",\"methods\":{\"addMinter(address)\":{\"params\":{\"minter\":\"Minter address to add\"}},\"addVaultManager(address)\":{\"details\":\"This contract should have already been initialized with a correct treasury addressIt's this function that gives the minter right to the `vaultManager`\",\"params\":{\"vaultManager\":\"`VaultManager` contract to add\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"fetchSurplusFromAll()\":{\"details\":\"This function pools surplus and bad debt across all contracts and then updates the `surplusBuffer` (or the `badDebt` if more losses were made than profits)\",\"returns\":{\"_0\":\"Surplus buffer value at the end of the call\",\"_1\":\"Bad debt value at the end of the call\"}},\"fetchSurplusFromFlashLoan()\":{\"details\":\"This function fails if the `flashLoanModule` has not been initialized yet\",\"returns\":{\"_0\":\"Surplus buffer value at the end of the call\",\"_1\":\"Bad debt value at the end of the call\"}},\"fetchSurplusFromVaultManagers(address[])\":{\"returns\":{\"_0\":\"Surplus buffer value at the end of the call\",\"_1\":\"Bad debt value at the end of the call TODO: could be removed or not?\"}},\"initialize(address,address)\":{\"params\":{\"_core\":\"Address of the `CoreBorrow` contract of the module\",\"_stablecoin\":\"Address of the stablecoin\"}},\"isGovernor(address)\":{\"details\":\"Access control is only kept in the `CoreBorrow` contract\",\"params\":{\"admin\":\"Address to check\"},\"returns\":{\"_0\":\"Whether the address has the governor role\"}},\"isGovernorOrGuardian(address)\":{\"details\":\"Access control is only kept in the `CoreBorrow` contract which means that this function queries the `CoreBorrow` contract\",\"params\":{\"admin\":\"Address to check\"},\"returns\":{\"_0\":\"Whether the address has the guardian or the governor role\"}},\"isVaultManager(address)\":{\"params\":{\"_vaultManager\":\"Address to check\"},\"returns\":{\"_0\":\"Whether the address has been initialized or not\"}},\"pushSurplus()\":{\"details\":\"This function will fail if the `surplusManager` has not been initialized yetIt makes sure to fetch the surplus from all the contracts handled by this treasury to avoid the situation where rewards are still distributed to governance even though a `VaultManager` has made a big lossTypically this function is to be called once every week by a keeper to distribute rewards to veANGLE holders`stablecoin` must be an AgToken and hence `transfer` reverts if the call is not successful\",\"returns\":{\"governanceAllocation\":\"Amount transferred to governance\"}},\"recoverERC20(address,address,uint256)\":{\"details\":\"It is impossible to recover the stablecoin of the protocol if there is some bad debt for itIn this case, the function makes sure to fetch the surplus/bad debt from all the `VaultManager` contracts and from the flash loan moduleIf the token to recover is the stablecoin, tokens recovered are fetched from the surplus and not from the `surplusBuffer`\",\"params\":{\"amountToRecover\":\"Amount of collateral to transfer\",\"to\":\"Address of the contract to send collateral to\",\"tokenAddress\":\"Address of the token to recover\"}},\"removeMinter(address)\":{\"params\":{\"minter\":\"Minter address to remove\"}},\"removeVaultManager(address)\":{\"details\":\"A removed `vaultManager` loses its minter right on the stablecoin\",\"params\":{\"vaultManager\":\"`VaultManager` contract to remove\"}},\"setCore(address)\":{\"details\":\"This function should typically be called on all treasury contracts after the `setCore` function has been called on the `Core` contractOne sanity check that can be performed here is to verify whether at least the governor calling the contract is still a governor in the new core\"},\"setFlashLoanModule(address)\":{\"details\":\"This function removes the minting right to the old flash loan module and grants it to the new module\",\"params\":{\"_flashLoanModule\":\"Reference to the new flash loan module\"}},\"setSurplusForGovernance(uint64)\":{\"details\":\"To pause surplus distribution, governance needs to set a zero value for `surplusForGovernance` which means\",\"params\":{\"_surplusForGovernance\":\"New value of the parameter\"}},\"setSurplusManager(address)\":{\"params\":{\"_surplusManager\":\"New address responsible for handling the surplus\"}},\"setTreasury(address)\":{\"details\":\"This function is basically a way to remove rights to this contract and grant them to a new oneIt could be used to set a new core contract\",\"params\":{\"_treasury\":\"New treasury address for this stablecoin\"}},\"updateBadDebt(uint256)\":{\"details\":\"If the protocol has made a loss and managed to make some profits to recover for this loss (through a program like Olympus Pro), then this function needs to be called`badDebt` is simply reduced here by burning stablecoinsIt is impossible to burn more than the `badDebt` otherwise this function could be used to manipulate the `surplusBuffer` and hence the amount going to governance\",\"params\":{\"amount\":\"Amount to reduce the bad debt of\"},\"returns\":{\"badDebtValue\":\"Value of the bad debt at the end of the call\"}}},\"title\":\"Treasury\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BASE_PARAMS()\":{\"notice\":\"Base used for parameter computation\"},\"addMinter(address)\":{\"notice\":\"Adds a new minter for the stablecoin\"},\"addVaultManager(address)\":{\"notice\":\"Adds a new `vaultManager`\"},\"badDebt()\":{\"notice\":\"Amount of bad debt (unbacked stablecoin) accumulated across all `VaultManager` contracts linked to this stablecoin\"},\"core()\":{\"notice\":\"Reference to the Core contract of the module which handles all AccessControl logic\"},\"fetchSurplusFromAll()\":{\"notice\":\"Fetches the surplus accrued across all the `VaultManager` contracts controlled by this `Treasury` contract as well as from the fees of the `FlashLoan` module\"},\"fetchSurplusFromFlashLoan()\":{\"notice\":\"Fetches the surplus accrued in the flash loan module and updates the `surplusBuffer`\"},\"fetchSurplusFromVaultManagers(address[])\":{\"notice\":\"Fetches surplus a list of vaultManager contracts\"},\"flashLoanModule()\":{\"notice\":\"Flash Loan Module with a minter right on the stablecoin\"},\"initialize(address,address)\":{\"notice\":\"Initializes the treasury contract\"},\"isGovernor(address)\":{\"notice\":\"Checks whether a given address has the  governor role\"},\"isGovernorOrGuardian(address)\":{\"notice\":\"Checks whether a given address has the guardian or the governor role\"},\"isVaultManager(address)\":{\"notice\":\"Checks whether a given address has well been initialized in this contract as a `VaultManager``\"},\"pushSurplus()\":{\"notice\":\"Pushes the surplus buffer to the `surplusManager` contract\"},\"recoverERC20(address,address,uint256)\":{\"notice\":\"Allows to recover any ERC20 token, including the stablecoin handled by this contract, and to send it to a contract\"},\"removeMinter(address)\":{\"notice\":\"Removes a minter from the stablecoin contract\"},\"removeVaultManager(address)\":{\"notice\":\"Removes a `vaultManager`\"},\"setCore(address)\":{\"notice\":\"Sets a new `Core` contract\"},\"setFlashLoanModule(address)\":{\"notice\":\"Sets a new flash loan module for this stablecoin\"},\"setSurplusForGovernance(uint64)\":{\"notice\":\"Sets the `surplusForGovernance` parameter\"},\"setSurplusManager(address)\":{\"notice\":\"Sets the `surplusManager` contract responsible for handling the surplus of the protocol\"},\"setTreasury(address)\":{\"notice\":\"Changes the treasury contract and communicates this change to all `VaultManager` contract\"},\"stablecoin()\":{\"notice\":\"Stablecoin handled by this `treasury` contract\"},\"surplusBuffer()\":{\"notice\":\"Surplus amount accumulated by the contract waiting to be distributed to governance. Technically only a share of this `surplusBuffer` will go to governance. Once a share of the surplus buffer has been given to governance, then this surplus is reset\"},\"surplusForGovernance()\":{\"notice\":\"Share of the `surplusBuffer` distributed to governance (in `BASE_PARAMS`)\"},\"surplusManager()\":{\"notice\":\"Address responsible for handling the surplus made by the treasury\"},\"updateBadDebt(uint256)\":{\"notice\":\"Updates the bad debt of the protocol in case where the protocol has accumulated some revenue from an external source\"},\"vaultManagerList(uint256)\":{\"notice\":\"List of the accepted `VaultManager` of the protocol\"},\"vaultManagerMap(address)\":{\"notice\":\"Maps an address to whether it was initialized as a `VaultManager` contract\"}},\"notice\":\"Treasury of Angle Borrowing Module doing the accounting across all VaultManagers for a given stablecoin\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/treasury/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\",\"keccak256\":\"0x1e88abdf82fcbbf98f97be17ea56c924376350637896bc37366ec9f89b7c2628\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/IAgToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title IAgToken\\n/// @author Angle Core Team\\n/// @notice Interface for the stablecoins `AgToken` contracts\\n/// @dev This interface only contains functions of the `AgToken` contract which are called by other contracts\\n/// of this module or of the first module of the Angle Protocol\\ninterface IAgToken is IERC20Upgradeable {\\n    // ======================= Minter Role Only Functions ===========================\\n\\n    /// @notice Lets the `StableMaster` contract or another whitelisted contract mint agTokens\\n    /// @param account Address to mint to\\n    /// @param amount Amount to mint\\n    /// @dev The contracts allowed to issue agTokens are the `StableMaster` contract, `VaultManager` contracts\\n    /// associated to this stablecoin as well as the flash loan module (if activated) and potentially contracts\\n    /// whitelisted by governance\\n    function mint(address account, uint256 amount) external;\\n\\n    /// @notice Burns `amount` tokens from a `burner` address after being asked to by `sender`\\n    /// @param amount Amount of tokens to burn\\n    /// @param burner Address to burn from\\n    /// @param sender Address which requested the burn from `burner`\\n    /// @dev This method is to be called by a contract with the minter right after being requested\\n    /// to do so by a `sender` address willing to burn tokens from another `burner` address\\n    /// @dev The method checks the allowance between the `sender` and the `burner`\\n    function burnFrom(\\n        uint256 amount,\\n        address burner,\\n        address sender\\n    ) external;\\n\\n    /// @notice Burns `amount` tokens from a `burner` address\\n    /// @param amount Amount of tokens to burn\\n    /// @param burner Address to burn from\\n    /// @dev This method is to be called by a contract with a minter right on the AgToken after being\\n    /// requested to do so by an address willing to burn tokens from its address\\n    function burnSelf(uint256 amount, address burner) external;\\n\\n    // ========================= Treasury Only Functions ===========================\\n\\n    /// @notice Adds a minter in the contract\\n    /// @param minter Minter address to add\\n    /// @dev Zero address checks are performed directly in the `Treasury` contract\\n    function addMinter(address minter) external;\\n\\n    /// @notice Removes a minter from the contract\\n    /// @param minter Minter address to remove\\n    /// @dev This function can also be called by a minter wishing to revoke itself\\n    function removeMinter(address minter) external;\\n\\n    /// @notice Sets a new treasury contract\\n    /// @param _treasury New treasury address\\n    function setTreasury(address _treasury) external;\\n\\n    // ========================= External functions ================================\\n\\n    /// @notice Checks whether an address has the right to mint agTokens\\n    /// @param minter Address for which the minting right should be checked\\n    /// @return Whether the address has the right to mint agTokens or not\\n    function isMinter(address minter) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcd50d86128e457543483981ea6127cb8dac03584b919614352aa89d7e991405c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICoreBorrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\n/// @title ICoreBorrow\\n/// @author Angle Core Team\\n/// @notice Interface for the `CoreBorrow` contract\\n/// @dev This interface only contains functions of the `CoreBorrow` contract which are called by other contracts\\n/// of this module\\ninterface ICoreBorrow {\\n    /// @notice Checks if an address corresponds to a treasury of a stablecoin with a flash loan\\n    /// module initialized on it\\n    /// @param treasury Address to check\\n    /// @return Whether the address has the `FLASHLOANER_TREASURY_ROLE` or not\\n    function isFlashLoanerTreasury(address treasury) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GOVERNOR_ROLE` or not\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor or a guardian of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GUARDIAN_ROLE` or not\\n    /// @dev Governance should make sure when adding a governor to also give this governor the guardian\\n    /// role by calling the `addGovernor` function\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x25b65b3f506ca91745a444502a36f0556585d82d9d60f4bd32fbcaabc12840d4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFlashAngle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IAgToken.sol\\\";\\nimport \\\"./ICoreBorrow.sol\\\";\\n\\n/// @title IFlashAngle\\n/// @author Angle Core Team\\n/// @notice Interface for the `FlashAngle` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module\\ninterface IFlashAngle {\\n    /// @notice Reference to the `CoreBorrow` contract managing the FlashLoan module\\n    function core() external view returns (ICoreBorrow);\\n\\n    /// @notice Sends the fees taken from flash loans to the treasury contract associated to the stablecoin\\n    /// @param stablecoin Stablecoin from which profits should be sent\\n    /// @return balance Amount of profits sent\\n    /// @dev This function can only be called by the treasury contract\\n    function accrueInterestToTreasury(IAgToken stablecoin) external returns (uint256 balance);\\n\\n    /// @notice Adds support for a stablecoin\\n    /// @param _treasury Treasury associated to the stablecoin to add support for\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function addStablecoinSupport(address _treasury) external;\\n\\n    /// @notice Removes support for a stablecoin\\n    /// @param _treasury Treasury associated to the stablecoin to remove support for\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function removeStablecoinSupport(address _treasury) external;\\n\\n    /// @notice Sets a new core contract\\n    /// @param _core Core contract address to set\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function setCore(address _core) external;\\n}\\n\",\"keccak256\":\"0xc17654e512897efe41e3f1173c07dd4676e8c699a72b859d14b473d1e8300e45\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./ITreasury.sol\\\";\\n\\n/// @title IOracle\\n/// @author Angle Core Team\\n/// @notice Interface for the `Oracle` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module\\ninterface IOracle {\\n    /// @notice Reads the rate from the Chainlink circuit\\n    /// @return quoteAmount The current rate between the in-currency and out-currency in the base\\n    /// of the out currency\\n    /// @dev For instance if the out currency is EUR (and hence agEUR), then the base of the returned\\n    /// value is 10**18\\n    function read() external view returns (uint256);\\n\\n    /// @notice Changes the treasury contract\\n    /// @param _treasury Address of the new treasury contract\\n    /// @dev This function can be called by an approved `vaultManager` contract which can call\\n    /// this function after being requested to do so by a `treasury` contract\\n    /// @dev In some situations (like reactor contracts), the `vaultManager` may not directly be linked\\n    /// to the `oracle` contract and as such we may need governors to be able to call this function as well\\n    function setTreasury(address _treasury) external;\\n\\n    /// @notice Reference to the `treasury` contract handling this `VaultManager`\\n    function treasury() external view returns (ITreasury treasury);\\n}\\n\",\"keccak256\":\"0x20dae087817418c90ba2b3cd096cd50c6b57d61e86d4bb794356f88aaeaf9ff1\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IAgToken.sol\\\";\\nimport \\\"./ICoreBorrow.sol\\\";\\nimport \\\"./IFlashAngle.sol\\\";\\n\\n/// @title ITreasury\\n/// @author Angle Core Team\\n/// @notice Interface for the `Treasury` contract\\n/// @dev This interface only contains functions of the `Treasury` which are called by other contracts\\n/// of this module\\ninterface ITreasury {\\n    /// @notice Stablecoin handled by this `treasury` contract\\n    function stablecoin() external view returns (IAgToken);\\n\\n    /// @notice Checks whether a given address has the  governor role\\n    /// @param admin Address to check\\n    /// @return Whether the address has the governor role\\n    /// @dev Access control is only kept in the `CoreBorrow` contract\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether a given address has the guardian or the governor role\\n    /// @param admin Address to check\\n    /// @return Whether the address has the guardian or the governor role\\n    /// @dev Access control is only kept in the `CoreBorrow` contract which means that this function\\n    /// queries the `CoreBorrow` contract\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether a given address has well been initialized in this contract\\n    /// as a `VaultManager``\\n    /// @param _vaultManager Address to check\\n    /// @return Whether the address has been initialized or not\\n    function isVaultManager(address _vaultManager) external view returns (bool);\\n\\n    /// @notice Sets a new flash loan module for this stablecoin\\n    /// @param _flashLoanModule Reference to the new flash loan module\\n    /// @dev This function removes the minting right to the old flash loan module and grants\\n    /// it to the new module\\n    function setFlashLoanModule(address _flashLoanModule) external;\\n}\\n\",\"keccak256\":\"0xced9b7256fcbedc75682037e11ce51fe9116e5604794b8545e00dea0607629cc\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\n// ========================= Key Structs and Enums =============================\\n\\n/// @notice Parameters associated to a given `VaultManager` contract: these all correspond\\n/// to parameters which signification is detailed in the `VaultManagerStorage` file\\nstruct VaultParameters {\\n    uint256 debtCeiling;\\n    uint64 collateralFactor;\\n    uint64 targetHealthFactor;\\n    uint64 borrowFee;\\n    uint64 interestRate;\\n    uint64 liquidationSurcharge;\\n    uint64 maxLiquidationDiscount;\\n    bool whitelistingActivated;\\n    uint256 baseBoost;\\n}\\n\\n/// @notice Data stored to track someone's loan (or equivalently called position)\\nstruct Vault {\\n    // Amount of collateral deposited in the vault\\n    uint256 collateralAmount;\\n    // Normalized value of the debt (that is to say of the stablecoins borrowed)\\n    uint256 normalizedDebt;\\n}\\n\\n/// @notice For a given `vaultID`, this encodes a liquidation opportunity that is to say details about the maximum\\n/// amount that could be repaid by liquidating the position\\n/// @dev All the values are null in the case of a vault which cannot be liquidated under these conditions\\nstruct LiquidationOpportunity {\\n    // Maximum stablecoin amount that can be repaid upon liquidating the vault\\n    uint256 maxStablecoinAmountToRepay;\\n    // Collateral amount given to the person in the case where the maximum amount to repay is given\\n    uint256 maxCollateralAmountGiven;\\n    // Threshold value of stablecoin amount to repay: it is ok for a liquidator to repay below threshold,\\n    // but if this threshold is non null and the liquidator wants to repay more than threshold, it should repay\\n    // the max stablecoin amount given in this vault\\n    uint256 thresholdRepayAmount;\\n    // Discount proposed to the liquidator on the collateral\\n    uint256 discount;\\n    // Amount of debt in the vault\\n    uint256 currentDebt;\\n}\\n\\n/// @notice Data stored during a liquidation process to keep in memory what's due to a liquidator and some\\n/// essential data for vaults being liquidated\\nstruct LiquidatorData {\\n    // Current amount of stablecoins the liquidator should give to the contract\\n    uint256 stablecoinAmountToReceive;\\n    // Current amount of collateral the contract should give to the liquidator\\n    uint256 collateralAmountToGive;\\n    // Bad debt accrued across the liquidation process\\n    uint256 badDebtFromLiquidation;\\n    // Oracle value (in stablecoin base) at the time of the liquidation\\n    uint256 oracleValue;\\n    // Value of the interestRateAccumulator at the time of the call\\n    uint256 newInterestRateAccumulator;\\n}\\n\\n/// @notice Data to track during a series of action the amount to give or receive in stablecoins and collateral\\n/// to the caller or associated addresses\\nstruct PaymentData {\\n    // Stablecoin amount the contract should give\\n    uint256 stablecoinAmountToGive;\\n    // Stablecoin amount owed to the contract\\n    uint256 stablecoinAmountToReceive;\\n    // Collateral amount the contract should give\\n    uint256 collateralAmountToGive;\\n    // Collateral amount owed to the contract\\n    uint256 collateralAmountToReceive;\\n}\\n\\n/// @notice Actions possible when composing calls to the different entry functions proposed\\nenum ActionType {\\n    createVault,\\n    closeVault,\\n    addCollateral,\\n    removeCollateral,\\n    repayDebt,\\n    borrow,\\n    getDebtIn,\\n    permit\\n}\\n\\n// ========================= Interfaces =============================\\n\\n/// @title IVaultManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the `VaultManager` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module (without getters)\\ninterface IVaultManagerFunctions {\\n    /// @notice Accrues interest accumulated across all vaults to the surplus and sends the surplus to the treasury\\n    /// @return surplusValue Value of the surplus communicated to the `Treasury`\\n    /// @return badDebtValue Value of the bad debt communicated to the `Treasury`\\n    /// @dev `surplus` and `badDebt` should be reset to 0 once their current value have been given to the `treasury` contract\\n    function accrueInterestToTreasury() external returns (uint256 surplusValue, uint256 badDebtValue);\\n\\n    /// @notice Removes debt from a vault after being requested to do so by another `vaultManager` contract\\n    /// @param vaultID ID of the vault to remove debt from\\n    /// @param amountStablecoins Amount of stablecoins to remove from the debt: this amount is to be converted to an\\n    /// internal debt amount\\n    /// @param senderBorrowFee Borrowing fees from the contract which requested this: this is to make sure that people are not\\n    /// arbitraging difference in minting fees\\n    function getDebtOut(\\n        uint256 vaultID,\\n        uint256 amountStablecoins,\\n        uint256 senderBorrowFee\\n    ) external;\\n\\n    /// @notice Gets the current debt of a vault\\n    /// @param vaultID ID of the vault to check\\n    /// @return Debt of the vault\\n    function getVaultDebt(uint256 vaultID) external view returns (uint256);\\n\\n    /// @notice Sets the treasury contract\\n    /// @param _treasury New treasury contract\\n    /// @dev All required checks when setting up a treasury contract are performed in the contract\\n    /// calling this function\\n    function setTreasury(address _treasury) external;\\n\\n    /// @notice Creates a vault\\n    /// @param toVault Address for which the va\\n    /// @return vaultID ID of the vault created\\n    /// @dev This function just creates the vault without doing any collateral or\\n    function createVault(address toVault) external returns (uint256);\\n\\n    /// @notice Allows composability between calls to the different entry points of this module. Any user calling\\n    /// this function can perform any of the allowed actions in the order of their choice\\n    /// @param actions Set of actions to perform\\n    /// @param datas Data to be decoded for each action: it can include like the `vaultID` or the\\n    /// @param from Address from which stablecoins will be taken if one action includes burning stablecoins. This address\\n    /// should either be the `msg.sender` or be approved by the latter\\n    /// @param to Address to which stablecoins and/or collateral will be sent in case of\\n    /// @return paymentData Struct containing the final transfers executed\\n    /// @dev This function is optimized to reduce gas cost due to payment from or to the user and that expensive calls\\n    /// or computations (like `oracleValue`) are done only once\\n    function angle(\\n        ActionType[] memory actions,\\n        bytes[] memory datas,\\n        address from,\\n        address to\\n    ) external payable returns (PaymentData memory paymentData);\\n\\n    /// @notice Allows composability between calls to the different entry points of this module. Any user calling\\n    /// this function can perform any of the allowed actions in the order of their choice\\n    /// @param actions Set of actions to perform\\n    /// @param datas Data to be decoded for each action: it can include like the `vaultID` or the\\n    /// @param from Address from which stablecoins will be taken if one action includes burning stablecoins. This address\\n    /// should either be the `msg.sender` or be approved by the latter\\n    /// @param to Address to which stablecoins and/or collateral will be sent in case of\\n    /// @param who Address of the contract to handle in case of repayment of stablecoins from received collateral\\n    /// @param repayData Data to pass to the repayment contract in case of\\n    /// @return paymentData Struct containing the final transfers executed\\n    /// @dev This function is optimized to reduce gas cost due to payment from or to the user and that expensive calls\\n    /// or computations (like `oracleValue`) are done only once\\n    function angle(\\n        ActionType[] memory actions,\\n        bytes[] memory datas,\\n        address from,\\n        address to,\\n        address who,\\n        bytes memory repayData\\n    ) external payable returns (PaymentData memory paymentData);\\n\\n    /// @notice Initializes the `VaultManager` contract\\n    /// @param _treasury Treasury address handling the contract\\n    /// @param _collateral Collateral supported by this contract\\n    /// @param _oracle Oracle contract used\\n    /// @param _symbol Symbol used to define the `VaultManager` name and symbol\\n    /// @dev The parameters and the oracle are the only elements which could be modified once the\\n    /// contract has been initialized\\n    /// @dev For the contract to be fully initialized, governance needs to set the parameters for the liquidation\\n    /// boost\\n    function initialize(\\n        ITreasury _treasury,\\n        IERC20 _collateral,\\n        IOracle _oracle,\\n        VaultParameters calldata params,\\n        string memory _symbol\\n    ) external;\\n}\\n\\n/// @title IVaultManagerStorage\\n/// @author Angle Core Team\\n/// @notice Interface for the `VaultManager` contract\\n/// @dev This interface contains getters of the contract's public variables used by other contracts\\n/// of this module\\ninterface IVaultManagerStorage {\\n    /// @notice Minimum amount of debt a vault can have\\n    function dust() external view returns (uint256);\\n\\n    /// @notice Encodes the maximum ratio stablecoin/collateral a vault can have before being liquidated. It's what\\n    /// determines the minimum collateral ratio of a position\\n    function collateralFactor() external view returns (uint64);\\n\\n    /// @notice Stablecoin handled by this contract. Another `VaultManager` contract could have\\n    /// the same rights as this `VaultManager` on the stablecoin contract\\n    function stablecoin() external view returns (IAgToken);\\n\\n    /// @notice Reference to the `treasury` contract handling this `VaultManager`\\n    function treasury() external view returns (ITreasury);\\n\\n    /// @notice Oracle contract to get access to the price of the collateral with respect to the stablecoin\\n    function oracle() external view returns (IOracle);\\n\\n    /// @notice The `interestAccumulator` variable keeps track of the interest that should accrue to the protocol.\\n    /// The stored value is not necessarily the true value: this one is recomputed every time an action takes place\\n    /// within the protocol\\n    function interestAccumulator() external view returns (uint256);\\n\\n    /// @notice Reference to the collateral handled by this `VaultManager`\\n    function collateral() external view returns (IERC20);\\n\\n    /// @notice Total normalized amount of stablecoins borrowed\\n    function totalNormalizedDebt() external view returns (uint256);\\n\\n    /// @notice Maps a `vaultID` to its data (namely collateral amount and normalized debt)\\n    function vaultData(uint256 vaultID) external view returns (uint256 collateralAmount, uint256 normalizedDebt);\\n}\\n\\n/// @title IVaultManager\\n/// @author Angle Core Team\\n/// @notice Interface for the `VaultManager` contract\\ninterface IVaultManager is IVaultManagerFunctions, IVaultManagerStorage, IERC721Metadata {\\n\\n}\\n\",\"keccak256\":\"0x8fe65f8e585b103ab7c8619c78748371f340125d163c3dbcf05750177e831a92\",\"license\":\"GPL-3.0\"},\"contracts/treasury/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/IAgToken.sol\\\";\\nimport \\\"../interfaces/ICoreBorrow.sol\\\";\\nimport \\\"../interfaces/IFlashAngle.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/IVaultManager.sol\\\";\\n\\n/// @title Treasury\\n/// @author Angle Core Team\\n/// @notice Treasury of Angle Borrowing Module doing the accounting across all VaultManagers for\\n/// a given stablecoin\\ncontract Treasury is ITreasury, Initializable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Base used for parameter computation\\n    uint256 public constant BASE_PARAMS = 10**9;\\n\\n    // =============================== References ==================================\\n\\n    /// @notice Reference to the Core contract of the module which handles all AccessControl logic\\n    ICoreBorrow public core;\\n    /// @notice Flash Loan Module with a minter right on the stablecoin\\n    IFlashAngle public flashLoanModule;\\n    /// @inheritdoc ITreasury\\n    IAgToken public stablecoin;\\n    /// @notice Address responsible for handling the surplus made by the treasury\\n    address public surplusManager;\\n    /// @notice List of the accepted `VaultManager` of the protocol\\n    address[] public vaultManagerList;\\n    /// @notice Maps an address to whether it was initialized as a `VaultManager` contract\\n    mapping(address => bool) public vaultManagerMap;\\n\\n    // =============================== Variables ===================================\\n\\n    /// @notice Amount of bad debt (unbacked stablecoin) accumulated across all `VaultManager` contracts\\n    /// linked to this stablecoin\\n    uint256 public badDebt;\\n    /// @notice Surplus amount accumulated by the contract waiting to be distributed to governance. Technically\\n    /// only a share of this `surplusBuffer` will go to governance. Once a share of the surplus buffer has been\\n    /// given to governance, then this surplus is reset\\n    uint256 public surplusBuffer;\\n\\n    // =============================== Parameter ===================================\\n\\n    /// @notice Share of the `surplusBuffer` distributed to governance (in `BASE_PARAMS`)\\n    uint64 public surplusForGovernance;\\n\\n    // =============================== Events ======================================\\n\\n    event BadDebtUpdated(uint256 badDebtValue);\\n    event CoreUpdated(address indexed _core);\\n    event NewTreasurySet(address indexed _treasury);\\n    event Recovered(address indexed token, address indexed to, uint256 amount);\\n    event SurplusBufferUpdated(uint256 surplusBufferValue);\\n    event SurplusForGovernanceUpdated(uint64 _surplusForGovernance);\\n    event SurplusManagerUpdated(address indexed _surplusManager);\\n    event VaultManagerToggled(address indexed vaultManager);\\n\\n    // =============================== Modifier ====================================\\n\\n    /// @notice Checks whether the `msg.sender` has the governor role or not\\n    modifier onlyGovernor() {\\n        require(core.isGovernor(msg.sender), \\\"1\\\");\\n        _;\\n    }\\n\\n    /// @notice Initializes the treasury contract\\n    /// @param _core Address of the `CoreBorrow` contract of the module\\n    /// @param _stablecoin Address of the stablecoin\\n    function initialize(ICoreBorrow _core, IAgToken _stablecoin) public initializer {\\n        require(address(_stablecoin) != address(0) && address(_core) != address(0), \\\"O\\\");\\n        core = _core;\\n        stablecoin = _stablecoin;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    // ========================= View Functions ====================================\\n\\n    /// @inheritdoc ITreasury\\n    function isGovernor(address admin) external view returns (bool) {\\n        return core.isGovernor(admin);\\n    }\\n\\n    /// @inheritdoc ITreasury\\n    function isGovernorOrGuardian(address admin) external view returns (bool) {\\n        return core.isGovernorOrGuardian(admin);\\n    }\\n\\n    /// @inheritdoc ITreasury\\n    function isVaultManager(address _vaultManager) external view returns (bool) {\\n        return vaultManagerMap[_vaultManager];\\n    }\\n\\n    // ============= External Permissionless Functions =============================\\n\\n    /// @notice Fetches the surplus accrued across all the `VaultManager` contracts controlled by this\\n    /// `Treasury` contract as well as from the fees of the `FlashLoan` module\\n    /// @return Surplus buffer value at the end of the call\\n    /// @return Bad debt value at the end of the call\\n    /// @dev This function pools surplus and bad debt across all contracts and then updates the `surplusBuffer`\\n    /// (or the `badDebt` if more losses were made than profits)\\n    function fetchSurplusFromAll() external returns (uint256, uint256) {\\n        return _fetchSurplusFromAll();\\n    }\\n\\n    /// @notice Fetches the surplus accrued in the flash loan module and updates the `surplusBuffer`\\n    /// @return Surplus buffer value at the end of the call\\n    /// @return Bad debt value at the end of the call\\n    /// @dev This function fails if the `flashLoanModule` has not been initialized yet\\n    function fetchSurplusFromFlashLoan() external returns (uint256, uint256) {\\n        uint256 surplusBufferValue = surplusBuffer + flashLoanModule.accrueInterestToTreasury(stablecoin);\\n        return _updateSurplusBadDebt(surplusBufferValue, badDebt);\\n    }\\n\\n    /// @notice Fetches surplus a list of vaultManager contracts\\n    /// @return Surplus buffer value at the end of the call\\n    /// @return Bad debt value at the end of the call\\n    /// TODO: could be removed or not?\\n    function fetchSurplusFromVaultManagers(address[] memory vaultManagers) external returns (uint256, uint256) {\\n        (uint256 surplusBufferValue, uint256 badDebtValue) = _fetchSurplusFromList(vaultManagers);\\n        return _updateSurplusBadDebt(surplusBufferValue, badDebtValue);\\n    }\\n\\n    /// @notice Pushes the surplus buffer to the `surplusManager` contract\\n    /// @return governanceAllocation Amount transferred to governance\\n    /// @dev This function will fail if the `surplusManager` has not been initialized yet\\n    /// @dev It makes sure to fetch the surplus from all the contracts handled by this treasury to avoid\\n    /// the situation where rewards are still distributed to governance even though a `VaultManager` has made\\n    /// a big loss\\n    /// @dev Typically this function is to be called once every week by a keeper to distribute rewards to veANGLE\\n    /// holders\\n    /// @dev `stablecoin` must be an AgToken and hence `transfer` reverts if the call is not successful\\n    function pushSurplus() external returns (uint256 governanceAllocation) {\\n        address _surplusManager = surplusManager;\\n        require(_surplusManager != address(0), \\\"0\\\");\\n        (uint256 surplusBufferValue, ) = _fetchSurplusFromAll();\\n        surplusBuffer = 0;\\n        emit SurplusBufferUpdated(0);\\n        governanceAllocation = (surplusForGovernance * surplusBufferValue) / BASE_PARAMS;\\n        stablecoin.transfer(_surplusManager, governanceAllocation);\\n    }\\n\\n    /// @notice Updates the bad debt of the protocol in case where the protocol has accumulated some revenue\\n    /// from an external source\\n    /// @param amount Amount to reduce the bad debt of\\n    /// @return badDebtValue Value of the bad debt at the end of the call\\n    /// @dev If the protocol has made a loss and managed to make some profits to recover for this loss (through\\n    /// a program like Olympus Pro), then this function needs to be called\\n    /// @dev `badDebt` is simply reduced here by burning stablecoins\\n    /// @dev It is impossible to burn more than the `badDebt` otherwise this function could be used to manipulate\\n    /// the `surplusBuffer` and hence the amount going to governance\\n    function updateBadDebt(uint256 amount) external returns (uint256 badDebtValue) {\\n        badDebtValue = badDebt;\\n        require(amount <= badDebtValue, \\\"4\\\");\\n        stablecoin.burnSelf(amount, address(this));\\n        badDebtValue -= amount;\\n        badDebt = badDebtValue;\\n        emit BadDebtUpdated(badDebtValue);\\n    }\\n\\n    // ==================== Internal Utility Functions =============================\\n\\n    /// @notice Internal version of the `fetchSurplusFromAll` function\\n    function _fetchSurplusFromAll() internal returns (uint256 surplusBufferValue, uint256 badDebtValue) {\\n        (surplusBufferValue, badDebtValue) = _fetchSurplusFromList(vaultManagerList);\\n        // It will fail anyway if the `flashLoanModule` is the zero address\\n        if (address(flashLoanModule) != address(0))\\n            surplusBufferValue += flashLoanModule.accrueInterestToTreasury(stablecoin);\\n        (surplusBufferValue, badDebtValue) = _updateSurplusBadDebt(surplusBufferValue, badDebtValue);\\n    }\\n\\n    /// @notice Fetches the surplus from a list of `VaultManager` addresses without modifying the\\n    /// `surplusBuffer` and `badDebtValue`\\n    /// @return surplusBufferValue Value the `surplusBuffer` should have after the call if it was updated\\n    /// @return badDebtValue Value the `badDebt` should have after the call if it was updated\\n    /// @dev This internal function is never to be called alone, and should always be called in conjunction\\n    /// with the `_updateSurplusBadDebt` function\\n    function _fetchSurplusFromList(address[] memory vaultManagers)\\n        internal\\n        returns (uint256 surplusBufferValue, uint256 badDebtValue)\\n    {\\n        badDebtValue = badDebt;\\n        surplusBufferValue = surplusBuffer;\\n        uint256 newSurplus;\\n        uint256 newBadDebt;\\n        for (uint256 i = 0; i < vaultManagers.length; i++) {\\n            (newSurplus, newBadDebt) = IVaultManager(vaultManagers[i]).accrueInterestToTreasury();\\n            surplusBufferValue += newSurplus;\\n            badDebtValue += newBadDebt;\\n        }\\n    }\\n\\n    /// @notice Updates the `surplusBuffer` and the `badDebt` from updated values after calling the flash loan module\\n    /// and/or a list of `VaultManager` contracts\\n    /// @param surplusBufferValue Value of the surplus buffer after the calls to the different modules\\n    /// @param badDebtValue Value of the bad debt after the calls to the different modules\\n    /// @return Value of the `surplusBuffer` corrected from the `badDebt``\\n    /// @return Value of the `badDebt` corrected from the `surplusBuffer` and from the surplus the treasury had accumulated\\n    /// previously\\n    /// @dev When calling this function, it is possible that there is a positive `surplusBufferValue` and `badDebtValue`,\\n    /// this function tries to reconcile both values and makes sure that we either have surplus or bad debt but not both\\n    /// at the same time\\n    function _updateSurplusBadDebt(uint256 surplusBufferValue, uint256 badDebtValue)\\n        internal\\n        returns (uint256, uint256)\\n    {\\n        if (badDebtValue > 0) {\\n            // If we have bad debt we need to burn stablecoins that accrued to the protocol\\n            // We still need to make sure that we're not burning too much or as much as we can if the debt is big\\n            uint256 balance = stablecoin.balanceOf(address(this));\\n            if (balance < badDebtValue) {\\n                stablecoin.burnSelf(balance, address(this));\\n                surplusBufferValue = 0;\\n                badDebtValue -= balance;\\n            } else {\\n                stablecoin.burnSelf(badDebtValue, address(this));\\n                surplusBufferValue = badDebtValue >= surplusBufferValue ? 0 : surplusBufferValue - badDebtValue;\\n                badDebtValue = 0;\\n            }\\n        }\\n        surplusBuffer = surplusBufferValue;\\n        badDebt = badDebtValue;\\n        emit SurplusBufferUpdated(surplusBufferValue);\\n        emit BadDebtUpdated(badDebtValue);\\n        return (surplusBufferValue, badDebtValue);\\n    }\\n\\n    // ============================ Governor Functions =============================\\n\\n    /// @notice Adds a new minter for the stablecoin\\n    /// @param minter Minter address to add\\n    function addMinter(address minter) external onlyGovernor {\\n        require(minter != address(0), \\\"0\\\");\\n        stablecoin.addMinter(minter);\\n    }\\n\\n    /// @notice Adds a new `vaultManager`\\n    /// @param vaultManager `VaultManager` contract to add\\n    /// @dev This contract should have already been initialized with a correct treasury address\\n    /// @dev It's this function that gives the minter right to the `vaultManager`\\n    function addVaultManager(address vaultManager) external onlyGovernor {\\n        require(!vaultManagerMap[vaultManager], \\\"5\\\");\\n        require(address(IVaultManager(vaultManager).treasury()) == address(this), \\\"6\\\");\\n        vaultManagerMap[vaultManager] = true;\\n        vaultManagerList.push(vaultManager);\\n        emit VaultManagerToggled(vaultManager);\\n        stablecoin.addMinter(vaultManager);\\n    }\\n\\n    /// @notice Removes a minter from the stablecoin contract\\n    /// @param minter Minter address to remove\\n    function removeMinter(address minter) external onlyGovernor {\\n        // To remove the minter role to a `vaultManager` you have to go through the `removeVaultManager` function\\n        require(!vaultManagerMap[minter], \\\"36\\\");\\n        stablecoin.removeMinter(minter);\\n    }\\n\\n    /// @notice Removes a `vaultManager`\\n    /// @param vaultManager `VaultManager` contract to remove\\n    /// @dev A removed `vaultManager` loses its minter right on the stablecoin\\n    function removeVaultManager(address vaultManager) external onlyGovernor {\\n        require(vaultManagerMap[vaultManager], \\\"3\\\");\\n        delete vaultManagerMap[vaultManager];\\n        uint256 vaultManagerListLength = vaultManagerList.length;\\n        for (uint256 i = 0; i < vaultManagerListLength - 1; i++) {\\n            if (vaultManagerList[i] == vaultManager) {\\n                vaultManagerList[i] = vaultManagerList[vaultManagerListLength - 1];\\n                break;\\n            }\\n        }\\n        vaultManagerList.pop();\\n        emit VaultManagerToggled(vaultManager);\\n        stablecoin.removeMinter(vaultManager);\\n    }\\n\\n    /// @notice Allows to recover any ERC20 token, including the stablecoin handled by this contract, and to send it\\n    /// to a contract\\n    /// @param tokenAddress Address of the token to recover\\n    /// @param to Address of the contract to send collateral to\\n    /// @param amountToRecover Amount of collateral to transfer\\n    /// @dev It is impossible to recover the stablecoin of the protocol if there is some bad debt for it\\n    /// @dev In this case, the function makes sure to fetch the surplus/bad debt from all the `VaultManager` contracts\\n    /// and from the flash loan module\\n    /// @dev If the token to recover is the stablecoin, tokens recovered are fetched\\n    /// from the surplus and not from the `surplusBuffer`\\n    function recoverERC20(\\n        address tokenAddress,\\n        address to,\\n        uint256 amountToRecover\\n    ) external onlyGovernor {\\n        // Cannot recover stablecoin if badDebt or tap into the surplus buffer\\n        if (tokenAddress == address(stablecoin)) {\\n            _fetchSurplusFromAll();\\n            // If balance is non zero then this means, after the call to `fetchSurplusFromAll` that\\n            // bad debt is necessarily null\\n            uint256 balance = stablecoin.balanceOf(address(this));\\n            require(amountToRecover + surplusBuffer <= balance, \\\"4\\\");\\n            stablecoin.transfer(to, amountToRecover);\\n        } else {\\n            IERC20(tokenAddress).safeTransfer(to, amountToRecover);\\n        }\\n        emit Recovered(tokenAddress, to, amountToRecover);\\n    }\\n\\n    /// @notice Changes the treasury contract and communicates this change to all `VaultManager` contract\\n    /// @param _treasury New treasury address for this stablecoin\\n    /// @dev This function is basically a way to remove rights to this contract and grant them to a new one\\n    /// @dev It could be used to set a new core contract\\n    function setTreasury(address _treasury) external onlyGovernor {\\n        require(ITreasury(_treasury).stablecoin() == stablecoin, \\\"6\\\");\\n        // Flash loan role should be removed before calling this function\\n        require(!core.isFlashLoanerTreasury(address(this)), \\\"7\\\");\\n        emit NewTreasurySet(_treasury);\\n        for (uint256 i = 0; i < vaultManagerList.length; i++) {\\n            IVaultManager(vaultManagerList[i]).setTreasury(_treasury);\\n        }\\n        // A `TreasuryUpdated` event is triggered in the stablecoin\\n        stablecoin.setTreasury(_treasury);\\n    }\\n\\n    /// @notice Sets the `surplusForGovernance` parameter\\n    /// @param _surplusForGovernance New value of the parameter\\n    /// @dev To pause surplus distribution, governance needs to set a zero value for `surplusForGovernance`\\n    /// which means\\n    function setSurplusForGovernance(uint64 _surplusForGovernance) external onlyGovernor {\\n        require(_surplusForGovernance <= BASE_PARAMS, \\\"9\\\");\\n        surplusForGovernance = _surplusForGovernance;\\n        emit SurplusForGovernanceUpdated(_surplusForGovernance);\\n    }\\n\\n    /// @notice Sets the `surplusManager` contract responsible for handling the surplus of the\\n    /// protocol\\n    /// @param _surplusManager New address responsible for handling the surplus\\n    function setSurplusManager(address _surplusManager) external onlyGovernor {\\n        require(_surplusManager != address(0), \\\"0\\\");\\n        surplusManager = _surplusManager;\\n        emit SurplusManagerUpdated(_surplusManager);\\n    }\\n\\n    /// @notice Sets a new `Core` contract\\n    /// @dev This function should typically be called on all treasury contracts after the `setCore`\\n    /// function has been called on the `Core` contract\\n    /// @dev One sanity check that can be performed here is to verify whether at least the governor\\n    /// calling the contract is still a governor in the new core\\n    function setCore(ICoreBorrow _core) external onlyGovernor {\\n        require(_core.isGovernor(msg.sender), \\\"1\\\");\\n        core = ICoreBorrow(_core);\\n        emit CoreUpdated(address(_core));\\n    }\\n\\n    /// @inheritdoc ITreasury\\n    function setFlashLoanModule(address _flashLoanModule) external {\\n        require(msg.sender == address(core), \\\"10\\\");\\n        address oldFlashLoanModule = address(flashLoanModule);\\n        if (oldFlashLoanModule != address(0)) {\\n            stablecoin.removeMinter(oldFlashLoanModule);\\n        }\\n        // We may want to cancel the module\\n        if (_flashLoanModule != address(0)) {\\n            stablecoin.addMinter(_flashLoanModule);\\n        }\\n        flashLoanModule = IFlashAngle(_flashLoanModule);\\n    }\\n}\\n\",\"keccak256\":\"0xe9615d63dbd0f1208b57ff04d108e76b951162572f58825d12fb2609b0b09b73\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b620019701760201c565b15905090565b3b151590565b6124cb80620001126000396000f3fe608060405234801561001057600080fd5b506004361061015f5760003560e01c80630d45456d146101645780631171bda914610186578063137f3b0a1461019b57806319106b67146101bc57806321c29f92146101c45780632a608d5b146101d75780632f15caed146101e05780633092afd514610200578063485cc95514610213578063521d4de9146102265780635290e6a6146102495780635c77f2851461025c5780635e654522146102645780635f80fcad14610277578063676a553e1461028a57806380009630146102b657806389110235146102c9578063959d5a01146102ec578063983b2d561461030c5780639f48118f1461031f578063a94624101461032a578063bbcac5571461033d578063cf87300314610346578063df48681914610359578063e43581b81461036c578063e9cbd8221461037f578063f0f4426014610392578063f2f4eb26146103a5578063f5ec243c146103be575b600080fd5b61016c6103d1565b604080519283526020830191909152015b60405180910390f35b610199610194366004611ff6565b6103e4565b005b6101ae6101a9366004612037565b610622565b60405190815260200161017d565b6101ae6106e3565b6101996101d2366004612050565b6107e8565b6101ae60075481565b6008546101f3906001600160401b031681565b60405161017d919061206d565b61019961020e366004612050565b610937565b610199610221366004612081565b610a7c565b610239610234366004612050565b610bc8565b604051901515815260200161017d565b610199610257366004612050565b610c45565b61016c610edc565b6101996102723660046120ba565b610f7e565b610199610285366004612050565b6110a7565b610239610298366004612050565b6001600160a01b031660009081526005602052604090205460ff1690565b6101996102c4366004612050565b6112bf565b6102396102d7366004612050565b60056020526000908152604090205460ff1681565b6001546102ff906001600160a01b031681565b60405161017d91906120e3565b61019961031a366004612050565b61142c565b6101ae633b9aca0081565b610199610338366004612050565b611514565b6101ae60065481565b61016c61035436600461210d565b611616565b6102ff610367366004612037565b61163e565b61023961037a366004612050565b611668565b6002546102ff906001600160a01b031681565b6101996103a0366004612050565b61169e565b6000546102ff906201000090046001600160a01b031681565b6003546102ff906001600160a01b031681565b6000806103dc611976565b915091509091565b600054604051631c86b03760e31b8152620100009091046001600160a01b03169063e43581b8906104199033906004016120e3565b602060405180830381865afa158015610436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045a91906121d1565b61047f5760405162461bcd60e51b8152600401610476906121f3565b60405180910390fd5b6002546001600160a01b03848116911614156105bc5761049d611976565b50506002546040516370a0823160e01b81526000916001600160a01b0316906370a08231906104d09030906004016120e3565b602060405180830381865afa1580156104ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610511919061220e565b90508060075483610522919061223d565b11156105405760405162461bcd60e51b815260040161047690612255565b60025460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906105729086908690600401612270565b6020604051808303816000875af1158015610591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b591906121d1565b50506105d0565b6105d06001600160a01b0384168383611a89565b816001600160a01b0316836001600160a01b03167ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b6488360405161061591815260200190565b60405180910390a3505050565b600654808211156106455760405162461bcd60e51b815260040161047690612255565b6002546040516315a38ec760e11b81526001600160a01b0390911690632b471d8e906106779085903090600401612289565b600060405180830381600087803b15801561069157600080fd5b505af11580156106a5573d6000803e3d6000fd5b5050505081816106b591906122a0565b60068190556040518181529091506000805160206124768339815191529060200160405180910390a1919050565b6003546000906001600160a01b03168061070f5760405162461bcd60e51b8152600401610476906122b7565b6000610719611976565b50600060078190556040519081529091506000805160206124368339815191529060200160405180910390a1600854633b9aca00906107629083906001600160401b03166122d2565b61076c91906122f1565b60025460405163a9059cbb60e01b81529194506001600160a01b03169063a9059cbb9061079f9085908790600401612270565b6020604051808303816000875af11580156107be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e291906121d1565b50505090565b6000546201000090046001600160a01b0316331461082d5760405162461bcd60e51b8152602060048201526002602482015261031360f41b6044820152606401610476565b6001546001600160a01b031680156108a257600254604051633092afd560e01b81526001600160a01b0390911690633092afd59061086f9084906004016120e3565b600060405180830381600087803b15801561088957600080fd5b505af115801561089d573d6000803e3d6000fd5b505050505b6001600160a01b0382161561091457600254604051634c1d96ab60e11b81526001600160a01b039091169063983b2d56906108e19085906004016120e3565b600060405180830381600087803b1580156108fb57600080fd5b505af115801561090f573d6000803e3d6000fd5b505050505b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b600054604051631c86b03760e31b8152620100009091046001600160a01b03169063e43581b89061096c9033906004016120e3565b602060405180830381865afa158015610989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ad91906121d1565b6109c95760405162461bcd60e51b8152600401610476906121f3565b6001600160a01b03811660009081526005602052604090205460ff1615610a175760405162461bcd60e51b8152602060048201526002602482015261199b60f11b6044820152606401610476565b600254604051633092afd560e01b81526001600160a01b0390911690633092afd590610a479084906004016120e3565b600060405180830381600087803b158015610a6157600080fd5b505af1158015610a75573d6000803e3d6000fd5b5050505050565b600054610100900460ff16610a975760005460ff1615610a9b565b303b155b610afe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610476565b600054610100900460ff16158015610b20576000805461ffff19166101011790555b6001600160a01b03821615801590610b4057506001600160a01b03831615155b610b705760405162461bcd60e51b81526020600482015260016024820152604f60f81b6044820152606401610476565b6000805462010000600160b01b031916620100006001600160a01b038681169190910291909117909155600280546001600160a01b0319169184169190911790558015610bc3576000805461ff00191690555b505050565b6000805460405163521d4de960e01b8152620100009091046001600160a01b03169063521d4de990610bfe9085906004016120e3565b602060405180830381865afa158015610c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3f91906121d1565b92915050565b600054604051631c86b03760e31b8152620100009091046001600160a01b03169063e43581b890610c7a9033906004016120e3565b602060405180830381865afa158015610c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbb91906121d1565b610cd75760405162461bcd60e51b8152600401610476906121f3565b6001600160a01b03811660009081526005602052604090205460ff16610d235760405162461bcd60e51b81526020600482015260016024820152603360f81b6044820152606401610476565b6001600160a01b0381166000908152600560205260408120805460ff19169055600454905b610d536001836122a0565b811015610e2057826001600160a01b031660048281548110610d7757610d77612313565b6000918252602090912001546001600160a01b03161415610e0e576004610d9f6001846122a0565b81548110610daf57610daf612313565b600091825260209091200154600480546001600160a01b039092169183908110610ddb57610ddb612313565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610e20565b80610e1881612329565b915050610d48565b506004805480610e3257610e32612344565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b0384169160008051602061245683398151915291a2600254604051633092afd560e01b81526001600160a01b0390911690633092afd590610ea69085906004016120e3565b600060405180830381600087803b158015610ec057600080fd5b505af1158015610ed4573d6000803e3d6000fd5b505050505050565b6001546002546040516396337bd560e01b8152600092839283926001600160a01b03928316926396337bd592610f17929116906004016120e3565b6020604051808303816000875af1158015610f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5a919061220e565b600754610f67919061223d565b9050610f7581600654611adf565b92509250509091565b600054604051631c86b03760e31b8152620100009091046001600160a01b03169063e43581b890610fb39033906004016120e3565b602060405180830381865afa158015610fd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff491906121d1565b6110105760405162461bcd60e51b8152600401610476906121f3565b633b9aca00816001600160401b031611156110515760405162461bcd60e51b81526020600482015260016024820152603960f81b6044820152606401610476565b600880546001600160401b0319166001600160401b0383161790556040517fe4c9afce87963212e0d33e6b4b43fee7103b8c57228620e450e5064b95ee08ec9061109c90839061206d565b60405180910390a150565b600054604051631c86b03760e31b8152620100009091046001600160a01b03169063e43581b8906110dc9033906004016120e3565b602060405180830381865afa1580156110f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111d91906121d1565b6111395760405162461bcd60e51b8152600401610476906121f3565b6001600160a01b03811660009081526005602052604090205460ff16156111865760405162461bcd60e51b81526020600482015260016024820152603560f81b6044820152606401610476565b306001600160a01b0316816001600160a01b03166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f2919061235a565b6001600160a01b0316146112185760405162461bcd60e51b815260040161047690612377565b6001600160a01b038116600081815260056020526040808220805460ff1916600190811790915560048054918201815583527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b03191684179055516000805160206124568339815191529190a2600254604051634c1d96ab60e11b81526001600160a01b039091169063983b2d5690610a479084906004016120e3565b600054604051631c86b03760e31b8152620100009091046001600160a01b03169063e43581b8906112f49033906004016120e3565b602060405180830381865afa158015611311573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133591906121d1565b6113515760405162461bcd60e51b8152600401610476906121f3565b604051631c86b03760e31b81526001600160a01b0382169063e43581b89061137d9033906004016120e3565b602060405180830381865afa15801561139a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113be91906121d1565b6113da5760405162461bcd60e51b8152600401610476906121f3565b6000805462010000600160b01b031916620100006001600160a01b03841690810291909117825560405190917f0c9c0f914e121785e2cd2269d6698bc11f59a50b85ef9aa1197fb4ddb96c4e5691a250565b600054604051631c86b03760e31b8152620100009091046001600160a01b03169063e43581b8906114619033906004016120e3565b602060405180830381865afa15801561147e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a291906121d1565b6114be5760405162461bcd60e51b8152600401610476906121f3565b6001600160a01b0381166114e45760405162461bcd60e51b8152600401610476906122b7565b600254604051634c1d96ab60e11b81526001600160a01b039091169063983b2d5690610a479084906004016120e3565b600054604051631c86b03760e31b8152620100009091046001600160a01b03169063e43581b8906115499033906004016120e3565b602060405180830381865afa158015611566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158a91906121d1565b6115a65760405162461bcd60e51b8152600401610476906121f3565b6001600160a01b0381166115cc5760405162461bcd60e51b8152600401610476906122b7565b600380546001600160a01b0319166001600160a01b0383169081179091556040517f8e34f87614920d3825860be957926690888c7cb9ed7fb5ec457edaaad64bd28c90600090a250565b60008060008061162585611cba565b915091506116338282611adf565b935093505050915091565b6004818154811061164e57600080fd5b6000918252602090912001546001600160a01b0316905081565b60008054604051631c86b03760e31b8152620100009091046001600160a01b03169063e43581b890610bfe9085906004016120e3565b600054604051631c86b03760e31b8152620100009091046001600160a01b03169063e43581b8906116d39033906004016120e3565b602060405180830381865afa1580156116f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171491906121d1565b6117305760405162461bcd60e51b8152600401610476906121f3565b600254604080516374e5ec1160e11b815290516001600160a01b039283169284169163e9cbd8229160048083019260209291908290030181865afa15801561177c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a0919061235a565b6001600160a01b0316146117c65760405162461bcd60e51b815260040161047690612377565b600054604051637816ec5160e11b8152620100009091046001600160a01b03169063f02dd8a2906117fb9030906004016120e3565b602060405180830381865afa158015611818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183c91906121d1565b1561186d5760405162461bcd60e51b81526020600482015260016024820152603760f81b6044820152606401610476565b6040516001600160a01b038216907fa74e71df5980104def7b321d0fa7d4b885191d40a2ae420acb543c3eba54253290600090a260005b60045481101561193f57600481815481106118c1576118c1612313565b600091825260209091200154604051630787a21360e51b81526001600160a01b039091169063f0f44260906118fa9085906004016120e3565b600060405180830381600087803b15801561191457600080fd5b505af1158015611928573d6000803e3d6000fd5b50505050808061193790612329565b9150506118a4565b50600254604051630787a21360e51b81526001600160a01b039091169063f0f4426090610a479084906004016120e3565b3b151590565b6000806119dc60048054806020026020016040519081016040528092919081815260200182805480156119d257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116119b4575b5050505050611cba565b60015491935091506001600160a01b031615611a76576001546002546040516396337bd560e01b81526001600160a01b03928316926396337bd592611a26929116906004016120e3565b6020604051808303816000875af1158015611a45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a69919061220e565b611a73908361223d565b91505b611a808282611adf565b90939092509050565b610bc38363a9059cbb60e01b8484604051602401611aa8929190612270565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611d82565b6000808215611c66576002546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611b199030906004016120e3565b602060405180830381865afa158015611b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5a919061220e565b905083811015611bdf576002546040516315a38ec760e11b81526001600160a01b0390911690632b471d8e90611b969084903090600401612289565b600060405180830381600087803b158015611bb057600080fd5b505af1158015611bc4573d6000803e3d6000fd5b50505050600094508084611bd891906122a0565b9350611c64565b6002546040516315a38ec760e11b81526001600160a01b0390911690632b471d8e90611c119087903090600401612289565b600060405180830381600087803b158015611c2b57600080fd5b505af1158015611c3f573d6000803e3d6000fd5b5050505084841015611c5a57611c5584866122a0565b611c5d565b60005b9450600093505b505b600784905560068390556040518481526000805160206124368339815191529060200160405180910390a16040518381526000805160206124768339815191529060200160405180910390a1509192909150565b60065460075490600080805b8551811015611d7a57858181518110611ce157611ce1612313565b60200260200101516001600160a01b031663fd527cf86040518163ffffffff1660e01b815260040160408051808303816000875af1158015611d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4b9190612392565b9093509150611d5a838661223d565b9450611d66828561223d565b935080611d7281612329565b915050611cc6565b505050915091565b6000611dd7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e549092919063ffffffff16565b805190915015610bc35780806020019051810190611df591906121d1565b610bc35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610476565b6060611e638484600085611e6d565b90505b9392505050565b606082471015611ece5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610476565b843b611f1c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610476565b600080866001600160a01b03168587604051611f3891906123e6565b60006040518083038185875af1925050503d8060008114611f75576040519150601f19603f3d011682016040523d82523d6000602084013e611f7a565b606091505b5091509150611f8a828286611f95565b979650505050505050565b60608315611fa4575081611e66565b825115611fb45782518084602001fd5b8160405162461bcd60e51b81526004016104769190612402565b6001600160a01b0381168114611fe357600080fd5b50565b8035611ff181611fce565b919050565b60008060006060848603121561200b57600080fd5b833561201681611fce565b9250602084013561202681611fce565b929592945050506040919091013590565b60006020828403121561204957600080fd5b5035919050565b60006020828403121561206257600080fd5b8135611e6681611fce565b6001600160401b0391909116815260200190565b6000806040838503121561209457600080fd5b823561209f81611fce565b915060208301356120af81611fce565b809150509250929050565b6000602082840312156120cc57600080fd5b81356001600160401b0381168114611e6657600080fd5b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561212057600080fd5b82356001600160401b038082111561213757600080fd5b818501915085601f83011261214b57600080fd5b81358181111561215d5761215d6120f7565b8060051b604051601f19603f83011681018181108582111715612182576121826120f7565b6040529182528482019250838101850191888311156121a057600080fd5b938501935b828510156121c5576121b685611fe6565b845293850193928501926121a5565b98975050505050505050565b6000602082840312156121e357600080fd5b81518015158114611e6657600080fd5b6020808252600190820152603160f81b604082015260600190565b60006020828403121561222057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561225057612250612227565b500190565b6020808252600190820152600d60fa1b604082015260600190565b6001600160a01b03929092168252602082015260400190565b9182526001600160a01b0316602082015260400190565b6000828210156122b2576122b2612227565b500390565b6020808252600190820152600360fc1b604082015260600190565b60008160001904831182151516156122ec576122ec612227565b500290565b60008261230e57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060001982141561233d5761233d612227565b5060010190565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561236c57600080fd5b8151611e6681611fce565b6020808252600190820152601b60f91b604082015260600190565b600080604083850312156123a557600080fd5b505080516020909101519092909150565b60005b838110156123d15781810151838201526020016123b9565b838111156123e0576000848401525b50505050565b600082516123f88184602087016123b6565b9190910192915050565b60208152600082518060208401526124218160408501602087016123b6565b601f01601f1916919091016040019291505056fe2f439c0500f79f2f3322b3665dcdaaa6967182caf9916f6ce2c64f296e609ed2f1e53200c691f394b84864158f7d32772fed29ce025460533f94d6b5ef6690646ec1ccf63c33130734196ff1971d19a46a2b28ce37b81f90ea52f4311319203fa26469706673582212205038a7f68c19eb3bd97325e8a725d1fdf17852a4bf5e8fa54f4f4491a0071aac64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061015f5760003560e01c80630d45456d146101645780631171bda914610186578063137f3b0a1461019b57806319106b67146101bc57806321c29f92146101c45780632a608d5b146101d75780632f15caed146101e05780633092afd514610200578063485cc95514610213578063521d4de9146102265780635290e6a6146102495780635c77f2851461025c5780635e654522146102645780635f80fcad14610277578063676a553e1461028a57806380009630146102b657806389110235146102c9578063959d5a01146102ec578063983b2d561461030c5780639f48118f1461031f578063a94624101461032a578063bbcac5571461033d578063cf87300314610346578063df48681914610359578063e43581b81461036c578063e9cbd8221461037f578063f0f4426014610392578063f2f4eb26146103a5578063f5ec243c146103be575b600080fd5b61016c6103d1565b604080519283526020830191909152015b60405180910390f35b610199610194366004611ff6565b6103e4565b005b6101ae6101a9366004612037565b610622565b60405190815260200161017d565b6101ae6106e3565b6101996101d2366004612050565b6107e8565b6101ae60075481565b6008546101f3906001600160401b031681565b60405161017d919061206d565b61019961020e366004612050565b610937565b610199610221366004612081565b610a7c565b610239610234366004612050565b610bc8565b604051901515815260200161017d565b610199610257366004612050565b610c45565b61016c610edc565b6101996102723660046120ba565b610f7e565b610199610285366004612050565b6110a7565b610239610298366004612050565b6001600160a01b031660009081526005602052604090205460ff1690565b6101996102c4366004612050565b6112bf565b6102396102d7366004612050565b60056020526000908152604090205460ff1681565b6001546102ff906001600160a01b031681565b60405161017d91906120e3565b61019961031a366004612050565b61142c565b6101ae633b9aca0081565b610199610338366004612050565b611514565b6101ae60065481565b61016c61035436600461210d565b611616565b6102ff610367366004612037565b61163e565b61023961037a366004612050565b611668565b6002546102ff906001600160a01b031681565b6101996103a0366004612050565b61169e565b6000546102ff906201000090046001600160a01b031681565b6003546102ff906001600160a01b031681565b6000806103dc611976565b915091509091565b600054604051631c86b03760e31b8152620100009091046001600160a01b03169063e43581b8906104199033906004016120e3565b602060405180830381865afa158015610436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045a91906121d1565b61047f5760405162461bcd60e51b8152600401610476906121f3565b60405180910390fd5b6002546001600160a01b03848116911614156105bc5761049d611976565b50506002546040516370a0823160e01b81526000916001600160a01b0316906370a08231906104d09030906004016120e3565b602060405180830381865afa1580156104ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610511919061220e565b90508060075483610522919061223d565b11156105405760405162461bcd60e51b815260040161047690612255565b60025460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906105729086908690600401612270565b6020604051808303816000875af1158015610591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b591906121d1565b50506105d0565b6105d06001600160a01b0384168383611a89565b816001600160a01b0316836001600160a01b03167ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b6488360405161061591815260200190565b60405180910390a3505050565b600654808211156106455760405162461bcd60e51b815260040161047690612255565b6002546040516315a38ec760e11b81526001600160a01b0390911690632b471d8e906106779085903090600401612289565b600060405180830381600087803b15801561069157600080fd5b505af11580156106a5573d6000803e3d6000fd5b5050505081816106b591906122a0565b60068190556040518181529091506000805160206124768339815191529060200160405180910390a1919050565b6003546000906001600160a01b03168061070f5760405162461bcd60e51b8152600401610476906122b7565b6000610719611976565b50600060078190556040519081529091506000805160206124368339815191529060200160405180910390a1600854633b9aca00906107629083906001600160401b03166122d2565b61076c91906122f1565b60025460405163a9059cbb60e01b81529194506001600160a01b03169063a9059cbb9061079f9085908790600401612270565b6020604051808303816000875af11580156107be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e291906121d1565b50505090565b6000546201000090046001600160a01b0316331461082d5760405162461bcd60e51b8152602060048201526002602482015261031360f41b6044820152606401610476565b6001546001600160a01b031680156108a257600254604051633092afd560e01b81526001600160a01b0390911690633092afd59061086f9084906004016120e3565b600060405180830381600087803b15801561088957600080fd5b505af115801561089d573d6000803e3d6000fd5b505050505b6001600160a01b0382161561091457600254604051634c1d96ab60e11b81526001600160a01b039091169063983b2d56906108e19085906004016120e3565b600060405180830381600087803b1580156108fb57600080fd5b505af115801561090f573d6000803e3d6000fd5b505050505b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b600054604051631c86b03760e31b8152620100009091046001600160a01b03169063e43581b89061096c9033906004016120e3565b602060405180830381865afa158015610989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ad91906121d1565b6109c95760405162461bcd60e51b8152600401610476906121f3565b6001600160a01b03811660009081526005602052604090205460ff1615610a175760405162461bcd60e51b8152602060048201526002602482015261199b60f11b6044820152606401610476565b600254604051633092afd560e01b81526001600160a01b0390911690633092afd590610a479084906004016120e3565b600060405180830381600087803b158015610a6157600080fd5b505af1158015610a75573d6000803e3d6000fd5b5050505050565b600054610100900460ff16610a975760005460ff1615610a9b565b303b155b610afe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610476565b600054610100900460ff16158015610b20576000805461ffff19166101011790555b6001600160a01b03821615801590610b4057506001600160a01b03831615155b610b705760405162461bcd60e51b81526020600482015260016024820152604f60f81b6044820152606401610476565b6000805462010000600160b01b031916620100006001600160a01b038681169190910291909117909155600280546001600160a01b0319169184169190911790558015610bc3576000805461ff00191690555b505050565b6000805460405163521d4de960e01b8152620100009091046001600160a01b03169063521d4de990610bfe9085906004016120e3565b602060405180830381865afa158015610c1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3f91906121d1565b92915050565b600054604051631c86b03760e31b8152620100009091046001600160a01b03169063e43581b890610c7a9033906004016120e3565b602060405180830381865afa158015610c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbb91906121d1565b610cd75760405162461bcd60e51b8152600401610476906121f3565b6001600160a01b03811660009081526005602052604090205460ff16610d235760405162461bcd60e51b81526020600482015260016024820152603360f81b6044820152606401610476565b6001600160a01b0381166000908152600560205260408120805460ff19169055600454905b610d536001836122a0565b811015610e2057826001600160a01b031660048281548110610d7757610d77612313565b6000918252602090912001546001600160a01b03161415610e0e576004610d9f6001846122a0565b81548110610daf57610daf612313565b600091825260209091200154600480546001600160a01b039092169183908110610ddb57610ddb612313565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610e20565b80610e1881612329565b915050610d48565b506004805480610e3257610e32612344565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b0384169160008051602061245683398151915291a2600254604051633092afd560e01b81526001600160a01b0390911690633092afd590610ea69085906004016120e3565b600060405180830381600087803b158015610ec057600080fd5b505af1158015610ed4573d6000803e3d6000fd5b505050505050565b6001546002546040516396337bd560e01b8152600092839283926001600160a01b03928316926396337bd592610f17929116906004016120e3565b6020604051808303816000875af1158015610f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5a919061220e565b600754610f67919061223d565b9050610f7581600654611adf565b92509250509091565b600054604051631c86b03760e31b8152620100009091046001600160a01b03169063e43581b890610fb39033906004016120e3565b602060405180830381865afa158015610fd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff491906121d1565b6110105760405162461bcd60e51b8152600401610476906121f3565b633b9aca00816001600160401b031611156110515760405162461bcd60e51b81526020600482015260016024820152603960f81b6044820152606401610476565b600880546001600160401b0319166001600160401b0383161790556040517fe4c9afce87963212e0d33e6b4b43fee7103b8c57228620e450e5064b95ee08ec9061109c90839061206d565b60405180910390a150565b600054604051631c86b03760e31b8152620100009091046001600160a01b03169063e43581b8906110dc9033906004016120e3565b602060405180830381865afa1580156110f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111d91906121d1565b6111395760405162461bcd60e51b8152600401610476906121f3565b6001600160a01b03811660009081526005602052604090205460ff16156111865760405162461bcd60e51b81526020600482015260016024820152603560f81b6044820152606401610476565b306001600160a01b0316816001600160a01b03166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f2919061235a565b6001600160a01b0316146112185760405162461bcd60e51b815260040161047690612377565b6001600160a01b038116600081815260056020526040808220805460ff1916600190811790915560048054918201815583527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b03191684179055516000805160206124568339815191529190a2600254604051634c1d96ab60e11b81526001600160a01b039091169063983b2d5690610a479084906004016120e3565b600054604051631c86b03760e31b8152620100009091046001600160a01b03169063e43581b8906112f49033906004016120e3565b602060405180830381865afa158015611311573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133591906121d1565b6113515760405162461bcd60e51b8152600401610476906121f3565b604051631c86b03760e31b81526001600160a01b0382169063e43581b89061137d9033906004016120e3565b602060405180830381865afa15801561139a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113be91906121d1565b6113da5760405162461bcd60e51b8152600401610476906121f3565b6000805462010000600160b01b031916620100006001600160a01b03841690810291909117825560405190917f0c9c0f914e121785e2cd2269d6698bc11f59a50b85ef9aa1197fb4ddb96c4e5691a250565b600054604051631c86b03760e31b8152620100009091046001600160a01b03169063e43581b8906114619033906004016120e3565b602060405180830381865afa15801561147e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a291906121d1565b6114be5760405162461bcd60e51b8152600401610476906121f3565b6001600160a01b0381166114e45760405162461bcd60e51b8152600401610476906122b7565b600254604051634c1d96ab60e11b81526001600160a01b039091169063983b2d5690610a479084906004016120e3565b600054604051631c86b03760e31b8152620100009091046001600160a01b03169063e43581b8906115499033906004016120e3565b602060405180830381865afa158015611566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158a91906121d1565b6115a65760405162461bcd60e51b8152600401610476906121f3565b6001600160a01b0381166115cc5760405162461bcd60e51b8152600401610476906122b7565b600380546001600160a01b0319166001600160a01b0383169081179091556040517f8e34f87614920d3825860be957926690888c7cb9ed7fb5ec457edaaad64bd28c90600090a250565b60008060008061162585611cba565b915091506116338282611adf565b935093505050915091565b6004818154811061164e57600080fd5b6000918252602090912001546001600160a01b0316905081565b60008054604051631c86b03760e31b8152620100009091046001600160a01b03169063e43581b890610bfe9085906004016120e3565b600054604051631c86b03760e31b8152620100009091046001600160a01b03169063e43581b8906116d39033906004016120e3565b602060405180830381865afa1580156116f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171491906121d1565b6117305760405162461bcd60e51b8152600401610476906121f3565b600254604080516374e5ec1160e11b815290516001600160a01b039283169284169163e9cbd8229160048083019260209291908290030181865afa15801561177c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a0919061235a565b6001600160a01b0316146117c65760405162461bcd60e51b815260040161047690612377565b600054604051637816ec5160e11b8152620100009091046001600160a01b03169063f02dd8a2906117fb9030906004016120e3565b602060405180830381865afa158015611818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183c91906121d1565b1561186d5760405162461bcd60e51b81526020600482015260016024820152603760f81b6044820152606401610476565b6040516001600160a01b038216907fa74e71df5980104def7b321d0fa7d4b885191d40a2ae420acb543c3eba54253290600090a260005b60045481101561193f57600481815481106118c1576118c1612313565b600091825260209091200154604051630787a21360e51b81526001600160a01b039091169063f0f44260906118fa9085906004016120e3565b600060405180830381600087803b15801561191457600080fd5b505af1158015611928573d6000803e3d6000fd5b50505050808061193790612329565b9150506118a4565b50600254604051630787a21360e51b81526001600160a01b039091169063f0f4426090610a479084906004016120e3565b3b151590565b6000806119dc60048054806020026020016040519081016040528092919081815260200182805480156119d257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116119b4575b5050505050611cba565b60015491935091506001600160a01b031615611a76576001546002546040516396337bd560e01b81526001600160a01b03928316926396337bd592611a26929116906004016120e3565b6020604051808303816000875af1158015611a45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a69919061220e565b611a73908361223d565b91505b611a808282611adf565b90939092509050565b610bc38363a9059cbb60e01b8484604051602401611aa8929190612270565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611d82565b6000808215611c66576002546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611b199030906004016120e3565b602060405180830381865afa158015611b36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5a919061220e565b905083811015611bdf576002546040516315a38ec760e11b81526001600160a01b0390911690632b471d8e90611b969084903090600401612289565b600060405180830381600087803b158015611bb057600080fd5b505af1158015611bc4573d6000803e3d6000fd5b50505050600094508084611bd891906122a0565b9350611c64565b6002546040516315a38ec760e11b81526001600160a01b0390911690632b471d8e90611c119087903090600401612289565b600060405180830381600087803b158015611c2b57600080fd5b505af1158015611c3f573d6000803e3d6000fd5b5050505084841015611c5a57611c5584866122a0565b611c5d565b60005b9450600093505b505b600784905560068390556040518481526000805160206124368339815191529060200160405180910390a16040518381526000805160206124768339815191529060200160405180910390a1509192909150565b60065460075490600080805b8551811015611d7a57858181518110611ce157611ce1612313565b60200260200101516001600160a01b031663fd527cf86040518163ffffffff1660e01b815260040160408051808303816000875af1158015611d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4b9190612392565b9093509150611d5a838661223d565b9450611d66828561223d565b935080611d7281612329565b915050611cc6565b505050915091565b6000611dd7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e549092919063ffffffff16565b805190915015610bc35780806020019051810190611df591906121d1565b610bc35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610476565b6060611e638484600085611e6d565b90505b9392505050565b606082471015611ece5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610476565b843b611f1c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610476565b600080866001600160a01b03168587604051611f3891906123e6565b60006040518083038185875af1925050503d8060008114611f75576040519150601f19603f3d011682016040523d82523d6000602084013e611f7a565b606091505b5091509150611f8a828286611f95565b979650505050505050565b60608315611fa4575081611e66565b825115611fb45782518084602001fd5b8160405162461bcd60e51b81526004016104769190612402565b6001600160a01b0381168114611fe357600080fd5b50565b8035611ff181611fce565b919050565b60008060006060848603121561200b57600080fd5b833561201681611fce565b9250602084013561202681611fce565b929592945050506040919091013590565b60006020828403121561204957600080fd5b5035919050565b60006020828403121561206257600080fd5b8135611e6681611fce565b6001600160401b0391909116815260200190565b6000806040838503121561209457600080fd5b823561209f81611fce565b915060208301356120af81611fce565b809150509250929050565b6000602082840312156120cc57600080fd5b81356001600160401b0381168114611e6657600080fd5b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561212057600080fd5b82356001600160401b038082111561213757600080fd5b818501915085601f83011261214b57600080fd5b81358181111561215d5761215d6120f7565b8060051b604051601f19603f83011681018181108582111715612182576121826120f7565b6040529182528482019250838101850191888311156121a057600080fd5b938501935b828510156121c5576121b685611fe6565b845293850193928501926121a5565b98975050505050505050565b6000602082840312156121e357600080fd5b81518015158114611e6657600080fd5b6020808252600190820152603160f81b604082015260600190565b60006020828403121561222057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561225057612250612227565b500190565b6020808252600190820152600d60fa1b604082015260600190565b6001600160a01b03929092168252602082015260400190565b9182526001600160a01b0316602082015260400190565b6000828210156122b2576122b2612227565b500390565b6020808252600190820152600360fc1b604082015260600190565b60008160001904831182151516156122ec576122ec612227565b500290565b60008261230e57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060001982141561233d5761233d612227565b5060010190565b634e487b7160e01b600052603160045260246000fd5b60006020828403121561236c57600080fd5b8151611e6681611fce565b6020808252600190820152601b60f91b604082015260600190565b600080604083850312156123a557600080fd5b505080516020909101519092909150565b60005b838110156123d15781810151838201526020016123b9565b838111156123e0576000848401525b50505050565b600082516123f88184602087016123b6565b9190910192915050565b60208152600082518060208401526124218160408501602087016123b6565b601f01601f1916919091016040019291505056fe2f439c0500f79f2f3322b3665dcdaaa6967182caf9916f6ce2c64f296e609ed2f1e53200c691f394b84864158f7d32772fed29ce025460533f94d6b5ef6690646ec1ccf63c33130734196ff1971d19a46a2b28ce37b81f90ea52f4311319203fa26469706673582212205038a7f68c19eb3bd97325e8a725d1fdf17852a4bf5e8fa54f4f4491a0071aac64736f6c634300080c0033",
  "devdoc": {
    "author": "Angle Core Team",
    "kind": "dev",
    "methods": {
      "addMinter(address)": {
        "params": {
          "minter": "Minter address to add"
        }
      },
      "addVaultManager(address)": {
        "details": "This contract should have already been initialized with a correct treasury addressIt's this function that gives the minter right to the `vaultManager`",
        "params": {
          "vaultManager": "`VaultManager` contract to add"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "fetchSurplusFromAll()": {
        "details": "This function pools surplus and bad debt across all contracts and then updates the `surplusBuffer` (or the `badDebt` if more losses were made than profits)",
        "returns": {
          "_0": "Surplus buffer value at the end of the call",
          "_1": "Bad debt value at the end of the call"
        }
      },
      "fetchSurplusFromFlashLoan()": {
        "details": "This function fails if the `flashLoanModule` has not been initialized yet",
        "returns": {
          "_0": "Surplus buffer value at the end of the call",
          "_1": "Bad debt value at the end of the call"
        }
      },
      "fetchSurplusFromVaultManagers(address[])": {
        "returns": {
          "_0": "Surplus buffer value at the end of the call",
          "_1": "Bad debt value at the end of the call TODO: could be removed or not?"
        }
      },
      "initialize(address,address)": {
        "params": {
          "_core": "Address of the `CoreBorrow` contract of the module",
          "_stablecoin": "Address of the stablecoin"
        }
      },
      "isGovernor(address)": {
        "details": "Access control is only kept in the `CoreBorrow` contract",
        "params": {
          "admin": "Address to check"
        },
        "returns": {
          "_0": "Whether the address has the governor role"
        }
      },
      "isGovernorOrGuardian(address)": {
        "details": "Access control is only kept in the `CoreBorrow` contract which means that this function queries the `CoreBorrow` contract",
        "params": {
          "admin": "Address to check"
        },
        "returns": {
          "_0": "Whether the address has the guardian or the governor role"
        }
      },
      "isVaultManager(address)": {
        "params": {
          "_vaultManager": "Address to check"
        },
        "returns": {
          "_0": "Whether the address has been initialized or not"
        }
      },
      "pushSurplus()": {
        "details": "This function will fail if the `surplusManager` has not been initialized yetIt makes sure to fetch the surplus from all the contracts handled by this treasury to avoid the situation where rewards are still distributed to governance even though a `VaultManager` has made a big lossTypically this function is to be called once every week by a keeper to distribute rewards to veANGLE holders`stablecoin` must be an AgToken and hence `transfer` reverts if the call is not successful",
        "returns": {
          "governanceAllocation": "Amount transferred to governance"
        }
      },
      "recoverERC20(address,address,uint256)": {
        "details": "It is impossible to recover the stablecoin of the protocol if there is some bad debt for itIn this case, the function makes sure to fetch the surplus/bad debt from all the `VaultManager` contracts and from the flash loan moduleIf the token to recover is the stablecoin, tokens recovered are fetched from the surplus and not from the `surplusBuffer`",
        "params": {
          "amountToRecover": "Amount of collateral to transfer",
          "to": "Address of the contract to send collateral to",
          "tokenAddress": "Address of the token to recover"
        }
      },
      "removeMinter(address)": {
        "params": {
          "minter": "Minter address to remove"
        }
      },
      "removeVaultManager(address)": {
        "details": "A removed `vaultManager` loses its minter right on the stablecoin",
        "params": {
          "vaultManager": "`VaultManager` contract to remove"
        }
      },
      "setCore(address)": {
        "details": "This function should typically be called on all treasury contracts after the `setCore` function has been called on the `Core` contractOne sanity check that can be performed here is to verify whether at least the governor calling the contract is still a governor in the new core"
      },
      "setFlashLoanModule(address)": {
        "details": "This function removes the minting right to the old flash loan module and grants it to the new module",
        "params": {
          "_flashLoanModule": "Reference to the new flash loan module"
        }
      },
      "setSurplusForGovernance(uint64)": {
        "details": "To pause surplus distribution, governance needs to set a zero value for `surplusForGovernance` which means",
        "params": {
          "_surplusForGovernance": "New value of the parameter"
        }
      },
      "setSurplusManager(address)": {
        "params": {
          "_surplusManager": "New address responsible for handling the surplus"
        }
      },
      "setTreasury(address)": {
        "details": "This function is basically a way to remove rights to this contract and grant them to a new oneIt could be used to set a new core contract",
        "params": {
          "_treasury": "New treasury address for this stablecoin"
        }
      },
      "updateBadDebt(uint256)": {
        "details": "If the protocol has made a loss and managed to make some profits to recover for this loss (through a program like Olympus Pro), then this function needs to be called`badDebt` is simply reduced here by burning stablecoinsIt is impossible to burn more than the `badDebt` otherwise this function could be used to manipulate the `surplusBuffer` and hence the amount going to governance",
        "params": {
          "amount": "Amount to reduce the bad debt of"
        },
        "returns": {
          "badDebtValue": "Value of the bad debt at the end of the call"
        }
      }
    },
    "title": "Treasury",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BASE_PARAMS()": {
        "notice": "Base used for parameter computation"
      },
      "addMinter(address)": {
        "notice": "Adds a new minter for the stablecoin"
      },
      "addVaultManager(address)": {
        "notice": "Adds a new `vaultManager`"
      },
      "badDebt()": {
        "notice": "Amount of bad debt (unbacked stablecoin) accumulated across all `VaultManager` contracts linked to this stablecoin"
      },
      "core()": {
        "notice": "Reference to the Core contract of the module which handles all AccessControl logic"
      },
      "fetchSurplusFromAll()": {
        "notice": "Fetches the surplus accrued across all the `VaultManager` contracts controlled by this `Treasury` contract as well as from the fees of the `FlashLoan` module"
      },
      "fetchSurplusFromFlashLoan()": {
        "notice": "Fetches the surplus accrued in the flash loan module and updates the `surplusBuffer`"
      },
      "fetchSurplusFromVaultManagers(address[])": {
        "notice": "Fetches surplus a list of vaultManager contracts"
      },
      "flashLoanModule()": {
        "notice": "Flash Loan Module with a minter right on the stablecoin"
      },
      "initialize(address,address)": {
        "notice": "Initializes the treasury contract"
      },
      "isGovernor(address)": {
        "notice": "Checks whether a given address has the  governor role"
      },
      "isGovernorOrGuardian(address)": {
        "notice": "Checks whether a given address has the guardian or the governor role"
      },
      "isVaultManager(address)": {
        "notice": "Checks whether a given address has well been initialized in this contract as a `VaultManager``"
      },
      "pushSurplus()": {
        "notice": "Pushes the surplus buffer to the `surplusManager` contract"
      },
      "recoverERC20(address,address,uint256)": {
        "notice": "Allows to recover any ERC20 token, including the stablecoin handled by this contract, and to send it to a contract"
      },
      "removeMinter(address)": {
        "notice": "Removes a minter from the stablecoin contract"
      },
      "removeVaultManager(address)": {
        "notice": "Removes a `vaultManager`"
      },
      "setCore(address)": {
        "notice": "Sets a new `Core` contract"
      },
      "setFlashLoanModule(address)": {
        "notice": "Sets a new flash loan module for this stablecoin"
      },
      "setSurplusForGovernance(uint64)": {
        "notice": "Sets the `surplusForGovernance` parameter"
      },
      "setSurplusManager(address)": {
        "notice": "Sets the `surplusManager` contract responsible for handling the surplus of the protocol"
      },
      "setTreasury(address)": {
        "notice": "Changes the treasury contract and communicates this change to all `VaultManager` contract"
      },
      "stablecoin()": {
        "notice": "Stablecoin handled by this `treasury` contract"
      },
      "surplusBuffer()": {
        "notice": "Surplus amount accumulated by the contract waiting to be distributed to governance. Technically only a share of this `surplusBuffer` will go to governance. Once a share of the surplus buffer has been given to governance, then this surplus is reset"
      },
      "surplusForGovernance()": {
        "notice": "Share of the `surplusBuffer` distributed to governance (in `BASE_PARAMS`)"
      },
      "surplusManager()": {
        "notice": "Address responsible for handling the surplus made by the treasury"
      },
      "updateBadDebt(uint256)": {
        "notice": "Updates the bad debt of the protocol in case where the protocol has accumulated some revenue from an external source"
      },
      "vaultManagerList(uint256)": {
        "notice": "List of the accepted `VaultManager` of the protocol"
      },
      "vaultManagerMap(address)": {
        "notice": "Maps an address to whether it was initialized as a `VaultManager` contract"
      }
    },
    "notice": "Treasury of Angle Borrowing Module doing the accounting across all VaultManagers for a given stablecoin",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 646,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 649,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 14448,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "core",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ICoreBorrow)8929"
      },
      {
        "astId": 14452,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "flashLoanModule",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IFlashAngle)9566"
      },
      {
        "astId": 14456,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "stablecoin",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IAgToken)8901"
      },
      {
        "astId": 14459,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "surplusManager",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 14463,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "vaultManagerList",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 14468,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "vaultManagerMap",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14471,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "badDebt",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 14474,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "surplusBuffer",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 14477,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "surplusForGovernance",
        "offset": 0,
        "slot": "8",
        "type": "t_uint64"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAgToken)8901": {
        "encoding": "inplace",
        "label": "contract IAgToken",
        "numberOfBytes": "20"
      },
      "t_contract(ICoreBorrow)8929": {
        "encoding": "inplace",
        "label": "contract ICoreBorrow",
        "numberOfBytes": "20"
      },
      "t_contract(IFlashAngle)9566": {
        "encoding": "inplace",
        "label": "contract IFlashAngle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}