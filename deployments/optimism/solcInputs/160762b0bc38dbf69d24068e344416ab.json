{
  "language": "Solidity",
  "sources": {
    "contracts/keeperMulticall/MulticallWithFailure.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.12;\n\n/// @title MultiCallWithFailure\n/// @author Angle Core Team\n/// @notice Multicall contract allowing subcalls to fail without reverting the entire call\ncontract MultiCallWithFailure {\n    error SubcallFailed();\n\n    struct Call {\n        address target;\n        bytes data;\n        bool canFail;\n    }\n\n    function multiCall(Call[] memory calls) external view returns (bytes[] memory) {\n        bytes[] memory results = new bytes[](calls.length);\n\n        for (uint256 i; i < calls.length; i++) {\n            (bool success, bytes memory result) = calls[i].target.staticcall(calls[i].data);\n            if (!calls[i].canFail) {\n                if (!success) {\n                    revert SubcallFailed();\n                }\n            }\n            results[i] = result;\n        }\n\n        return results;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}