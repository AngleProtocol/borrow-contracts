{
  "address": "0x6cd24ac05103C2C911347a6D3628d64a9F07eAf5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEndpoint",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernorOrGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        }
      ],
      "name": "ReceiveFromChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        }
      ],
      "name": "SendToChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canonicalToken",
      "outputs": [
        {
          "internalType": "contract IAgTokenSideChainMultiBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_useZro",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "estimateSendFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_lzEndpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialSupply",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "isTrustedRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "nonblockingLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "pause",
          "type": "bool"
        }
      ],
      "name": "pauseSendTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "sendCredit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "sendWithPermit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setupAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountMinted",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x70dba4099102f731179a27c9bf40ba8eac16927c1355b6cbe440f242b1677e9a",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0x6cd24ac05103C2C911347a6D3628d64a9F07eAf5",
    "transactionIndex": 2,
    "gasUsed": "3625705",
    "logsBloom": "0x
    "blockHash": "0x05f1280387795b92bac8a0f152315be43a7db7b888ace330e348f93796285de7",
    "transactionHash": "0x70dba4099102f731179a27c9bf40ba8eac16927c1355b6cbe440f242b1677e9a",
    "logs": [],
    "blockNumber": 20878446,
    "cumulativeGasUsed": "3850883",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c738595b9b57358bae83408c8b980d54",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpoint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernorOrGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"ReceiveFromChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"SendToChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canonicalToken\",\"outputs\":[{\"internalType\":\"contract IAgTokenSideChainMultiBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useZro\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateSendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"pauseSendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"sendCredit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"sendWithPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Core Team, forked from https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/token/oft/OFT.sol\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Used to decrease the bridging capacity\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"estimateSendFee(uint16,bytes,uint256,bool,bytes)\":{\"params\":{\"_adapterParams\":\"flexible bytes array to indicate messaging adapter services in L0\",\"_amount\":\"amount of the tokens to transfer\",\"_dstChainId\":\"L0 defined chain id to send tokens too\",\"_toAddress\":\"dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\",\"_useZro\":\"indicates to use zro to pay L0 fees\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(string,string,address,address,uint256)\":{\"details\":\"The initial supply corresponds to the initial amount that could be bridged using this OFT\",\"params\":{\"_lzEndpoint\":\"Layer zero endpoint to pass messages\",\"_name\":\"Name of the token corresponding to this contract\",\"_symbol\":\"Symbol of the token corresponding to this contract\",\"_treasury\":\"Address of the treasury contract used for access control\",\"initialSupply\":\"Initial supply to mint to the canonical token address\"}},\"lzReceive(uint16,bytes,uint64,bytes)\":{\"params\":{\"_nonce\":\"Nounce of the message\",\"_payload\":\"Data: recipient address and amount\",\"_srcAddress\":\"Sender of the source chain\",\"_srcChainId\":\"ChainId of the source chain - LayerZero standard\"}},\"mint(uint256)\":{\"details\":\"Used to increase the bridging capacity\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonblockingLzReceive(uint16,bytes,uint64,bytes)\":{\"details\":\"public for the needs of try / catch but effectively internal\",\"params\":{\"_nonce\":\"Nounce of the message\",\"_payload\":\"Data: recipient address and amount\",\"_srcAddress\":\"Sender of the source chain\",\"_srcChainId\":\"ChainId of the source chain - LayerZero standard\"}},\"pauseSendTokens(bool)\":{\"params\":{\"pause\":\"Future pause status\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"retryMessage(uint16,bytes,uint64,bytes)\":{\"params\":{\"_nonce\":\"Nounce of the message\",\"_payload\":\"Data: recipient address and amount\",\"_srcAddress\":\"Sender of the source chain\",\"_srcChainId\":\"ChainId of the source chain - LayerZero standard\"}},\"send(uint16,bytes,uint256,address,address,bytes)\":{\"params\":{\"_adapterParams\":\"is a flexible bytes array to indicate messaging adapter services\",\"_amount\":\"the quantity of tokens in wei\",\"_dstChainId\":\"the destination chain identifier\",\"_refundAddress\":\"the address LayerZero refunds if too much message fee is sent\",\"_toAddress\":\"can be any size depending on the `dstChainId`.\",\"_zroPaymentAddress\":\"set to address(0x0) if not paying in ZRO (LayerZero Token)\"}},\"sendCredit(uint16,bytes,uint256,address,address,bytes)\":{\"params\":{\"_adapterParams\":\"is a flexible bytes array to indicate messaging adapter services\",\"_amount\":\"the quantity of credit to send in wei\",\"_dstChainId\":\"the destination chain identifier\",\"_refundAddress\":\"the address LayerZero refunds if too much message fee is sent\",\"_toAddress\":\"can be any size depending on the `dstChainId`.\",\"_zroPaymentAddress\":\"set to address(0x0) if not paying in ZRO (LayerZero Token)\"}},\"sendWithPermit(uint16,bytes,uint256,address,address,bytes,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `v`, `r`, and `s` parameters are used as signature data\",\"params\":{\"_adapterParams\":\"Flexible bytes array to indicate messaging adapter services\",\"_amount\":\"Quantity of tokens in wei\",\"_dstChainId\":\"The destination chain identifier\",\"_refundAddress\":\"Address LayerZero refunds if too much message fee is sent\",\"_toAddress\":\"Can be any size depending on the `dstChainId`.\",\"_zroPaymentAddress\":\"Set to address(0x0) if not paying in ZRO (LayerZero Token)\",\"deadline\":\"Deadline parameter for the signature to be valid\"}},\"setTrustedRemote(uint16,bytes)\":{\"details\":\"Used for both receiving and sending messageThere can only be one trusted source per chainAllows owner to set it multiple times.\",\"params\":{\"_srcAddress\":\"Address on the source chain\",\"_srcChainId\":\"ChainId of the source chain - LayerZero standard\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"withdraw(uint256,address)\":{\"params\":{\"amount\":\"Amount to withdraw\",\"recipient\":\"Address to send the canonical token to\"},\"returns\":{\"amountMinted\":\"The amount of canonical token sent\"}}},\"stateVariables\":{\"canonicalToken\":{\"details\":\"Immutable\"}},\"title\":\"LayerZeroBridgeToken\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Burns the intermediate contract from the `canonicalToken`\"},\"canonicalToken()\":{\"notice\":\"Address of the bridgeable token\"},\"estimateSendFee(uint16,bytes,uint256,bool,bytes)\":{\"notice\":\"Estimates send token `_tokenId` to (`_dstChainId`, `_toAddress`)\"},\"failedMessages(uint16,bytes,uint64)\":{\"notice\":\"Maps chainIds to failed messages to retry them\"},\"forceResumeReceive(uint16,bytes)\":{\"notice\":\"Unpauses the receive functionalities\"},\"getConfig(uint16,uint16,address,uint256)\":{\"notice\":\"Fetches the default LZ config\"},\"initialize(string,string,address,address,uint256)\":{\"notice\":\"Initializes the contract\"},\"isTrustedRemote(uint16,bytes)\":{\"notice\":\"Checks if the `_srcAddress` corresponds to the trusted source\"},\"lzEndpoint()\":{\"notice\":\"Layer Zero endpoint\"},\"lzReceive(uint16,bytes,uint64,bytes)\":{\"notice\":\"Receives a message from the LZ endpoint and process it\"},\"mint(uint256)\":{\"notice\":\"Mints the intermediate contract to the `canonicalToken`\"},\"nonblockingLzReceive(uint16,bytes,uint64,bytes)\":{\"notice\":\"Handles message receptions in a non blocking way\"},\"pauseSendTokens(bool)\":{\"notice\":\"Pauses bridging through the contract\"},\"retryMessage(uint16,bytes,uint64,bytes)\":{\"notice\":\"Retries a message that previously failed and was stored\"},\"send(uint16,bytes,uint256,address,address,bytes)\":{\"notice\":\"Sends `_amount` amount of token to (`_dstChainId`, `_toAddress`)\"},\"sendCredit(uint16,bytes,uint256,address,address,bytes)\":{\"notice\":\"Sends `_amount` amount of credit to (`_dstChainId`, `_toAddress`)\"},\"sendWithPermit(uint16,bytes,uint256,address,address,bytes,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Sends `_amount` amount of token to (`_dstChainId`, `_toAddress`)\"},\"setConfig(uint16,uint16,uint256,bytes)\":{\"notice\":\"Overrides the default LZ config\"},\"setReceiveVersion(uint16)\":{\"notice\":\"Overrides the default LZ config\"},\"setSendVersion(uint16)\":{\"notice\":\"Overrides the default LZ config\"},\"setTrustedRemote(uint16,bytes)\":{\"notice\":\"Sets the corresponding address on an other chain.\"},\"setupAllowance()\":{\"notice\":\"Increases allowance of the `canonicalToken`\"},\"treasury()\":{\"notice\":\"Reference to the treasury contract to fetch access control\"},\"trustedRemoteLookup(uint16)\":{\"notice\":\"Maps chainIds to their OFT address\"},\"withdraw(uint256,address)\":{\"notice\":\"Withdraws amount of canonical token from the `msg.sender` balance and sends it to the recipient\"}},\"notice\":\"Contract to be deployed on a L2/sidechain for bridging an AgToken using a bridge intermediate token and LayerZero\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/agToken/layerZero/LayerZeroBridgeToken.sol\":\"LayerZeroBridgeToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x23a373902059fb51db98e32e13f89a0ef0c570039081a1345022e66bc7e315d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/agToken/layerZero/LayerZeroBridgeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./utils/OFTCore.sol\\\";\\nimport \\\"../../interfaces/IAgTokenSideChainMultiBridge.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\n/// @title LayerZeroBridgeToken\\n/// @author Angle Core Team, forked from https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/token/oft/OFT.sol\\n/// @notice Contract to be deployed on a L2/sidechain for bridging an AgToken using a bridge intermediate token and LayerZero\\ncontract LayerZeroBridgeToken is OFTCore, ERC20Upgradeable, PausableUpgradeable {\\n    /// @notice Address of the bridgeable token\\n    /// @dev Immutable\\n    IAgTokenSideChainMultiBridge public canonicalToken;\\n\\n    // =============================== Errors ================================\\n\\n    error InvalidAllowance();\\n\\n    // ============================= Constructor ===================================\\n\\n    /// @notice Initializes the contract\\n    /// @param _name Name of the token corresponding to this contract\\n    /// @param _symbol Symbol of the token corresponding to this contract\\n    /// @param _lzEndpoint Layer zero endpoint to pass messages\\n    /// @param _treasury Address of the treasury contract used for access control\\n    /// @param initialSupply Initial supply to mint to the canonical token address\\n    /// @dev The initial supply corresponds to the initial amount that could be bridged using this OFT\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        address _lzEndpoint,\\n        address _treasury,\\n        uint256 initialSupply\\n    ) external initializer {\\n        __ERC20_init_unchained(_name, _symbol);\\n        __LzAppUpgradeable_init(_lzEndpoint, _treasury);\\n\\n        canonicalToken = IAgTokenSideChainMultiBridge(address(ITreasury(_treasury).stablecoin()));\\n        _approve(address(this), address(canonicalToken), type(uint256).max);\\n        _mint(address(canonicalToken), initialSupply);\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    // ==================== External Permissionless Functions ======================\\n\\n    /// @inheritdoc OFTCore\\n    function sendWithPermit(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable override {\\n        canonicalToken.permit(msg.sender, address(this), _amount, deadline, v, r, s);\\n        send(_dstChainId, _toAddress, _amount, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    /// @inheritdoc OFTCore\\n    function withdraw(uint256 amount, address recipient) external override returns (uint256 amountMinted) {\\n        // Does not check allowances as transfers from `msg.sender`\\n        _transfer(msg.sender, address(this), amount);\\n        amountMinted = canonicalToken.swapIn(address(this), amount, recipient);\\n        uint256 leftover = balanceOf(address(this));\\n        if (leftover > 0) {\\n            _transfer(address(this), msg.sender, leftover);\\n        }\\n    }\\n\\n    // ============================= Internal Functions ===================================\\n\\n    /// @inheritdoc OFTCore\\n    function _debitFrom(\\n        uint16,\\n        bytes memory,\\n        uint256 _amount\\n    ) internal override whenNotPaused returns (uint256 amountSwapped) {\\n        // No need to use safeTransferFrom as we know this implementation reverts on failure\\n        canonicalToken.transferFrom(msg.sender, address(this), _amount);\\n\\n        // Swap canonical for this bridge token. There may be some fees\\n        amountSwapped = canonicalToken.swapOut(address(this), _amount, address(this));\\n        _burn(address(this), amountSwapped);\\n    }\\n\\n    /// @inheritdoc OFTCore\\n    function _debitCreditFrom(\\n        uint16,\\n        bytes memory,\\n        uint256 _amount\\n    ) internal override whenNotPaused returns (uint256) {\\n        _burn(msg.sender, _amount);\\n        return _amount;\\n    }\\n\\n    /// @inheritdoc OFTCore\\n    function _creditTo(\\n        uint16,\\n        address _toAddress,\\n        uint256 _amount\\n    ) internal override whenNotPaused returns (uint256 amountMinted) {\\n        _mint(address(this), _amount);\\n        amountMinted = canonicalToken.swapIn(address(this), _amount, _toAddress);\\n        uint256 leftover = balanceOf(address(this));\\n        if (leftover > 0) {\\n            _transfer(address(this), _toAddress, leftover);\\n        }\\n    }\\n\\n    // ======================= View Functions ================================\\n\\n    /// @inheritdoc ERC165Upgradeable\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IOFT).interfaceId ||\\n            interfaceId == type(IERC20).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    // ======================= Governance Functions ================================\\n\\n    /// @notice Mints the intermediate contract to the `canonicalToken`\\n    /// @dev Used to increase the bridging capacity\\n    function mint(uint256 amount) external onlyGovernorOrGuardian {\\n        _mint(address(canonicalToken), amount);\\n    }\\n\\n    /// @notice Burns the intermediate contract from the `canonicalToken`\\n    /// @dev Used to decrease the bridging capacity\\n    function burn(uint256 amount) external onlyGovernorOrGuardian {\\n        _burn(address(canonicalToken), amount);\\n    }\\n\\n    /// @notice Increases allowance of the `canonicalToken`\\n    function setupAllowance() public onlyGovernorOrGuardian {\\n        _approve(address(this), address(canonicalToken), type(uint256).max);\\n    }\\n\\n    /// @notice Pauses bridging through the contract\\n    /// @param pause Future pause status\\n    function pauseSendTokens(bool pause) external onlyGovernorOrGuardian {\\n        pause ? _pause() : _unpause();\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x0d3e9d48fe82f2ac81b5fda64e70a7426be0bc3a5cf35b34f245494cef6e78e0\",\"license\":\"MIT\"},\"contracts/agToken/layerZero/utils/IOFTCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n * @dev Forked from https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/token/oft/IOFTCore.sol\\n */\\ninterface IOFTCore is IERC165 {\\n    /// @notice Estimates send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n    /// @param _dstChainId L0 defined chain id to send tokens too\\n    /// @param _toAddress dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n    /// @param _amount amount of the tokens to transfer\\n    /// @param _useZro indicates to use zro to pay L0 fees\\n    /// @param _adapterParams flexible bytes array to indicate messaging adapter services in L0\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint256 _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\n\\n    /// @notice Sends `_amount` amount of token to (`_dstChainId`, `_toAddress`)\\n    /// @param _dstChainId the destination chain identifier\\n    /// @param _toAddress can be any size depending on the `dstChainId`.\\n    /// @param _amount the quantity of tokens in wei\\n    /// @param _refundAddress the address LayerZero refunds if too much message fee is sent\\n    /// @param _zroPaymentAddress set to address(0x0) if not paying in ZRO (LayerZero Token)\\n    /// @param _adapterParams is a flexible bytes array to indicate messaging adapter services\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    /// @notice Sends `_amount` amount of credit to (`_dstChainId`, `_toAddress`)\\n    /// @param _dstChainId the destination chain identifier\\n    /// @param _toAddress can be any size depending on the `dstChainId`.\\n    /// @param _amount the quantity of credit to send in wei\\n    /// @param _refundAddress the address LayerZero refunds if too much message fee is sent\\n    /// @param _zroPaymentAddress set to address(0x0) if not paying in ZRO (LayerZero Token)\\n    /// @param _adapterParams is a flexible bytes array to indicate messaging adapter services\\n    function sendCredit(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    /// @notice Sends `_amount` amount of token to (`_dstChainId`, `_toAddress`)\\n    /// @param _dstChainId The destination chain identifier\\n    /// @param _toAddress Can be any size depending on the `dstChainId`.\\n    /// @param _amount Quantity of tokens in wei\\n    /// @param _refundAddress Address LayerZero refunds if too much message fee is sent\\n    /// @param _zroPaymentAddress Set to address(0x0) if not paying in ZRO (LayerZero Token)\\n    /// @param _adapterParams Flexible bytes array to indicate messaging adapter services\\n    /// @param deadline Deadline parameter for the signature to be valid\\n    /// @dev The `v`, `r`, and `s` parameters are used as signature data\\n    function sendWithPermit(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Withdraws amount of canonical token from the `msg.sender` balance and sends it to the recipient\\n    /// @param amount Amount to withdraw\\n    /// @param recipient Address to send the canonical token to\\n    /// @return The amount of canonical token sent\\n    function withdraw(uint256 amount, address recipient) external returns (uint256);\\n\\n    /// @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n    /// `_nonce` is the outbound nonce\\n    event SendToChain(\\n        address indexed _sender,\\n        uint16 indexed _dstChainId,\\n        bytes indexed _toAddress,\\n        uint256 _amount,\\n        uint64 _nonce\\n    );\\n\\n    /// @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n    /// `_nonce` is the inbound nonce.\\n    event ReceiveFromChain(\\n        uint16 indexed _srcChainId,\\n        bytes indexed _srcAddress,\\n        address indexed _toAddress,\\n        uint256 _amount,\\n        uint64 _nonce\\n    );\\n}\\n\\n/// @dev Interface of the OFT standard\\ninterface IOFT is IOFTCore, IERC20 {\\n\\n}\\n\",\"keccak256\":\"0x5011e27f67d0c6c9dc5f504921b5b236929f4a6d8ac234b919a329334dc58cc3\",\"license\":\"MIT\"},\"contracts/agToken/layerZero/utils/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../../interfaces/external/layerZero/ILayerZeroReceiver.sol\\\";\\nimport \\\"../../../interfaces/external/layerZero/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"../../../interfaces/external/layerZero/ILayerZeroEndpoint.sol\\\";\\nimport \\\"../../../interfaces/ITreasury.sol\\\";\\n\\n/// @title NonblockingLzApp\\n/// @author Angle Core Team, forked from https://github.com/LayerZero-Labs/solidity-examples/\\n/// @notice Base contract for bridging using LayerZero\\nabstract contract NonblockingLzApp is Initializable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    /// @notice Layer Zero endpoint\\n    ILayerZeroEndpoint public lzEndpoint;\\n\\n    /// @notice Maps chainIds to failed messages to retry them\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    /// @notice Maps chainIds to their OFT address\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n\\n    /// @notice Reference to the treasury contract to fetch access control\\n    address public treasury;\\n\\n    // ================================== Events ===================================\\n\\n    event SetTrustedRemote(uint16 _srcChainId, bytes _srcAddress);\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload);\\n\\n    // =============================== Errors ================================\\n\\n    error NotGovernor();\\n    error NotGovernorOrGuardian();\\n    error InvalidEndpoint();\\n    error InvalidSource();\\n    error InvalidCaller();\\n    error InvalidPayload();\\n    error ZeroAddress();\\n\\n    // ============================= Constructor ===================================\\n\\n    //solhint-disable-next-line\\n    function __LzAppUpgradeable_init(address _endpoint, address _treasury) internal {\\n        if (_endpoint == address(0) || _treasury == address(0)) revert ZeroAddress();\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n        treasury = _treasury;\\n    }\\n\\n    // =============================== Modifiers ===================================\\n\\n    /// @notice Checks whether the `msg.sender` has the governor role or the guardian role\\n    modifier onlyGovernorOrGuardian() {\\n        if (!ITreasury(treasury).isGovernorOrGuardian(msg.sender)) revert NotGovernorOrGuardian();\\n        _;\\n    }\\n\\n    // ==================== External Permissionless Functions ======================\\n\\n    /// @notice Receives a message from the LZ endpoint and process it\\n    /// @param _srcChainId ChainId of the source chain - LayerZero standard\\n    /// @param _srcAddress Sender of the source chain\\n    /// @param _nonce Nounce of the message\\n    /// @param _payload Data: recipient address and amount\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        if (msg.sender != address(lzEndpoint)) revert InvalidEndpoint();\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        if (_srcAddress.length != trustedRemote.length || keccak256(_srcAddress) != keccak256(trustedRemote))\\n            revert InvalidSource();\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    /// @notice Retries a message that previously failed and was stored\\n    /// @param _srcChainId ChainId of the source chain - LayerZero standard\\n    /// @param _srcAddress Sender of the source chain\\n    /// @param _nonce Nounce of the message\\n    /// @param _payload Data: recipient address and amount\\n    function retryMessage(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        if (payloadHash == bytes32(0) || keccak256(_payload) != payloadHash) revert InvalidPayload();\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // ============================= Internal Functions ===================================\\n\\n    /// @notice Handles message receptions in a non blocking way\\n    /// @param _srcChainId ChainId of the source chain - LayerZero standard\\n    /// @param _srcAddress Sender of the source chain\\n    /// @param _nonce Nounce of the message\\n    /// @param _payload Data: recipient address and amount\\n    /// @dev public for the needs of try / catch but effectively internal\\n    function nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) public virtual {\\n        // only internal transaction\\n        if (msg.sender != address(this)) revert InvalidCaller();\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    /// @notice Handles message receptions in a non blocking way\\n    /// @param _srcChainId ChainId of the source chain - LayerZero standard\\n    /// @param _srcAddress Sender of the source chain\\n    /// @param _nonce Nounce of the message\\n    /// @param _payload Data: recipient address and amount\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    /// @notice Handles message receptions in a blocking way\\n    /// @param _srcChainId ChainId of the source chain - LayerZero standard\\n    /// @param _srcAddress Sender of the source chain\\n    /// @param _nonce Nounce of the message\\n    /// @param _payload Data: recipient address and amount\\n    function _blockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal {\\n        // try-catch all errors/exceptions\\n        try this.nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload) {\\n            // do nothing\\n        } catch {\\n            // error / exception\\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\\n        }\\n    }\\n\\n    /// @notice Sends a message to the LZ endpoint and process it\\n    /// @param _dstChainId L0 defined chain id to send tokens too\\n    /// @param _payload Data: recipient address and amount\\n    /// @param _refundAddress Address LayerZero refunds if too much message fee is sent\\n    /// @param _zroPaymentAddress Set to address(0x0) if not paying in ZRO (LayerZero Token)\\n    /// @param _adapterParams Flexible bytes array to indicate messaging adapter services in L0\\n    function _lzSend(\\n        uint16 _dstChainId,\\n        bytes memory _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams\\n    ) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        if (trustedRemote.length == 0) revert InvalidSource();\\n        //solhint-disable-next-line\\n        lzEndpoint.send{ value: msg.value }(\\n            _dstChainId,\\n            trustedRemote,\\n            _payload,\\n            _refundAddress,\\n            _zroPaymentAddress,\\n            _adapterParams\\n        );\\n    }\\n\\n    // ======================= Governance Functions ================================\\n\\n    /// @notice Sets the corresponding address on an other chain.\\n    /// @param _srcChainId ChainId of the source chain - LayerZero standard\\n    /// @param _srcAddress Address on the source chain\\n    /// @dev Used for both receiving and sending message\\n    /// @dev There can only be one trusted source per chain\\n    /// @dev Allows owner to set it multiple times.\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external onlyGovernorOrGuardian {\\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\\n    }\\n\\n    /// @notice Fetches the default LZ config\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address,\\n        uint256 _configType\\n    ) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    /// @notice Overrides the default LZ config\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint256 _configType,\\n        bytes calldata _config\\n    ) external override onlyGovernorOrGuardian {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    /// @notice Overrides the default LZ config\\n    function setSendVersion(uint16 _version) external override onlyGovernorOrGuardian {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    /// @notice Overrides the default LZ config\\n    function setReceiveVersion(uint16 _version) external override onlyGovernorOrGuardian {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    /// @notice Unpauses the receive functionalities\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress)\\n        external\\n        override\\n        onlyGovernorOrGuardian\\n    {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // ======================= View Functions ================================\\n\\n    /// @notice Checks if the `_srcAddress` corresponds to the trusted source\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0xe13a9a80746518afaad6414b85282ebf970fc3103eebb9b5c9193099b51ab620\",\"license\":\"MIT\"},\"contracts/agToken/layerZero/utils/OFTCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./NonblockingLzApp.sol\\\";\\nimport \\\"./IOFTCore.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\n\\n/// @title OFTCore\\n/// @author Forked from https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/token/oft/OFTCore.sol\\n/// but with slight modifications from the Angle Core Team which added return values to the `_creditTo` and `_debitFrom` functions\\n/// @notice Base contract for bridging using LayerZero\\nabstract contract OFTCore is NonblockingLzApp, ERC165Upgradeable, IOFTCore {\\n    // ==================== External Permissionless Functions ======================\\n\\n    /// @inheritdoc IOFTCore\\n    function sendWithPermit(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable virtual;\\n\\n    /// @inheritdoc IOFTCore\\n    function send(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams\\n    ) public payable virtual {\\n        _amount = _debitFrom(_dstChainId, _toAddress, _amount);\\n\\n        bytes memory payload = abi.encode(_toAddress, _amount);\\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n\\n        uint64 nonce = lzEndpoint.getOutboundNonce(_dstChainId, address(this));\\n        emit SendToChain(msg.sender, _dstChainId, _toAddress, _amount, nonce);\\n    }\\n\\n    /// @inheritdoc IOFTCore\\n    function sendCredit(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams\\n    ) public payable virtual {\\n        _amount = _debitCreditFrom(_dstChainId, _toAddress, _amount);\\n\\n        _send(_dstChainId, _toAddress, _amount, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    /// @inheritdoc IOFTCore\\n    function withdraw(uint256 amount, address recipient) external virtual returns (uint256);\\n\\n    // =========================== Internal Functions ==============================\\n\\n    /// @notice Internal function to send `_amount` amount of token to (`_dstChainId`, `_toAddress`)\\n    /// @param _dstChainId the destination chain identifier\\n    /// @param _toAddress can be any size depending on the `dstChainId`.\\n    /// @param _amount the quantity of tokens in wei\\n    /// @param _refundAddress the address LayerZero refunds if too much message fee is sent\\n    /// @param _zroPaymentAddress set to address(0x0) if not paying in ZRO (LayerZero Token)\\n    /// @param _adapterParams is a flexible bytes array to indicate messaging adapter services\\n    /// @dev Accounting and checks should be performed beforehand\\n    function _send(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams\\n    ) internal {\\n        bytes memory payload = abi.encode(_toAddress, _amount);\\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n\\n        uint64 nonce = lzEndpoint.getOutboundNonce(_dstChainId, address(this));\\n        emit SendToChain(msg.sender, _dstChainId, _toAddress, _amount, nonce);\\n    }\\n\\n    /// @inheritdoc NonblockingLzApp\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual override {\\n        // decode and load the toAddress\\n        (bytes memory toAddressBytes, uint256 amount) = abi.decode(_payload, (bytes, uint256));\\n        address toAddress;\\n        //solhint-disable-next-line\\n        assembly {\\n            toAddress := mload(add(toAddressBytes, 20))\\n        }\\n        amount = _creditTo(_srcChainId, toAddress, amount);\\n\\n        emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, amount, _nonce);\\n    }\\n\\n    /// @notice Makes accountability when bridging from this contract using canonical token\\n    /// @param _dstChainId ChainId of the destination chain - LayerZero standard\\n    /// @param _toAddress Recipient on the destination chain\\n    /// @param _amount Amount to bridge\\n    function _debitFrom(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount\\n    ) internal virtual returns (uint256);\\n\\n    /// @notice Makes accountability when bridging from this contract's credit\\n    /// @param _dstChainId ChainId of the destination chain - LayerZero standard\\n    /// @param _toAddress Recipient on the destination chain\\n    /// @param _amount Amount to bridge\\n    function _debitCreditFrom(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount\\n    ) internal virtual returns (uint256);\\n\\n    /// @notice Makes accountability when bridging to this contract\\n    /// @param _srcChainId ChainId of the source chain - LayerZero standard\\n    /// @param _toAddress Recipient on this chain\\n    /// @param _amount Amount to bridge\\n    function _creditTo(\\n        uint16 _srcChainId,\\n        address _toAddress,\\n        uint256 _amount\\n    ) internal virtual returns (uint256);\\n\\n    // ========================== View Functions ===================================\\n\\n    /// @inheritdoc ERC165Upgradeable\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Upgradeable, IERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOFTCore).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @inheritdoc IOFTCore\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount,\\n        bool _useZro,\\n        bytes memory _adapterParams\\n    ) public view virtual override returns (uint256 nativeFee, uint256 zroFee) {\\n        // mock the payload for send()\\n        bytes memory payload = abi.encode(_toAddress, _amount);\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x118b8da82ad6c70c76a47170463bbf39a325a6af1edbd6e58468ed2ca97e6312\",\"license\":\"MIT\"},\"contracts/interfaces/IAgToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title IAgToken\\n/// @author Angle Core Team\\n/// @notice Interface for the stablecoins `AgToken` contracts\\n/// @dev This interface only contains functions of the `AgToken` contract which are called by other contracts\\n/// of this module or of the first module of the Angle Protocol\\ninterface IAgToken is IERC20Upgradeable {\\n    // ======================= Minter Role Only Functions ===========================\\n\\n    /// @notice Lets the `StableMaster` contract or another whitelisted contract mint agTokens\\n    /// @param account Address to mint to\\n    /// @param amount Amount to mint\\n    /// @dev The contracts allowed to issue agTokens are the `StableMaster` contract, `VaultManager` contracts\\n    /// associated to this stablecoin as well as the flash loan module (if activated) and potentially contracts\\n    /// whitelisted by governance\\n    function mint(address account, uint256 amount) external;\\n\\n    /// @notice Burns `amount` tokens from a `burner` address after being asked to by `sender`\\n    /// @param amount Amount of tokens to burn\\n    /// @param burner Address to burn from\\n    /// @param sender Address which requested the burn from `burner`\\n    /// @dev This method is to be called by a contract with the minter right after being requested\\n    /// to do so by a `sender` address willing to burn tokens from another `burner` address\\n    /// @dev The method checks the allowance between the `sender` and the `burner`\\n    function burnFrom(\\n        uint256 amount,\\n        address burner,\\n        address sender\\n    ) external;\\n\\n    /// @notice Burns `amount` tokens from a `burner` address\\n    /// @param amount Amount of tokens to burn\\n    /// @param burner Address to burn from\\n    /// @dev This method is to be called by a contract with a minter right on the AgToken after being\\n    /// requested to do so by an address willing to burn tokens from its address\\n    function burnSelf(uint256 amount, address burner) external;\\n\\n    // ========================= Treasury Only Functions ===========================\\n\\n    /// @notice Adds a minter in the contract\\n    /// @param minter Minter address to add\\n    /// @dev Zero address checks are performed directly in the `Treasury` contract\\n    function addMinter(address minter) external;\\n\\n    /// @notice Removes a minter from the contract\\n    /// @param minter Minter address to remove\\n    /// @dev This function can also be called by a minter wishing to revoke itself\\n    function removeMinter(address minter) external;\\n\\n    /// @notice Sets a new treasury contract\\n    /// @param _treasury New treasury address\\n    function setTreasury(address _treasury) external;\\n\\n    // ========================= External functions ================================\\n\\n    /// @notice Checks whether an address has the right to mint agTokens\\n    /// @param minter Address for which the minting right should be checked\\n    /// @return Whether the address has the right to mint agTokens or not\\n    function isMinter(address minter) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcd50d86128e457543483981ea6127cb8dac03584b919614352aa89d7e991405c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAgTokenSideChainMultiBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title IAgTokenSideChainMultiBridge\\n/// @author Angle Core Team\\n/// @notice Interface for the canonical `AgToken` contracts\\n/// @dev This interface only contains functions useful for bridge tokens to interact with the canonical token\\ninterface IAgTokenSideChainMultiBridge is IERC20PermitUpgradeable, IERC20Upgradeable {\\n    /// @notice Mints the canonical token from a supported bridge token\\n    /// @param bridgeToken Bridge token to use to mint\\n    /// @param amount Amount of bridge tokens to send\\n    /// @param to Address to which the stablecoin should be sent\\n    /// @return Amount of the canonical stablecoin actually minted\\n    /// @dev Some fees may be taken by the protocol depending on the token used and on the address calling\\n    function swapIn(\\n        address bridgeToken,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /// @notice Burns the canonical token in exchange for a bridge token\\n    /// @param bridgeToken Bridge token required\\n    /// @param amount Amount of canonical tokens to burn\\n    /// @param to Address to which the bridge token should be sent\\n    /// @return Amount of bridge tokens actually sent back\\n    /// @dev Some fees may be taken by the protocol depending on the token used and on the address calling\\n    function swapOut(\\n        address bridgeToken,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xe1ec133c3b4664ebbba30592749ec916d6dbd32cf31b79dede38bd3bbc5a66a7\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICoreBorrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\n/// @title ICoreBorrow\\n/// @author Angle Core Team\\n/// @notice Interface for the `CoreBorrow` contract\\n/// @dev This interface only contains functions of the `CoreBorrow` contract which are called by other contracts\\n/// of this module\\ninterface ICoreBorrow {\\n    /// @notice Checks if an address corresponds to a treasury of a stablecoin with a flash loan\\n    /// module initialized on it\\n    /// @param treasury Address to check\\n    /// @return Whether the address has the `FLASHLOANER_TREASURY_ROLE` or not\\n    function isFlashLoanerTreasury(address treasury) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GOVERNOR_ROLE` or not\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor or a guardian of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GUARDIAN_ROLE` or not\\n    /// @dev Governance should make sure when adding a governor to also give this governor the guardian\\n    /// role by calling the `addGovernor` function\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x25b65b3f506ca91745a444502a36f0556585d82d9d60f4bd32fbcaabc12840d4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFlashAngle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IAgToken.sol\\\";\\nimport \\\"./ICoreBorrow.sol\\\";\\n\\n/// @title IFlashAngle\\n/// @author Angle Core Team\\n/// @notice Interface for the `FlashAngle` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module\\ninterface IFlashAngle {\\n    /// @notice Reference to the `CoreBorrow` contract managing the FlashLoan module\\n    function core() external view returns (ICoreBorrow);\\n\\n    /// @notice Sends the fees taken from flash loans to the treasury contract associated to the stablecoin\\n    /// @param stablecoin Stablecoin from which profits should be sent\\n    /// @return balance Amount of profits sent\\n    /// @dev This function can only be called by the treasury contract\\n    function accrueInterestToTreasury(IAgToken stablecoin) external returns (uint256 balance);\\n\\n    /// @notice Adds support for a stablecoin\\n    /// @param _treasury Treasury associated to the stablecoin to add support for\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function addStablecoinSupport(address _treasury) external;\\n\\n    /// @notice Removes support for a stablecoin\\n    /// @param _treasury Treasury associated to the stablecoin to remove support for\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function removeStablecoinSupport(address _treasury) external;\\n\\n    /// @notice Sets a new core contract\\n    /// @param _core Core contract address to set\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function setCore(address _core) external;\\n}\\n\",\"keccak256\":\"0xc17654e512897efe41e3f1173c07dd4676e8c699a72b859d14b473d1e8300e45\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IAgToken.sol\\\";\\nimport \\\"./ICoreBorrow.sol\\\";\\nimport \\\"./IFlashAngle.sol\\\";\\n\\n/// @title ITreasury\\n/// @author Angle Core Team\\n/// @notice Interface for the `Treasury` contract\\n/// @dev This interface only contains functions of the `Treasury` which are called by other contracts\\n/// of this module\\ninterface ITreasury {\\n    /// @notice Stablecoin handled by this `treasury` contract\\n    function stablecoin() external view returns (IAgToken);\\n\\n    /// @notice Checks whether a given address has the  governor role\\n    /// @param admin Address to check\\n    /// @return Whether the address has the governor role\\n    /// @dev Access control is only kept in the `CoreBorrow` contract\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether a given address has the guardian or the governor role\\n    /// @param admin Address to check\\n    /// @return Whether the address has the guardian or the governor role\\n    /// @dev Access control is only kept in the `CoreBorrow` contract which means that this function\\n    /// queries the `CoreBorrow` contract\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether a given address has well been initialized in this contract\\n    /// as a `VaultManager``\\n    /// @param _vaultManager Address to check\\n    /// @return Whether the address has been initialized or not\\n    function isVaultManager(address _vaultManager) external view returns (bool);\\n\\n    /// @notice Sets a new flash loan module for this stablecoin\\n    /// @param _flashLoanModule Reference to the new flash loan module\\n    /// @dev This function removes the minting right to the old flash loan module and grants\\n    /// it to the new module\\n    function setFlashLoanModule(address _flashLoanModule) external;\\n}\\n\",\"keccak256\":\"0xced9b7256fcbedc75682037e11ce51fe9116e5604794b8545e00dea0607629cc\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/layerZero/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint256 _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint256 _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x9db927cd0092069df6a94a18c70f9eb915223ce703e3f1acf37b74f33336c90d\",\"license\":\"MIT\"},\"contracts/interfaces/external/layerZero/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0xac1966c1229bd4dc36b6c69eeb94a537bd9aa2198d7623b9ba7f8f7dbe79bb4c\",\"license\":\"MIT\"},\"contracts/interfaces/external/layerZero/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint256 _configType,\\n        bytes calldata _config\\n    ) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0x3593d932a05620902af8c87a3e18b05a28b11a5f8ec1e7b1967fa401fbd562ab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b620020941760201c565b15905090565b3b151590565b6140a280620001126000396000f3fe6080604052600436106102835760003560e01c806366ad5c8a11610153578063c9aba0aa116100cb578063e09e911e1161007f578063eed33cef11610064578063eed33cef146107a8578063f1878922146107bb578063f5ecbdbc146107db57600080fd5b8063e09e911e14610773578063eb8d72b71461078857600080fd5b8063ceb76b55116100b0578063ceb76b55146106df578063d1deba1f1461070d578063dd62ed3e1461072057600080fd5b8063c9aba0aa1461069f578063cbed8b9c146106bf57600080fd5b806395d89b4111610122578063a457c2d711610107578063a457c2d71461062c578063a9059cbb1461064c578063b353aaa71461066c57600080fd5b806395d89b41146105f7578063a0712d681461060c57600080fd5b806366ad5c8a1461056157806370a08231146105815780637533d788146105c457806385edd8ae146105e457600080fd5b806323b872dd1161020157806342966c68116101b55780635b8c41e61161019a5780635b8c41e6146104a85780635c975abb146104f757806361d027b31461050f57600080fd5b806342966c681461046857806342d65a8d1461048857600080fd5b8063313ce567116101e6578063313ce5671461040c57806339509351146104285780633d8b38f61461044857600080fd5b806323b872dd146103b75780632a205e3d146103d757600080fd5b806307e0db171161025857806310ddb1371161023d57806310ddb1371461036f57806310f958251461038f57806318160ddd146103a257600080fd5b806307e0db171461032f578063095ea7b31461034f57600080fd5b80621d356714610288578062f714ce146102aa57806301ffc9a7146102dd57806306fdde031461030d575b600080fd5b34801561029457600080fd5b506102a86102a3366004613531565b6107fb565b005b3480156102b657600080fd5b506102ca6102c53660046135e7565b610959565b6040519081526020015b60405180910390f35b3480156102e957600080fd5b506102fd6102f8366004613617565b610a35565b60405190151581526020016102d4565b34801561031957600080fd5b50610322610abc565b6040516102d491906136cf565b34801561033b57600080fd5b506102a861034a3660046136e2565b610b4e565b34801561035b57600080fd5b506102fd61036a3660046136fd565b610c9f565b34801561037b57600080fd5b506102a861038a3660046136e2565b610cb5565b6102a861039d366004613729565b610ddc565b3480156103ae57600080fd5b5060ca546102ca565b3480156103c357600080fd5b506102fd6103d23660046137cf565b610dff565b3480156103e357600080fd5b506103f76103f236600461381e565b610eec565b604080519283526020830191909152016102d4565b34801561041857600080fd5b50604051601281526020016102d4565b34801561043457600080fd5b506102fd6104433660046136fd565b610fe4565b34801561045457600080fd5b506102fd6104633660046138fa565b61102d565b34801561047457600080fd5b506102a861048336600461394d565b6110f9565b34801561049457600080fd5b506102a86104a33660046138fa565b6111e8565b3480156104b457600080fd5b506102ca6104c3366004613966565b6001602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561050357600080fd5b5060fa5460ff166102fd565b34801561051b57600080fd5b5060035461053c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102d4565b34801561056d57600080fd5b506102a861057c366004613531565b611346565b34801561058d57600080fd5b506102ca61059c3660046139c8565b73ffffffffffffffffffffffffffffffffffffffff16600090815260c8602052604090205490565b3480156105d057600080fd5b506103226105df3660046136e2565b611391565b6102a86105f23660046139f6565b61142b565b34801561060357600080fd5b506103226114f4565b34801561061857600080fd5b506102a861062736600461394d565b611503565b34801561063857600080fd5b506102fd6106473660046136fd565b6115ef565b34801561065857600080fd5b506102fd6106673660046136fd565b6116c7565b34801561067857600080fd5b5060005461053c9062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b3480156106ab57600080fd5b506102a86106ba366004613ac5565b6116d4565b3480156106cb57600080fd5b506102a86106da366004613b56565b61190c565b3480156106eb57600080fd5b5061012c5461053c9073ffffffffffffffffffffffffffffffffffffffff1681565b6102a861071b366004613531565b611a70565b34801561072c57600080fd5b506102ca61073b366004613bc5565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260c96020908152604080832093909416825291909152205490565b34801561077f57600080fd5b506102a8611b56565b34801561079457600080fd5b506102a86107a33660046138fa565b611c66565b6102a86107b6366004613729565b611d8d565b3480156107c757600080fd5b506102a86107d6366004613bf3565b611eda565b3480156107e757600080fd5b506103226107f6366004613c10565b611fb7565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff163314610852576040517ff1cbb56700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff84166000908152600260205260408120805461087090613c5d565b80601f016020809104026020016040519081016040528092919081815260200182805461089c90613c5d565b80156108e95780601f106108be576101008083540402835291602001916108e9565b820191906000526020600020905b8154815290600101906020018083116108cc57829003601f168201915b505050505090508051845114158061090f57508080519060200120848051906020012014155b15610946576040517f8154374b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109528585858561209a565b5050505050565b60006109663330856121a5565b61012c546040517f151dd7550000000000000000000000000000000000000000000000000000000081523060048201526024810185905273ffffffffffffffffffffffffffffffffffffffff84811660448301529091169063151dd755906064016020604051808303816000875af11580156109e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0a9190613cb1565b30600090815260c860205260409020549091508015610a2e57610a2e3033836121a5565b5092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082161580610aa757507fffffffff0000000000000000000000000000000000000000000000000000000082167f36372b0700000000000000000000000000000000000000000000000000000000145b80610ab65750610ab682612458565b92915050565b606060cb8054610acb90613c5d565b80601f0160208091040260200160405190810160405280929190818152602001828054610af790613c5d565b8015610b445780601f10610b1957610100808354040283529160200191610b44565b820191906000526020600020905b815481529060010190602001808311610b2757829003601f168201915b5050505050905090565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015610bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be09190613cca565b610c16576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517f07e0db1700000000000000000000000000000000000000000000000000000000815261ffff831660048201526201000090910473ffffffffffffffffffffffffffffffffffffffff16906307e0db17906024015b600060405180830381600087803b158015610c8b57600080fd5b505af1158015610952573d6000803e3d6000fd5b6000610cac3384846124ef565b50600192915050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015610d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d479190613cca565b610d7d576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517f10ddb13700000000000000000000000000000000000000000000000000000000815261ffff831660048201526201000090910473ffffffffffffffffffffffffffffffffffffffff16906310ddb13790602401610c71565b610de78686866126a3565b9350610df7868686868686612722565b505050505050565b6000610e0c8484846121a5565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260c96020908152604080832033845290915290205482811015610ed2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610edf85338584036124ef565b60019150505b9392505050565b60008060008686604051602001610f04929190613ce7565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152908290526000547f40a7bb1000000000000000000000000000000000000000000000000000000000835290925062010000900473ffffffffffffffffffffffffffffffffffffffff16906340a7bb1090610f95908b90309086908b908b90600401613d09565b6040805180830381865afa158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd59190613d68565b92509250509550959350505050565b33600081815260c96020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091610cac918590611028908690613dbb565b6124ef565b61ffff83166000908152600260205260408120805482919061104e90613c5d565b80601f016020809104026020016040519081016040528092919081815260200182805461107a90613c5d565b80156110c75780601f1061109c576101008083540402835291602001916110c7565b820191906000526020600020905b8154815290600101906020018083116110aa57829003601f168201915b5050505050905083836040516110de929190613dd3565b60405180910390208180519060200120149150509392505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015611167573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118b9190613cca565b6111c1576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012c546111e59073ffffffffffffffffffffffffffffffffffffffff1682612737565b50565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015611256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127a9190613cca565b6112b0576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517f42d65a8d0000000000000000000000000000000000000000000000000000000081526201000090910473ffffffffffffffffffffffffffffffffffffffff16906342d65a8d9061130f90869086908690600401613e2c565b600060405180830381600087803b15801561132957600080fd5b505af115801561133d573d6000803e3d6000fd5b50505050505050565b33301461137f576040517f48f5c3ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61138b84848484612921565b50505050565b600260205260009081526040902080546113aa90613c5d565b80601f01602080910402602001604051908101604052809291908181526020018280546113d690613c5d565b80156114235780601f106113f857610100808354040283529160200191611423565b820191906000526020600020905b81548152906001019060200180831161140657829003601f168201915b505050505081565b61012c546040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018a90526064810186905260ff8516608482015260a4810184905260c4810183905273ffffffffffffffffffffffffffffffffffffffff9091169063d505accf9060e401600060405180830381600087803b1580156114c257600080fd5b505af11580156114d6573d6000803e3d6000fd5b505050506114e88a8a8a8a8a8a611d8d565b50505050505050505050565b606060cc8054610acb90613c5d565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015611571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115959190613cca565b6115cb576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012c546111e59073ffffffffffffffffffffffffffffffffffffffff16826129cc565b33600090815260c96020908152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152812054828110156116b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610ec9565b6116bd33858584036124ef565b5060019392505050565b6000610cac3384846121a5565b600054610100900460ff166116ef5760005460ff16156116f3565b303b155b61177f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610ec9565b600054610100900460ff161580156117be57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6117c88686612aec565b6117d28484612baa565b8273ffffffffffffffffffffffffffffffffffffffff1663e9cbd8226040518163ffffffff1660e01b8152600401602060405180830381865afa15801561181d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118419190613e4a565b61012c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691821790556118b29030907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6124ef565b61012c546118d69073ffffffffffffffffffffffffffffffffffffffff16836129cc565b8015610df757600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa15801561197a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199e9190613cca565b6119d4576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517fcbed8b9c0000000000000000000000000000000000000000000000000000000081526201000090910473ffffffffffffffffffffffffffffffffffffffff169063cbed8b9c90611a379088908890889088908890600401613e67565b600060405180830381600087803b158015611a5157600080fd5b505af1158015611a65573d6000803e3d6000fd5b505050505050505050565b61ffff84166000908152600160205260408082209051611a91908690613ea0565b908152604080516020928190038301902067ffffffffffffffff8616600090815292529020549050801580611acc5750815160208301208114155b15611b03576040517f7c6953f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff85166000908152600160205260408082209051611b24908790613ea0565b908152604080516020928190038301902067ffffffffffffffff87166000908152925290205561095285858585612921565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015611bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be89190613cca565b611c1e576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012c54611c6490309073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6124ef565b565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015611cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf89190613cca565b611d2e576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff83166000908152600260205260409020611d4c9083836132bf565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab838383604051611d8093929190613e2c565b60405180910390a1505050565b611d98868686612c8d565b935060008585604051602001611daf929190613ce7565b6040516020818303038152906040529050611dcd8782868686612e54565b600080546040517f7a14574800000000000000000000000000000000000000000000000000000000815261ffff8a1660048201523060248201526201000090910473ffffffffffffffffffffffffffffffffffffffff1690637a14574890604401602060405180830381865afa158015611e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6f9190613ebc565b905086604051611e7f9190613ea0565b6040805191829003822088835267ffffffffffffffff841660208401529161ffff8b169133917f024797cc77ce15dc717112d54fb1df125fdfd8c81344fb046c5e074427ce1543910160405180910390a45050505050505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015611f48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6c9190613cca565b611fa2576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80611faf576111e5612fcf565b6111e56130b0565b6000546040517ff5ecbdbc00000000000000000000000000000000000000000000000000000000815261ffff8087166004830152851660248201523060448201526064810183905260609162010000900473ffffffffffffffffffffffffffffffffffffffff169063f5ecbdbc90608401600060405180830381865afa158015612045573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261208b9190810190613f26565b95945050505050565b3b151590565b6040517f66ad5c8a00000000000000000000000000000000000000000000000000000000815230906366ad5c8a906120dc908790879087908790600401613f5b565b600060405180830381600087803b1580156120f657600080fd5b505af1925050508015612107575060015b61138b578080519060200120600160008661ffff1661ffff1681526020019081526020016000208460405161213c9190613ea0565b90815260408051918290036020908101832067ffffffffffffffff87166000908152915220919091557fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d90612198908690869086908690613f5b565b60405180910390a161138b565b73ffffffffffffffffffffffffffffffffffffffff8316612248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610ec9565b73ffffffffffffffffffffffffffffffffffffffff82166122eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610ec9565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260c86020526040902054818110156123a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610ec9565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260c860205260408082208585039055918516815290812080548492906123e5908490613dbb565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161244b91815260200190565b60405180910390a361138b565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5110f697000000000000000000000000000000000000000000000000000000001480610ab657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610ab6565b73ffffffffffffffffffffffffffffffffffffffff8316612591576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610ec9565b73ffffffffffffffffffffffffffffffffffffffff8216612634576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610ec9565b73ffffffffffffffffffffffffffffffffffffffff838116600081815260c9602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006126b160fa5460ff1690565b15612718576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610ec9565b610a2e3383612737565b60008585604051602001611daf929190613ce7565b73ffffffffffffffffffffffffffffffffffffffff82166127da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610ec9565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260c8602052604090205481811015612890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610ec9565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260c860205260408120838303905560ca80548492906128cc908490613f9a565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612696565b505050565b600080828060200190518101906129389190613fb1565b6014820151919350915061294d878284613170565b91508073ffffffffffffffffffffffffffffffffffffffff16866040516129749190613ea0565b6040805191829003822085835267ffffffffffffffff891660208401529161ffff8b16917f64e10c37f404d128982dce114f5d233c14c5c7f6d8db93099e3d99dacb9e27ba910160405180910390a450505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216612a49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610ec9565b8060ca6000828254612a5b9190613dbb565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600090815260c8602052604081208054839290612a95908490613dbb565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600054610100900460ff16612b83576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610ec9565b8151612b969060cb906020850190613361565b50805161291c9060cc906020840190613361565b73ffffffffffffffffffffffffffffffffffffffff82161580612be1575073ffffffffffffffffffffffffffffffffffffffff8116155b15612c18576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff94851602179055600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909216179055565b6000612c9b60fa5460ff1690565b15612d02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610ec9565b61012c546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810184905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af1158015612d80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da49190613cca565b5061012c546040517fd44ad63f000000000000000000000000000000000000000000000000000000008152306004820181905260248201859052604482015273ffffffffffffffffffffffffffffffffffffffff9091169063d44ad63f906064016020604051808303816000875af1158015612e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e489190613cb1565b9050610ee53082612737565b61ffff851660009081526002602052604081208054612e7290613c5d565b80601f0160208091040260200160405190810160405280929190818152602001828054612e9e90613c5d565b8015612eeb5780601f10612ec057610100808354040283529160200191612eeb565b820191906000526020600020905b815481529060010190602001808311612ece57829003601f168201915b50505050509050805160001415612f2e576040517f8154374b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517fc58031000000000000000000000000000000000000000000000000000000000081526201000090910473ffffffffffffffffffffffffffffffffffffffff169063c5803100903490612f95908a9086908b908b908b908b90600401613ff8565b6000604051808303818588803b158015612fae57600080fd5b505af1158015612fc2573d6000803e3d6000fd5b5050505050505050505050565b60fa5460ff1661303b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610ec9565b60fa80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60fa5460ff161561311d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610ec9565b60fa80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586130863390565b600061317e60fa5460ff1690565b156131e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610ec9565b6131ef30836129cc565b61012c546040517f151dd7550000000000000000000000000000000000000000000000000000000081523060048201526024810184905273ffffffffffffffffffffffffffffffffffffffff85811660448301529091169063151dd755906064016020604051808303816000875af115801561326f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132939190613cb1565b30600090815260c8602052604090205490915080156132b7576132b73085836121a5565b509392505050565b8280546132cb90613c5d565b90600052602060002090601f0160209004810192826132ed5760008555613351565b82601f10613324578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555613351565b82800160010185558215613351579182015b82811115613351578235825591602001919060010190613336565b5061335d9291506133d5565b5090565b82805461336d90613c5d565b90600052602060002090601f01602090048101928261338f5760008555613351565b82601f106133a857805160ff1916838001178555613351565b82800160010185558215613351579182015b828111156133515782518255916020019190600101906133ba565b5b8082111561335d57600081556001016133d6565b803561ffff811681146133fc57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561347757613477613401565b604052919050565b600067ffffffffffffffff82111561349957613499613401565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f8301126134d657600080fd5b81356134e96134e48261347f565b613430565b8181528460208386010111156134fe57600080fd5b816020850160208301376000918101602001919091529392505050565b67ffffffffffffffff811681146111e557600080fd5b6000806000806080858703121561354757600080fd5b613550856133ea565b9350602085013567ffffffffffffffff8082111561356d57600080fd5b613579888389016134c5565b94506040870135915061358b8261351b565b909250606086013590808211156135a157600080fd5b506135ae878288016134c5565b91505092959194509250565b73ffffffffffffffffffffffffffffffffffffffff811681146111e557600080fd5b80356133fc816135ba565b600080604083850312156135fa57600080fd5b82359150602083013561360c816135ba565b809150509250929050565b60006020828403121561362957600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610ee557600080fd5b60005b8381101561367457818101518382015260200161365c565b8381111561138b5750506000910152565b6000815180845261369d816020860160208601613659565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610ee56020830184613685565b6000602082840312156136f457600080fd5b610ee5826133ea565b6000806040838503121561371057600080fd5b823561371b816135ba565b946020939093013593505050565b60008060008060008060c0878903121561374257600080fd5b61374b876133ea565b9550602087013567ffffffffffffffff8082111561376857600080fd5b6137748a838b016134c5565b9650604089013595506060890135915061378d826135ba565b90935060808801359061379f826135ba565b90925060a088013590808211156137b557600080fd5b506137c289828a016134c5565b9150509295509295509295565b6000806000606084860312156137e457600080fd5b83356137ef816135ba565b925060208401356137ff816135ba565b929592945050506040919091013590565b80151581146111e557600080fd5b600080600080600060a0868803121561383657600080fd5b61383f866133ea565b9450602086013567ffffffffffffffff8082111561385c57600080fd5b61386889838a016134c5565b9550604088013594506060880135915061388182613810565b9092506080870135908082111561389757600080fd5b506138a4888289016134c5565b9150509295509295909350565b60008083601f8401126138c357600080fd5b50813567ffffffffffffffff8111156138db57600080fd5b6020830191508360208285010111156138f357600080fd5b9250929050565b60008060006040848603121561390f57600080fd5b613918846133ea565b9250602084013567ffffffffffffffff81111561393457600080fd5b613940868287016138b1565b9497909650939450505050565b60006020828403121561395f57600080fd5b5035919050565b60008060006060848603121561397b57600080fd5b613984846133ea565b9250602084013567ffffffffffffffff8111156139a057600080fd5b6139ac868287016134c5565b92505060408401356139bd8161351b565b809150509250925092565b6000602082840312156139da57600080fd5b8135610ee5816135ba565b803560ff811681146133fc57600080fd5b6000806000806000806000806000806101408b8d031215613a1657600080fd5b613a1f8b6133ea565b995060208b013567ffffffffffffffff80821115613a3c57600080fd5b613a488e838f016134c5565b9a5060408d01359950613a5d60608e016135dc565b9850613a6b60808e016135dc565b975060a08d0135915080821115613a8157600080fd5b50613a8e8d828e016134c5565b95505060c08b01359350613aa460e08c016139e5565b92506101008b013591506101208b013590509295989b9194979a5092959850565b600080600080600060a08688031215613add57600080fd5b853567ffffffffffffffff80821115613af557600080fd5b613b0189838a016134c5565b96506020880135915080821115613b1757600080fd5b50613b24888289016134c5565b9450506040860135613b35816135ba565b92506060860135613b45816135ba565b949793965091946080013592915050565b600080600080600060808688031215613b6e57600080fd5b613b77866133ea565b9450613b85602087016133ea565b935060408601359250606086013567ffffffffffffffff811115613ba857600080fd5b613bb4888289016138b1565b969995985093965092949392505050565b60008060408385031215613bd857600080fd5b8235613be3816135ba565b9150602083013561360c816135ba565b600060208284031215613c0557600080fd5b8135610ee581613810565b60008060008060808587031215613c2657600080fd5b613c2f856133ea565b9350613c3d602086016133ea565b92506040850135613c4d816135ba565b9396929550929360600135925050565b600181811c90821680613c7157607f821691505b60208210811415613cab577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060208284031215613cc357600080fd5b5051919050565b600060208284031215613cdc57600080fd5b8151610ee581613810565b604081526000613cfa6040830185613685565b90508260208301529392505050565b61ffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015260a060408201526000613d4260a0830186613685565b84151560608401528281036080840152613d5c8185613685565b98975050505050505050565b60008060408385031215613d7b57600080fd5b505080516020909101519092909150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115613dce57613dce613d8c565b500190565b8183823760009101908152919050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b61ffff8416815260406020820152600061208b604083018486613de3565b600060208284031215613e5c57600080fd5b8151610ee5816135ba565b600061ffff808816835280871660208401525084604083015260806060830152613e95608083018486613de3565b979650505050505050565b60008251613eb2818460208701613659565b9190910192915050565b600060208284031215613ece57600080fd5b8151610ee58161351b565b600082601f830112613eea57600080fd5b8151613ef86134e48261347f565b818152846020838601011115613f0d57600080fd5b613f1e826020830160208701613659565b949350505050565b600060208284031215613f3857600080fd5b815167ffffffffffffffff811115613f4f57600080fd5b613f1e84828501613ed9565b61ffff85168152608060208201526000613f786080830186613685565b67ffffffffffffffff851660408401528281036060840152613e958185613685565b600082821015613fac57613fac613d8c565b500390565b60008060408385031215613fc457600080fd5b825167ffffffffffffffff811115613fdb57600080fd5b613fe785828601613ed9565b925050602083015190509250929050565b61ffff8716815260c06020820152600061401560c0830188613685565b82810360408401526140278188613685565b73ffffffffffffffffffffffffffffffffffffffff87811660608601528616608085015283810360a0850152905061405f8185613685565b999850505050505050505056fea2646970667358221220d9683c390df6982687d1acd7a04eaff5d7c4eadad30edb98754705321e77ec5964736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106102835760003560e01c806366ad5c8a11610153578063c9aba0aa116100cb578063e09e911e1161007f578063eed33cef11610064578063eed33cef146107a8578063f1878922146107bb578063f5ecbdbc146107db57600080fd5b8063e09e911e14610773578063eb8d72b71461078857600080fd5b8063ceb76b55116100b0578063ceb76b55146106df578063d1deba1f1461070d578063dd62ed3e1461072057600080fd5b8063c9aba0aa1461069f578063cbed8b9c146106bf57600080fd5b806395d89b4111610122578063a457c2d711610107578063a457c2d71461062c578063a9059cbb1461064c578063b353aaa71461066c57600080fd5b806395d89b41146105f7578063a0712d681461060c57600080fd5b806366ad5c8a1461056157806370a08231146105815780637533d788146105c457806385edd8ae146105e457600080fd5b806323b872dd1161020157806342966c68116101b55780635b8c41e61161019a5780635b8c41e6146104a85780635c975abb146104f757806361d027b31461050f57600080fd5b806342966c681461046857806342d65a8d1461048857600080fd5b8063313ce567116101e6578063313ce5671461040c57806339509351146104285780633d8b38f61461044857600080fd5b806323b872dd146103b75780632a205e3d146103d757600080fd5b806307e0db171161025857806310ddb1371161023d57806310ddb1371461036f57806310f958251461038f57806318160ddd146103a257600080fd5b806307e0db171461032f578063095ea7b31461034f57600080fd5b80621d356714610288578062f714ce146102aa57806301ffc9a7146102dd57806306fdde031461030d575b600080fd5b34801561029457600080fd5b506102a86102a3366004613531565b6107fb565b005b3480156102b657600080fd5b506102ca6102c53660046135e7565b610959565b6040519081526020015b60405180910390f35b3480156102e957600080fd5b506102fd6102f8366004613617565b610a35565b60405190151581526020016102d4565b34801561031957600080fd5b50610322610abc565b6040516102d491906136cf565b34801561033b57600080fd5b506102a861034a3660046136e2565b610b4e565b34801561035b57600080fd5b506102fd61036a3660046136fd565b610c9f565b34801561037b57600080fd5b506102a861038a3660046136e2565b610cb5565b6102a861039d366004613729565b610ddc565b3480156103ae57600080fd5b5060ca546102ca565b3480156103c357600080fd5b506102fd6103d23660046137cf565b610dff565b3480156103e357600080fd5b506103f76103f236600461381e565b610eec565b604080519283526020830191909152016102d4565b34801561041857600080fd5b50604051601281526020016102d4565b34801561043457600080fd5b506102fd6104433660046136fd565b610fe4565b34801561045457600080fd5b506102fd6104633660046138fa565b61102d565b34801561047457600080fd5b506102a861048336600461394d565b6110f9565b34801561049457600080fd5b506102a86104a33660046138fa565b6111e8565b3480156104b457600080fd5b506102ca6104c3366004613966565b6001602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561050357600080fd5b5060fa5460ff166102fd565b34801561051b57600080fd5b5060035461053c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102d4565b34801561056d57600080fd5b506102a861057c366004613531565b611346565b34801561058d57600080fd5b506102ca61059c3660046139c8565b73ffffffffffffffffffffffffffffffffffffffff16600090815260c8602052604090205490565b3480156105d057600080fd5b506103226105df3660046136e2565b611391565b6102a86105f23660046139f6565b61142b565b34801561060357600080fd5b506103226114f4565b34801561061857600080fd5b506102a861062736600461394d565b611503565b34801561063857600080fd5b506102fd6106473660046136fd565b6115ef565b34801561065857600080fd5b506102fd6106673660046136fd565b6116c7565b34801561067857600080fd5b5060005461053c9062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b3480156106ab57600080fd5b506102a86106ba366004613ac5565b6116d4565b3480156106cb57600080fd5b506102a86106da366004613b56565b61190c565b3480156106eb57600080fd5b5061012c5461053c9073ffffffffffffffffffffffffffffffffffffffff1681565b6102a861071b366004613531565b611a70565b34801561072c57600080fd5b506102ca61073b366004613bc5565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260c96020908152604080832093909416825291909152205490565b34801561077f57600080fd5b506102a8611b56565b34801561079457600080fd5b506102a86107a33660046138fa565b611c66565b6102a86107b6366004613729565b611d8d565b3480156107c757600080fd5b506102a86107d6366004613bf3565b611eda565b3480156107e757600080fd5b506103226107f6366004613c10565b611fb7565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff163314610852576040517ff1cbb56700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff84166000908152600260205260408120805461087090613c5d565b80601f016020809104026020016040519081016040528092919081815260200182805461089c90613c5d565b80156108e95780601f106108be576101008083540402835291602001916108e9565b820191906000526020600020905b8154815290600101906020018083116108cc57829003601f168201915b505050505090508051845114158061090f57508080519060200120848051906020012014155b15610946576040517f8154374b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109528585858561209a565b5050505050565b60006109663330856121a5565b61012c546040517f151dd7550000000000000000000000000000000000000000000000000000000081523060048201526024810185905273ffffffffffffffffffffffffffffffffffffffff84811660448301529091169063151dd755906064016020604051808303816000875af11580156109e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0a9190613cb1565b30600090815260c860205260409020549091508015610a2e57610a2e3033836121a5565b5092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082161580610aa757507fffffffff0000000000000000000000000000000000000000000000000000000082167f36372b0700000000000000000000000000000000000000000000000000000000145b80610ab65750610ab682612458565b92915050565b606060cb8054610acb90613c5d565b80601f0160208091040260200160405190810160405280929190818152602001828054610af790613c5d565b8015610b445780601f10610b1957610100808354040283529160200191610b44565b820191906000526020600020905b815481529060010190602001808311610b2757829003601f168201915b5050505050905090565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015610bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be09190613cca565b610c16576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517f07e0db1700000000000000000000000000000000000000000000000000000000815261ffff831660048201526201000090910473ffffffffffffffffffffffffffffffffffffffff16906307e0db17906024015b600060405180830381600087803b158015610c8b57600080fd5b505af1158015610952573d6000803e3d6000fd5b6000610cac3384846124ef565b50600192915050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015610d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d479190613cca565b610d7d576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517f10ddb13700000000000000000000000000000000000000000000000000000000815261ffff831660048201526201000090910473ffffffffffffffffffffffffffffffffffffffff16906310ddb13790602401610c71565b610de78686866126a3565b9350610df7868686868686612722565b505050505050565b6000610e0c8484846121a5565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260c96020908152604080832033845290915290205482811015610ed2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610edf85338584036124ef565b60019150505b9392505050565b60008060008686604051602001610f04929190613ce7565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152908290526000547f40a7bb1000000000000000000000000000000000000000000000000000000000835290925062010000900473ffffffffffffffffffffffffffffffffffffffff16906340a7bb1090610f95908b90309086908b908b90600401613d09565b6040805180830381865afa158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd59190613d68565b92509250509550959350505050565b33600081815260c96020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091610cac918590611028908690613dbb565b6124ef565b61ffff83166000908152600260205260408120805482919061104e90613c5d565b80601f016020809104026020016040519081016040528092919081815260200182805461107a90613c5d565b80156110c75780601f1061109c576101008083540402835291602001916110c7565b820191906000526020600020905b8154815290600101906020018083116110aa57829003601f168201915b5050505050905083836040516110de929190613dd3565b60405180910390208180519060200120149150509392505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015611167573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118b9190613cca565b6111c1576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012c546111e59073ffffffffffffffffffffffffffffffffffffffff1682612737565b50565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015611256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127a9190613cca565b6112b0576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517f42d65a8d0000000000000000000000000000000000000000000000000000000081526201000090910473ffffffffffffffffffffffffffffffffffffffff16906342d65a8d9061130f90869086908690600401613e2c565b600060405180830381600087803b15801561132957600080fd5b505af115801561133d573d6000803e3d6000fd5b50505050505050565b33301461137f576040517f48f5c3ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61138b84848484612921565b50505050565b600260205260009081526040902080546113aa90613c5d565b80601f01602080910402602001604051908101604052809291908181526020018280546113d690613c5d565b80156114235780601f106113f857610100808354040283529160200191611423565b820191906000526020600020905b81548152906001019060200180831161140657829003601f168201915b505050505081565b61012c546040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018a90526064810186905260ff8516608482015260a4810184905260c4810183905273ffffffffffffffffffffffffffffffffffffffff9091169063d505accf9060e401600060405180830381600087803b1580156114c257600080fd5b505af11580156114d6573d6000803e3d6000fd5b505050506114e88a8a8a8a8a8a611d8d565b50505050505050505050565b606060cc8054610acb90613c5d565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015611571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115959190613cca565b6115cb576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012c546111e59073ffffffffffffffffffffffffffffffffffffffff16826129cc565b33600090815260c96020908152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152812054828110156116b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610ec9565b6116bd33858584036124ef565b5060019392505050565b6000610cac3384846121a5565b600054610100900460ff166116ef5760005460ff16156116f3565b303b155b61177f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610ec9565b600054610100900460ff161580156117be57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b6117c88686612aec565b6117d28484612baa565b8273ffffffffffffffffffffffffffffffffffffffff1663e9cbd8226040518163ffffffff1660e01b8152600401602060405180830381865afa15801561181d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118419190613e4a565b61012c80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691821790556118b29030907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6124ef565b61012c546118d69073ffffffffffffffffffffffffffffffffffffffff16836129cc565b8015610df757600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055505050505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa15801561197a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199e9190613cca565b6119d4576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517fcbed8b9c0000000000000000000000000000000000000000000000000000000081526201000090910473ffffffffffffffffffffffffffffffffffffffff169063cbed8b9c90611a379088908890889088908890600401613e67565b600060405180830381600087803b158015611a5157600080fd5b505af1158015611a65573d6000803e3d6000fd5b505050505050505050565b61ffff84166000908152600160205260408082209051611a91908690613ea0565b908152604080516020928190038301902067ffffffffffffffff8616600090815292529020549050801580611acc5750815160208301208114155b15611b03576040517f7c6953f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff85166000908152600160205260408082209051611b24908790613ea0565b908152604080516020928190038301902067ffffffffffffffff87166000908152925290205561095285858585612921565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015611bc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be89190613cca565b611c1e576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012c54611c6490309073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6124ef565b565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015611cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf89190613cca565b611d2e576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff83166000908152600260205260409020611d4c9083836132bf565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab838383604051611d8093929190613e2c565b60405180910390a1505050565b611d98868686612c8d565b935060008585604051602001611daf929190613ce7565b6040516020818303038152906040529050611dcd8782868686612e54565b600080546040517f7a14574800000000000000000000000000000000000000000000000000000000815261ffff8a1660048201523060248201526201000090910473ffffffffffffffffffffffffffffffffffffffff1690637a14574890604401602060405180830381865afa158015611e4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6f9190613ebc565b905086604051611e7f9190613ea0565b6040805191829003822088835267ffffffffffffffff841660208401529161ffff8b169133917f024797cc77ce15dc717112d54fb1df125fdfd8c81344fb046c5e074427ce1543910160405180910390a45050505050505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015611f48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6c9190613cca565b611fa2576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80611faf576111e5612fcf565b6111e56130b0565b6000546040517ff5ecbdbc00000000000000000000000000000000000000000000000000000000815261ffff8087166004830152851660248201523060448201526064810183905260609162010000900473ffffffffffffffffffffffffffffffffffffffff169063f5ecbdbc90608401600060405180830381865afa158015612045573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261208b9190810190613f26565b95945050505050565b3b151590565b6040517f66ad5c8a00000000000000000000000000000000000000000000000000000000815230906366ad5c8a906120dc908790879087908790600401613f5b565b600060405180830381600087803b1580156120f657600080fd5b505af1925050508015612107575060015b61138b578080519060200120600160008661ffff1661ffff1681526020019081526020016000208460405161213c9190613ea0565b90815260408051918290036020908101832067ffffffffffffffff87166000908152915220919091557fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d90612198908690869086908690613f5b565b60405180910390a161138b565b73ffffffffffffffffffffffffffffffffffffffff8316612248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610ec9565b73ffffffffffffffffffffffffffffffffffffffff82166122eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610ec9565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260c86020526040902054818110156123a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610ec9565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260c860205260408082208585039055918516815290812080548492906123e5908490613dbb565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161244b91815260200190565b60405180910390a361138b565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5110f697000000000000000000000000000000000000000000000000000000001480610ab657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610ab6565b73ffffffffffffffffffffffffffffffffffffffff8316612591576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610ec9565b73ffffffffffffffffffffffffffffffffffffffff8216612634576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610ec9565b73ffffffffffffffffffffffffffffffffffffffff838116600081815260c9602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006126b160fa5460ff1690565b15612718576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610ec9565b610a2e3383612737565b60008585604051602001611daf929190613ce7565b73ffffffffffffffffffffffffffffffffffffffff82166127da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610ec9565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260c8602052604090205481811015612890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610ec9565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260c860205260408120838303905560ca80548492906128cc908490613f9a565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612696565b505050565b600080828060200190518101906129389190613fb1565b6014820151919350915061294d878284613170565b91508073ffffffffffffffffffffffffffffffffffffffff16866040516129749190613ea0565b6040805191829003822085835267ffffffffffffffff891660208401529161ffff8b16917f64e10c37f404d128982dce114f5d233c14c5c7f6d8db93099e3d99dacb9e27ba910160405180910390a450505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216612a49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610ec9565b8060ca6000828254612a5b9190613dbb565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600090815260c8602052604081208054839290612a95908490613dbb565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600054610100900460ff16612b83576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610ec9565b8151612b969060cb906020850190613361565b50805161291c9060cc906020840190613361565b73ffffffffffffffffffffffffffffffffffffffff82161580612be1575073ffffffffffffffffffffffffffffffffffffffff8116155b15612c18576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff94851602179055600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909216179055565b6000612c9b60fa5460ff1690565b15612d02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610ec9565b61012c546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810184905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af1158015612d80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da49190613cca565b5061012c546040517fd44ad63f000000000000000000000000000000000000000000000000000000008152306004820181905260248201859052604482015273ffffffffffffffffffffffffffffffffffffffff9091169063d44ad63f906064016020604051808303816000875af1158015612e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e489190613cb1565b9050610ee53082612737565b61ffff851660009081526002602052604081208054612e7290613c5d565b80601f0160208091040260200160405190810160405280929190818152602001828054612e9e90613c5d565b8015612eeb5780601f10612ec057610100808354040283529160200191612eeb565b820191906000526020600020905b815481529060010190602001808311612ece57829003601f168201915b50505050509050805160001415612f2e576040517f8154374b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517fc58031000000000000000000000000000000000000000000000000000000000081526201000090910473ffffffffffffffffffffffffffffffffffffffff169063c5803100903490612f95908a9086908b908b908b908b90600401613ff8565b6000604051808303818588803b158015612fae57600080fd5b505af1158015612fc2573d6000803e3d6000fd5b5050505050505050505050565b60fa5460ff1661303b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610ec9565b60fa80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60fa5460ff161561311d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610ec9565b60fa80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586130863390565b600061317e60fa5460ff1690565b156131e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610ec9565b6131ef30836129cc565b61012c546040517f151dd7550000000000000000000000000000000000000000000000000000000081523060048201526024810184905273ffffffffffffffffffffffffffffffffffffffff85811660448301529091169063151dd755906064016020604051808303816000875af115801561326f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132939190613cb1565b30600090815260c8602052604090205490915080156132b7576132b73085836121a5565b509392505050565b8280546132cb90613c5d565b90600052602060002090601f0160209004810192826132ed5760008555613351565b82601f10613324578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555613351565b82800160010185558215613351579182015b82811115613351578235825591602001919060010190613336565b5061335d9291506133d5565b5090565b82805461336d90613c5d565b90600052602060002090601f01602090048101928261338f5760008555613351565b82601f106133a857805160ff1916838001178555613351565b82800160010185558215613351579182015b828111156133515782518255916020019190600101906133ba565b5b8082111561335d57600081556001016133d6565b803561ffff811681146133fc57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561347757613477613401565b604052919050565b600067ffffffffffffffff82111561349957613499613401565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f8301126134d657600080fd5b81356134e96134e48261347f565b613430565b8181528460208386010111156134fe57600080fd5b816020850160208301376000918101602001919091529392505050565b67ffffffffffffffff811681146111e557600080fd5b6000806000806080858703121561354757600080fd5b613550856133ea565b9350602085013567ffffffffffffffff8082111561356d57600080fd5b613579888389016134c5565b94506040870135915061358b8261351b565b909250606086013590808211156135a157600080fd5b506135ae878288016134c5565b91505092959194509250565b73ffffffffffffffffffffffffffffffffffffffff811681146111e557600080fd5b80356133fc816135ba565b600080604083850312156135fa57600080fd5b82359150602083013561360c816135ba565b809150509250929050565b60006020828403121561362957600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610ee557600080fd5b60005b8381101561367457818101518382015260200161365c565b8381111561138b5750506000910152565b6000815180845261369d816020860160208601613659565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610ee56020830184613685565b6000602082840312156136f457600080fd5b610ee5826133ea565b6000806040838503121561371057600080fd5b823561371b816135ba565b946020939093013593505050565b60008060008060008060c0878903121561374257600080fd5b61374b876133ea565b9550602087013567ffffffffffffffff8082111561376857600080fd5b6137748a838b016134c5565b9650604089013595506060890135915061378d826135ba565b90935060808801359061379f826135ba565b90925060a088013590808211156137b557600080fd5b506137c289828a016134c5565b9150509295509295509295565b6000806000606084860312156137e457600080fd5b83356137ef816135ba565b925060208401356137ff816135ba565b929592945050506040919091013590565b80151581146111e557600080fd5b600080600080600060a0868803121561383657600080fd5b61383f866133ea565b9450602086013567ffffffffffffffff8082111561385c57600080fd5b61386889838a016134c5565b9550604088013594506060880135915061388182613810565b9092506080870135908082111561389757600080fd5b506138a4888289016134c5565b9150509295509295909350565b60008083601f8401126138c357600080fd5b50813567ffffffffffffffff8111156138db57600080fd5b6020830191508360208285010111156138f357600080fd5b9250929050565b60008060006040848603121561390f57600080fd5b613918846133ea565b9250602084013567ffffffffffffffff81111561393457600080fd5b613940868287016138b1565b9497909650939450505050565b60006020828403121561395f57600080fd5b5035919050565b60008060006060848603121561397b57600080fd5b613984846133ea565b9250602084013567ffffffffffffffff8111156139a057600080fd5b6139ac868287016134c5565b92505060408401356139bd8161351b565b809150509250925092565b6000602082840312156139da57600080fd5b8135610ee5816135ba565b803560ff811681146133fc57600080fd5b6000806000806000806000806000806101408b8d031215613a1657600080fd5b613a1f8b6133ea565b995060208b013567ffffffffffffffff80821115613a3c57600080fd5b613a488e838f016134c5565b9a5060408d01359950613a5d60608e016135dc565b9850613a6b60808e016135dc565b975060a08d0135915080821115613a8157600080fd5b50613a8e8d828e016134c5565b95505060c08b01359350613aa460e08c016139e5565b92506101008b013591506101208b013590509295989b9194979a5092959850565b600080600080600060a08688031215613add57600080fd5b853567ffffffffffffffff80821115613af557600080fd5b613b0189838a016134c5565b96506020880135915080821115613b1757600080fd5b50613b24888289016134c5565b9450506040860135613b35816135ba565b92506060860135613b45816135ba565b949793965091946080013592915050565b600080600080600060808688031215613b6e57600080fd5b613b77866133ea565b9450613b85602087016133ea565b935060408601359250606086013567ffffffffffffffff811115613ba857600080fd5b613bb4888289016138b1565b969995985093965092949392505050565b60008060408385031215613bd857600080fd5b8235613be3816135ba565b9150602083013561360c816135ba565b600060208284031215613c0557600080fd5b8135610ee581613810565b60008060008060808587031215613c2657600080fd5b613c2f856133ea565b9350613c3d602086016133ea565b92506040850135613c4d816135ba565b9396929550929360600135925050565b600181811c90821680613c7157607f821691505b60208210811415613cab577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060208284031215613cc357600080fd5b5051919050565b600060208284031215613cdc57600080fd5b8151610ee581613810565b604081526000613cfa6040830185613685565b90508260208301529392505050565b61ffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015260a060408201526000613d4260a0830186613685565b84151560608401528281036080840152613d5c8185613685565b98975050505050505050565b60008060408385031215613d7b57600080fd5b505080516020909101519092909150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115613dce57613dce613d8c565b500190565b8183823760009101908152919050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b61ffff8416815260406020820152600061208b604083018486613de3565b600060208284031215613e5c57600080fd5b8151610ee5816135ba565b600061ffff808816835280871660208401525084604083015260806060830152613e95608083018486613de3565b979650505050505050565b60008251613eb2818460208701613659565b9190910192915050565b600060208284031215613ece57600080fd5b8151610ee58161351b565b600082601f830112613eea57600080fd5b8151613ef86134e48261347f565b818152846020838601011115613f0d57600080fd5b613f1e826020830160208701613659565b949350505050565b600060208284031215613f3857600080fd5b815167ffffffffffffffff811115613f4f57600080fd5b613f1e84828501613ed9565b61ffff85168152608060208201526000613f786080830186613685565b67ffffffffffffffff851660408401528281036060840152613e958185613685565b600082821015613fac57613fac613d8c565b500390565b60008060408385031215613fc457600080fd5b825167ffffffffffffffff811115613fdb57600080fd5b613fe785828601613ed9565b925050602083015190509250929050565b61ffff8716815260c06020820152600061401560c0830188613685565b82810360408401526140278188613685565b73ffffffffffffffffffffffffffffffffffffffff87811660608601528616608085015283810360a0850152905061405f8185613685565b999850505050505050505056fea2646970667358221220d9683c390df6982687d1acd7a04eaff5d7c4eadad30edb98754705321e77ec5964736f6c634300080c0033",
  "devdoc": {
    "author": "Angle Core Team, forked from https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/token/oft/OFT.sol",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Used to decrease the bridging capacity"
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "estimateSendFee(uint16,bytes,uint256,bool,bytes)": {
        "params": {
          "_adapterParams": "flexible bytes array to indicate messaging adapter services in L0",
          "_amount": "amount of the tokens to transfer",
          "_dstChainId": "L0 defined chain id to send tokens too",
          "_toAddress": "dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain",
          "_useZro": "indicates to use zro to pay L0 fees"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize(string,string,address,address,uint256)": {
        "details": "The initial supply corresponds to the initial amount that could be bridged using this OFT",
        "params": {
          "_lzEndpoint": "Layer zero endpoint to pass messages",
          "_name": "Name of the token corresponding to this contract",
          "_symbol": "Symbol of the token corresponding to this contract",
          "_treasury": "Address of the treasury contract used for access control",
          "initialSupply": "Initial supply to mint to the canonical token address"
        }
      },
      "lzReceive(uint16,bytes,uint64,bytes)": {
        "params": {
          "_nonce": "Nounce of the message",
          "_payload": "Data: recipient address and amount",
          "_srcAddress": "Sender of the source chain",
          "_srcChainId": "ChainId of the source chain - LayerZero standard"
        }
      },
      "mint(uint256)": {
        "details": "Used to increase the bridging capacity"
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonblockingLzReceive(uint16,bytes,uint64,bytes)": {
        "details": "public for the needs of try / catch but effectively internal",
        "params": {
          "_nonce": "Nounce of the message",
          "_payload": "Data: recipient address and amount",
          "_srcAddress": "Sender of the source chain",
          "_srcChainId": "ChainId of the source chain - LayerZero standard"
        }
      },
      "pauseSendTokens(bool)": {
        "params": {
          "pause": "Future pause status"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "retryMessage(uint16,bytes,uint64,bytes)": {
        "params": {
          "_nonce": "Nounce of the message",
          "_payload": "Data: recipient address and amount",
          "_srcAddress": "Sender of the source chain",
          "_srcChainId": "ChainId of the source chain - LayerZero standard"
        }
      },
      "send(uint16,bytes,uint256,address,address,bytes)": {
        "params": {
          "_adapterParams": "is a flexible bytes array to indicate messaging adapter services",
          "_amount": "the quantity of tokens in wei",
          "_dstChainId": "the destination chain identifier",
          "_refundAddress": "the address LayerZero refunds if too much message fee is sent",
          "_toAddress": "can be any size depending on the `dstChainId`.",
          "_zroPaymentAddress": "set to address(0x0) if not paying in ZRO (LayerZero Token)"
        }
      },
      "sendCredit(uint16,bytes,uint256,address,address,bytes)": {
        "params": {
          "_adapterParams": "is a flexible bytes array to indicate messaging adapter services",
          "_amount": "the quantity of credit to send in wei",
          "_dstChainId": "the destination chain identifier",
          "_refundAddress": "the address LayerZero refunds if too much message fee is sent",
          "_toAddress": "can be any size depending on the `dstChainId`.",
          "_zroPaymentAddress": "set to address(0x0) if not paying in ZRO (LayerZero Token)"
        }
      },
      "sendWithPermit(uint16,bytes,uint256,address,address,bytes,uint256,uint8,bytes32,bytes32)": {
        "details": "The `v`, `r`, and `s` parameters are used as signature data",
        "params": {
          "_adapterParams": "Flexible bytes array to indicate messaging adapter services",
          "_amount": "Quantity of tokens in wei",
          "_dstChainId": "The destination chain identifier",
          "_refundAddress": "Address LayerZero refunds if too much message fee is sent",
          "_toAddress": "Can be any size depending on the `dstChainId`.",
          "_zroPaymentAddress": "Set to address(0x0) if not paying in ZRO (LayerZero Token)",
          "deadline": "Deadline parameter for the signature to be valid"
        }
      },
      "setTrustedRemote(uint16,bytes)": {
        "details": "Used for both receiving and sending messageThere can only be one trusted source per chainAllows owner to set it multiple times.",
        "params": {
          "_srcAddress": "Address on the source chain",
          "_srcChainId": "ChainId of the source chain - LayerZero standard"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "withdraw(uint256,address)": {
        "params": {
          "amount": "Amount to withdraw",
          "recipient": "Address to send the canonical token to"
        },
        "returns": {
          "amountMinted": "The amount of canonical token sent"
        }
      }
    },
    "stateVariables": {
      "canonicalToken": {
        "details": "Immutable"
      }
    },
    "title": "LayerZeroBridgeToken",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Burns the intermediate contract from the `canonicalToken`"
      },
      "canonicalToken()": {
        "notice": "Address of the bridgeable token"
      },
      "estimateSendFee(uint16,bytes,uint256,bool,bytes)": {
        "notice": "Estimates send token `_tokenId` to (`_dstChainId`, `_toAddress`)"
      },
      "failedMessages(uint16,bytes,uint64)": {
        "notice": "Maps chainIds to failed messages to retry them"
      },
      "forceResumeReceive(uint16,bytes)": {
        "notice": "Unpauses the receive functionalities"
      },
      "getConfig(uint16,uint16,address,uint256)": {
        "notice": "Fetches the default LZ config"
      },
      "initialize(string,string,address,address,uint256)": {
        "notice": "Initializes the contract"
      },
      "isTrustedRemote(uint16,bytes)": {
        "notice": "Checks if the `_srcAddress` corresponds to the trusted source"
      },
      "lzEndpoint()": {
        "notice": "Layer Zero endpoint"
      },
      "lzReceive(uint16,bytes,uint64,bytes)": {
        "notice": "Receives a message from the LZ endpoint and process it"
      },
      "mint(uint256)": {
        "notice": "Mints the intermediate contract to the `canonicalToken`"
      },
      "nonblockingLzReceive(uint16,bytes,uint64,bytes)": {
        "notice": "Handles message receptions in a non blocking way"
      },
      "pauseSendTokens(bool)": {
        "notice": "Pauses bridging through the contract"
      },
      "retryMessage(uint16,bytes,uint64,bytes)": {
        "notice": "Retries a message that previously failed and was stored"
      },
      "send(uint16,bytes,uint256,address,address,bytes)": {
        "notice": "Sends `_amount` amount of token to (`_dstChainId`, `_toAddress`)"
      },
      "sendCredit(uint16,bytes,uint256,address,address,bytes)": {
        "notice": "Sends `_amount` amount of credit to (`_dstChainId`, `_toAddress`)"
      },
      "sendWithPermit(uint16,bytes,uint256,address,address,bytes,uint256,uint8,bytes32,bytes32)": {
        "notice": "Sends `_amount` amount of token to (`_dstChainId`, `_toAddress`)"
      },
      "setConfig(uint16,uint16,uint256,bytes)": {
        "notice": "Overrides the default LZ config"
      },
      "setReceiveVersion(uint16)": {
        "notice": "Overrides the default LZ config"
      },
      "setSendVersion(uint16)": {
        "notice": "Overrides the default LZ config"
      },
      "setTrustedRemote(uint16,bytes)": {
        "notice": "Sets the corresponding address on an other chain."
      },
      "setupAllowance()": {
        "notice": "Increases allowance of the `canonicalToken`"
      },
      "treasury()": {
        "notice": "Reference to the treasury contract to fetch access control"
      },
      "trustedRemoteLookup(uint16)": {
        "notice": "Maps chainIds to their OFT address"
      },
      "withdraw(uint256,address)": {
        "notice": "Withdraws amount of canonical token from the `msg.sender` balance and sends it to the recipient"
      }
    },
    "notice": "Contract to be deployed on a L2/sidechain for bridging an AgToken using a bridge intermediate token and LayerZero",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 772,
        "contract": "contracts/agToken/layerZero/LayerZeroBridgeToken.sol:LayerZeroBridgeToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 775,
        "contract": "contracts/agToken/layerZero/LayerZeroBridgeToken.sol:LayerZeroBridgeToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10070,
        "contract": "contracts/agToken/layerZero/LayerZeroBridgeToken.sol:LayerZeroBridgeToken",
        "label": "lzEndpoint",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ILayerZeroEndpoint)15661"
      },
      {
        "astId": 10079,
        "contract": "contracts/agToken/layerZero/LayerZeroBridgeToken.sol:LayerZeroBridgeToken",
        "label": "failedMessages",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"
      },
      {
        "astId": 10084,
        "contract": "contracts/agToken/layerZero/LayerZeroBridgeToken.sol:LayerZeroBridgeToken",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 10087,
        "contract": "contracts/agToken/layerZero/LayerZeroBridgeToken.sol:LayerZeroBridgeToken",
        "label": "treasury",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 10566,
        "contract": "contracts/agToken/layerZero/LayerZeroBridgeToken.sol:LayerZeroBridgeToken",
        "label": "__gap",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 3454,
        "contract": "contracts/agToken/layerZero/LayerZeroBridgeToken.sol:LayerZeroBridgeToken",
        "label": "__gap",
        "offset": 0,
        "slot": "50",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10913,
        "contract": "contracts/agToken/layerZero/LayerZeroBridgeToken.sol:LayerZeroBridgeToken",
        "label": "__gap",
        "offset": 0,
        "slot": "100",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2592,
        "contract": "contracts/agToken/layerZero/LayerZeroBridgeToken.sol:LayerZeroBridgeToken",
        "label": "__gap",
        "offset": 0,
        "slot": "150",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1029,
        "contract": "contracts/agToken/layerZero/LayerZeroBridgeToken.sol:LayerZeroBridgeToken",
        "label": "_balances",
        "offset": 0,
        "slot": "200",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1035,
        "contract": "contracts/agToken/layerZero/LayerZeroBridgeToken.sol:LayerZeroBridgeToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1037,
        "contract": "contracts/agToken/layerZero/LayerZeroBridgeToken.sol:LayerZeroBridgeToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 1039,
        "contract": "contracts/agToken/layerZero/LayerZeroBridgeToken.sol:LayerZeroBridgeToken",
        "label": "_name",
        "offset": 0,
        "slot": "203",
        "type": "t_string_storage"
      },
      {
        "astId": 1041,
        "contract": "contracts/agToken/layerZero/LayerZeroBridgeToken.sol:LayerZeroBridgeToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "204",
        "type": "t_string_storage"
      },
      {
        "astId": 1582,
        "contract": "contracts/agToken/layerZero/LayerZeroBridgeToken.sol:LayerZeroBridgeToken",
        "label": "__gap",
        "offset": 0,
        "slot": "205",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 860,
        "contract": "contracts/agToken/layerZero/LayerZeroBridgeToken.sol:LayerZeroBridgeToken",
        "label": "_paused",
        "offset": 0,
        "slot": "250",
        "type": "t_bool"
      },
      {
        "astId": 951,
        "contract": "contracts/agToken/layerZero/LayerZeroBridgeToken.sol:LayerZeroBridgeToken",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9505,
        "contract": "contracts/agToken/layerZero/LayerZeroBridgeToken.sol:LayerZeroBridgeToken",
        "label": "canonicalToken",
        "offset": 0,
        "slot": "300",
        "type": "t_contract(IAgTokenSideChainMultiBridge)14140"
      },
      {
        "astId": 9927,
        "contract": "contracts/agToken/layerZero/LayerZeroBridgeToken.sol:LayerZeroBridgeToken",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IAgTokenSideChainMultiBridge)14140": {
        "encoding": "inplace",
        "label": "contract IAgTokenSideChainMultiBridge",
        "numberOfBytes": "20"
      },
      "t_contract(ILayerZeroEndpoint)15661": {
        "encoding": "inplace",
        "label": "contract ILayerZeroEndpoint",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bytes32)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}