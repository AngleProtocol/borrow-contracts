{
  "address": "0x16cd38b1B54E7abf307Cb2697E2D9321e843d5AA",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyVaultManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTreasury",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCore",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotVaultManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RightsNotRemoved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooBigAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooHighParameterValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "badDebtValue",
          "type": "uint256"
        }
      ],
      "name": "BadDebtUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_core",
          "type": "address"
        }
      ],
      "name": "CoreUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "NewTreasurySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "surplusBufferValue",
          "type": "uint256"
        }
      ],
      "name": "SurplusBufferUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_surplusForGovernance",
          "type": "uint64"
        }
      ],
      "name": "SurplusForGovernanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_surplusManager",
          "type": "address"
        }
      ],
      "name": "SurplusManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultManager",
          "type": "address"
        }
      ],
      "name": "VaultManagerToggled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_PARAMS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultManager",
          "type": "address"
        }
      ],
      "name": "addVaultManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "badDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "core",
      "outputs": [
        {
          "internalType": "contract ICoreBorrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchSurplusFromAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchSurplusFromFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLoanModule",
      "outputs": [
        {
          "internalType": "contract IFlashAngle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICoreBorrow",
          "name": "_core",
          "type": "address"
        },
        {
          "internalType": "contract IAgToken",
          "name": "_stablecoin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "isGovernorOrGuardian",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultManager",
          "type": "address"
        }
      ],
      "name": "isVaultManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pushSurplus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "governanceAllocation",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToRecover",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "removeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultManager",
          "type": "address"
        }
      ],
      "name": "removeVaultManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICoreBorrow",
          "name": "_core",
          "type": "address"
        }
      ],
      "name": "setCore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_flashLoanModule",
          "type": "address"
        }
      ],
      "name": "setFlashLoanModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_surplusForGovernance",
          "type": "uint64"
        }
      ],
      "name": "setSurplusForGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_surplusManager",
          "type": "address"
        }
      ],
      "name": "setSurplusManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stablecoin",
      "outputs": [
        {
          "internalType": "contract IAgToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "surplusBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "surplusForGovernance",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "surplusManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "updateBadDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "badDebtValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaultManagerList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultManagerMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x106e37e91837210caa3863d0adb56f7cb85492e4658bb27c1450bdeea879ab9f",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0x16cd38b1B54E7abf307Cb2697E2D9321e843d5AA",
    "transactionIndex": 4,
    "gasUsed": "2572615",
    "logsBloom": "0x
    "blockHash": "0xc2fa3a856b2c5db1d1e166b2ef29adb26f755b14850a8bef764232be389952b8",
    "transactionHash": "0x106e37e91837210caa3863d0adb56f7cb85492e4658bb27c1450bdeea879ab9f",
    "logs": [],
    "blockNumber": 20878168,
    "cumulativeGasUsed": "4769525",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c738595b9b57358bae83408c8b980d54",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyVaultManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTreasury\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCore\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVaultManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RightsNotRemoved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooBigAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooHighParameterValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"badDebtValue\",\"type\":\"uint256\"}],\"name\":\"BadDebtUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"CoreUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"NewTreasurySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"surplusBufferValue\",\"type\":\"uint256\"}],\"name\":\"SurplusBufferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_surplusForGovernance\",\"type\":\"uint64\"}],\"name\":\"SurplusForGovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_surplusManager\",\"type\":\"address\"}],\"name\":\"SurplusManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultManager\",\"type\":\"address\"}],\"name\":\"VaultManagerToggled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_PARAMS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultManager\",\"type\":\"address\"}],\"name\":\"addVaultManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"badDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"core\",\"outputs\":[{\"internalType\":\"contract ICoreBorrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchSurplusFromAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchSurplusFromFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanModule\",\"outputs\":[{\"internalType\":\"contract IFlashAngle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICoreBorrow\",\"name\":\"_core\",\"type\":\"address\"},{\"internalType\":\"contract IAgToken\",\"name\":\"_stablecoin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"isGovernorOrGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManager\",\"type\":\"address\"}],\"name\":\"isVaultManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pushSurplus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"governanceAllocation\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToRecover\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultManager\",\"type\":\"address\"}],\"name\":\"removeVaultManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICoreBorrow\",\"name\":\"_core\",\"type\":\"address\"}],\"name\":\"setCore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flashLoanModule\",\"type\":\"address\"}],\"name\":\"setFlashLoanModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_surplusForGovernance\",\"type\":\"uint64\"}],\"name\":\"setSurplusForGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_surplusManager\",\"type\":\"address\"}],\"name\":\"setSurplusManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoin\",\"outputs\":[{\"internalType\":\"contract IAgToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surplusBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surplusForGovernance\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surplusManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateBadDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"badDebtValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultManagerList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultManagerMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Core Team\",\"kind\":\"dev\",\"methods\":{\"addMinter(address)\":{\"params\":{\"minter\":\"Minter address to add\"}},\"addVaultManager(address)\":{\"details\":\"This contract should have already been initialized with a correct treasury addressIt's this function that gives the minter right to the `VaultManager`\",\"params\":{\"vaultManager\":\"`VaultManager` contract to add\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"fetchSurplusFromAll()\":{\"details\":\"This function pools surplus and bad debt across all contracts and then updates the `surplusBuffer` (or the `badDebt` if more losses were made than profits)\",\"returns\":{\"_0\":\"Surplus buffer value at the end of the call\",\"_1\":\"Bad debt value at the end of the call\"}},\"fetchSurplusFromFlashLoan()\":{\"details\":\"This function fails if the `flashLoanModule` has not been initialized yet\",\"returns\":{\"_0\":\"Surplus buffer value at the end of the call\",\"_1\":\"Bad debt value at the end of the call\"}},\"initialize(address,address)\":{\"params\":{\"_core\":\"Address of the `CoreBorrow` contract of the module\",\"_stablecoin\":\"Address of the stablecoin\"}},\"isGovernor(address)\":{\"details\":\"Access control is only kept in the `CoreBorrow` contract\",\"params\":{\"admin\":\"Address to check\"},\"returns\":{\"_0\":\"Whether the address has the governor role\"}},\"isGovernorOrGuardian(address)\":{\"details\":\"Access control is only kept in the `CoreBorrow` contract which means that this function queries the `CoreBorrow` contract\",\"params\":{\"admin\":\"Address to check\"},\"returns\":{\"_0\":\"Whether the address has the guardian or the governor role\"}},\"isVaultManager(address)\":{\"params\":{\"_vaultManager\":\"Address to check\"},\"returns\":{\"_0\":\"Whether the address has been initialized or not\"}},\"pushSurplus()\":{\"details\":\"It makes sure to fetch the surplus from all the contracts handled by this treasury to avoid the situation where rewards are still distributed to governance even though a `VaultManager` has made a big lossTypically this function is to be called once every week by a keeper to distribute rewards to veANGLE holders`stablecoin` must be an AgToken and hence `transfer` reverts if the call is not successful\",\"returns\":{\"governanceAllocation\":\"Amount transferred to governance\"}},\"recoverERC20(address,address,uint256)\":{\"details\":\"It is impossible to recover the stablecoin of the protocol if there is some bad debt for itIn this case, the function makes sure to fetch the surplus/bad debt from all the `VaultManager` contracts and from the flash loan moduleIf the token to recover is the stablecoin, tokens recovered are fetched from the surplus and not from the `surplusBuffer`\",\"params\":{\"amountToRecover\":\"Amount of collateral to transfer\",\"to\":\"Address of the contract to send collateral to\",\"tokenAddress\":\"Address of the token to recover\"}},\"removeMinter(address)\":{\"params\":{\"minter\":\"Minter address to remove\"}},\"removeVaultManager(address)\":{\"details\":\"A removed `VaultManager` loses its minter right on the stablecoin\",\"params\":{\"vaultManager\":\"`VaultManager` contract to remove\"}},\"setCore(address)\":{\"details\":\"This function should typically be called on all treasury contracts after the `setCore` function has been called on the `CoreBorrow` contractOne sanity check that can be performed here is to verify whether at least the governor calling the contract is still a governor in the new core\"},\"setFlashLoanModule(address)\":{\"details\":\"This function removes the minting right to the old flash loan module and grants it to the new module\",\"params\":{\"_flashLoanModule\":\"Reference to the new flash loan module\"}},\"setSurplusForGovernance(uint64)\":{\"details\":\"To pause surplus distribution, governance needs to set a zero value for `surplusForGovernance` which means\",\"params\":{\"_surplusForGovernance\":\"New value of the parameter\"}},\"setSurplusManager(address)\":{\"params\":{\"_surplusManager\":\"New address responsible for handling the surplus\"}},\"setTreasury(address)\":{\"details\":\"This function is basically a way to remove rights to this contract and grant them to a new oneIt could be used to set a new core contract\",\"params\":{\"_treasury\":\"New treasury address for this stablecoin\"}},\"updateBadDebt(uint256)\":{\"details\":\"If the protocol has made a loss and managed to make some profits to recover for this loss (through a program like Olympus Pro), then this function needs to be called`badDebt` is simply reduced here by burning stablecoinsIt is impossible to burn more than the `badDebt` otherwise this function could be used to manipulate the `surplusBuffer` and hence the amount going to governance\",\"params\":{\"amount\":\"Amount to reduce the bad debt of\"},\"returns\":{\"badDebtValue\":\"Value of the bad debt at the end of the call\"}}},\"title\":\"Treasury\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BASE_PARAMS()\":{\"notice\":\"Base used for parameter computation\"},\"addMinter(address)\":{\"notice\":\"Adds a new minter for the stablecoin\"},\"addVaultManager(address)\":{\"notice\":\"Adds a new `VaultManager`\"},\"badDebt()\":{\"notice\":\"Amount of bad debt (unbacked stablecoin) accumulated across all `VaultManager` contracts linked to this stablecoin\"},\"core()\":{\"notice\":\"Reference to the `CoreBorrow` contract of the module which handles all AccessControl logic\"},\"fetchSurplusFromAll()\":{\"notice\":\"Fetches the surplus accrued across all the `VaultManager` contracts controlled by this `Treasury` contract as well as from the fees of the `FlashLoan` module\"},\"fetchSurplusFromFlashLoan()\":{\"notice\":\"Fetches the surplus accrued in the flash loan module and updates the `surplusBuffer`\"},\"flashLoanModule()\":{\"notice\":\"Flash Loan Module with a minter right on the stablecoin\"},\"initialize(address,address)\":{\"notice\":\"Initializes the treasury contract\"},\"isGovernor(address)\":{\"notice\":\"Checks whether a given address has the  governor role\"},\"isGovernorOrGuardian(address)\":{\"notice\":\"Checks whether a given address has the guardian or the governor role\"},\"isVaultManager(address)\":{\"notice\":\"Checks whether a given address has well been initialized in this contract as a `VaultManager``\"},\"pushSurplus()\":{\"notice\":\"Pushes the surplus buffer to the `surplusManager` contract\"},\"recoverERC20(address,address,uint256)\":{\"notice\":\"Allows to recover any ERC20 token, including the stablecoin handled by this contract, and to send it to a contract\"},\"removeMinter(address)\":{\"notice\":\"Removes a minter from the stablecoin contract\"},\"removeVaultManager(address)\":{\"notice\":\"Removes a `VaultManager`\"},\"setCore(address)\":{\"notice\":\"Sets a new `core` contract\"},\"setFlashLoanModule(address)\":{\"notice\":\"Sets a new flash loan module for this stablecoin\"},\"setSurplusForGovernance(uint64)\":{\"notice\":\"Sets the `surplusForGovernance` parameter\"},\"setSurplusManager(address)\":{\"notice\":\"Sets the `surplusManager` contract responsible for handling the surplus of the protocol\"},\"setTreasury(address)\":{\"notice\":\"Changes the treasury contract and communicates this change to all `VaultManager` contract\"},\"stablecoin()\":{\"notice\":\"Stablecoin handled by this `treasury` contract\"},\"surplusBuffer()\":{\"notice\":\"Surplus amount accumulated by the contract waiting to be distributed to governance. Technically only a share of this `surplusBuffer` will go to governance. Once a share of the surplus buffer has been given to governance, then this surplus is reset\"},\"surplusForGovernance()\":{\"notice\":\"Share of the `surplusBuffer` distributed to governance (in `BASE_PARAMS`)\"},\"surplusManager()\":{\"notice\":\"Address responsible for handling the surplus made by the treasury\"},\"updateBadDebt(uint256)\":{\"notice\":\"Updates the bad debt of the protocol in case where the protocol has accumulated some revenue from an external source\"},\"vaultManagerList(uint256)\":{\"notice\":\"List of the accepted `VaultManager` of the protocol\"},\"vaultManagerMap(address)\":{\"notice\":\"Maps an address to 1 if it was initialized as a `VaultManager` contract\"}},\"notice\":\"Treasury of Angle Borrowing Module doing the accounting across all VaultManagers for a given stablecoin\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/treasury/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\",\"keccak256\":\"0x1e88abdf82fcbbf98f97be17ea56c924376350637896bc37366ec9f89b7c2628\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/IAgToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title IAgToken\\n/// @author Angle Core Team\\n/// @notice Interface for the stablecoins `AgToken` contracts\\n/// @dev This interface only contains functions of the `AgToken` contract which are called by other contracts\\n/// of this module or of the first module of the Angle Protocol\\ninterface IAgToken is IERC20Upgradeable {\\n    // ======================= Minter Role Only Functions ===========================\\n\\n    /// @notice Lets the `StableMaster` contract or another whitelisted contract mint agTokens\\n    /// @param account Address to mint to\\n    /// @param amount Amount to mint\\n    /// @dev The contracts allowed to issue agTokens are the `StableMaster` contract, `VaultManager` contracts\\n    /// associated to this stablecoin as well as the flash loan module (if activated) and potentially contracts\\n    /// whitelisted by governance\\n    function mint(address account, uint256 amount) external;\\n\\n    /// @notice Burns `amount` tokens from a `burner` address after being asked to by `sender`\\n    /// @param amount Amount of tokens to burn\\n    /// @param burner Address to burn from\\n    /// @param sender Address which requested the burn from `burner`\\n    /// @dev This method is to be called by a contract with the minter right after being requested\\n    /// to do so by a `sender` address willing to burn tokens from another `burner` address\\n    /// @dev The method checks the allowance between the `sender` and the `burner`\\n    function burnFrom(\\n        uint256 amount,\\n        address burner,\\n        address sender\\n    ) external;\\n\\n    /// @notice Burns `amount` tokens from a `burner` address\\n    /// @param amount Amount of tokens to burn\\n    /// @param burner Address to burn from\\n    /// @dev This method is to be called by a contract with a minter right on the AgToken after being\\n    /// requested to do so by an address willing to burn tokens from its address\\n    function burnSelf(uint256 amount, address burner) external;\\n\\n    // ========================= Treasury Only Functions ===========================\\n\\n    /// @notice Adds a minter in the contract\\n    /// @param minter Minter address to add\\n    /// @dev Zero address checks are performed directly in the `Treasury` contract\\n    function addMinter(address minter) external;\\n\\n    /// @notice Removes a minter from the contract\\n    /// @param minter Minter address to remove\\n    /// @dev This function can also be called by a minter wishing to revoke itself\\n    function removeMinter(address minter) external;\\n\\n    /// @notice Sets a new treasury contract\\n    /// @param _treasury New treasury address\\n    function setTreasury(address _treasury) external;\\n\\n    // ========================= External functions ================================\\n\\n    /// @notice Checks whether an address has the right to mint agTokens\\n    /// @param minter Address for which the minting right should be checked\\n    /// @return Whether the address has the right to mint agTokens or not\\n    function isMinter(address minter) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcd50d86128e457543483981ea6127cb8dac03584b919614352aa89d7e991405c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICoreBorrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\n/// @title ICoreBorrow\\n/// @author Angle Core Team\\n/// @notice Interface for the `CoreBorrow` contract\\n/// @dev This interface only contains functions of the `CoreBorrow` contract which are called by other contracts\\n/// of this module\\ninterface ICoreBorrow {\\n    /// @notice Checks if an address corresponds to a treasury of a stablecoin with a flash loan\\n    /// module initialized on it\\n    /// @param treasury Address to check\\n    /// @return Whether the address has the `FLASHLOANER_TREASURY_ROLE` or not\\n    function isFlashLoanerTreasury(address treasury) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GOVERNOR_ROLE` or not\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor or a guardian of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GUARDIAN_ROLE` or not\\n    /// @dev Governance should make sure when adding a governor to also give this governor the guardian\\n    /// role by calling the `addGovernor` function\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x25b65b3f506ca91745a444502a36f0556585d82d9d60f4bd32fbcaabc12840d4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IFlashAngle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IAgToken.sol\\\";\\nimport \\\"./ICoreBorrow.sol\\\";\\n\\n/// @title IFlashAngle\\n/// @author Angle Core Team\\n/// @notice Interface for the `FlashAngle` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module\\ninterface IFlashAngle {\\n    /// @notice Reference to the `CoreBorrow` contract managing the FlashLoan module\\n    function core() external view returns (ICoreBorrow);\\n\\n    /// @notice Sends the fees taken from flash loans to the treasury contract associated to the stablecoin\\n    /// @param stablecoin Stablecoin from which profits should be sent\\n    /// @return balance Amount of profits sent\\n    /// @dev This function can only be called by the treasury contract\\n    function accrueInterestToTreasury(IAgToken stablecoin) external returns (uint256 balance);\\n\\n    /// @notice Adds support for a stablecoin\\n    /// @param _treasury Treasury associated to the stablecoin to add support for\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function addStablecoinSupport(address _treasury) external;\\n\\n    /// @notice Removes support for a stablecoin\\n    /// @param _treasury Treasury associated to the stablecoin to remove support for\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function removeStablecoinSupport(address _treasury) external;\\n\\n    /// @notice Sets a new core contract\\n    /// @param _core Core contract address to set\\n    /// @dev This function can only be called by the `CoreBorrow` contract\\n    function setCore(address _core) external;\\n}\\n\",\"keccak256\":\"0xc17654e512897efe41e3f1173c07dd4676e8c699a72b859d14b473d1e8300e45\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./ITreasury.sol\\\";\\n\\n/// @title IOracle\\n/// @author Angle Core Team\\n/// @notice Interface for the `Oracle` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module\\ninterface IOracle {\\n    /// @notice Reads the rate from the Chainlink circuit and other data provided\\n    /// @return quoteAmount The current rate between the in-currency and out-currency in the base\\n    /// of the out currency\\n    /// @dev For instance if the out currency is EUR (and hence agEUR), then the base of the returned\\n    /// value is 10**18\\n    function read() external view returns (uint256);\\n\\n    /// @notice Changes the treasury contract\\n    /// @param _treasury Address of the new treasury contract\\n    /// @dev This function can be called by an approved `VaultManager` contract which can call\\n    /// this function after being requested to do so by a `treasury` contract\\n    /// @dev In some situations (like reactor contracts), the `VaultManager` may not directly be linked\\n    /// to the `oracle` contract and as such we may need governors to be able to call this function as well\\n    function setTreasury(address _treasury) external;\\n\\n    /// @notice Reference to the `treasury` contract handling this `VaultManager`\\n    function treasury() external view returns (ITreasury treasury);\\n}\\n\",\"keccak256\":\"0x90fc39ba314b05884005b9deb1d949ca20f7fc5158fa0a7e41f1c798fb0c0a43\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IAgToken.sol\\\";\\nimport \\\"./ICoreBorrow.sol\\\";\\nimport \\\"./IFlashAngle.sol\\\";\\n\\n/// @title ITreasury\\n/// @author Angle Core Team\\n/// @notice Interface for the `Treasury` contract\\n/// @dev This interface only contains functions of the `Treasury` which are called by other contracts\\n/// of this module\\ninterface ITreasury {\\n    /// @notice Stablecoin handled by this `treasury` contract\\n    function stablecoin() external view returns (IAgToken);\\n\\n    /// @notice Checks whether a given address has the  governor role\\n    /// @param admin Address to check\\n    /// @return Whether the address has the governor role\\n    /// @dev Access control is only kept in the `CoreBorrow` contract\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether a given address has the guardian or the governor role\\n    /// @param admin Address to check\\n    /// @return Whether the address has the guardian or the governor role\\n    /// @dev Access control is only kept in the `CoreBorrow` contract which means that this function\\n    /// queries the `CoreBorrow` contract\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether a given address has well been initialized in this contract\\n    /// as a `VaultManager``\\n    /// @param _vaultManager Address to check\\n    /// @return Whether the address has been initialized or not\\n    function isVaultManager(address _vaultManager) external view returns (bool);\\n\\n    /// @notice Sets a new flash loan module for this stablecoin\\n    /// @param _flashLoanModule Reference to the new flash loan module\\n    /// @dev This function removes the minting right to the old flash loan module and grants\\n    /// it to the new module\\n    function setFlashLoanModule(address _flashLoanModule) external;\\n}\\n\",\"keccak256\":\"0xced9b7256fcbedc75682037e11ce51fe9116e5604794b8545e00dea0607629cc\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\n// ========================= Key Structs and Enums =============================\\n\\n/// @notice Parameters associated to a given `VaultManager` contract: these all correspond\\n/// to parameters which signification is detailed in the `VaultManagerStorage` file\\nstruct VaultParameters {\\n    uint256 debtCeiling;\\n    uint64 collateralFactor;\\n    uint64 targetHealthFactor;\\n    uint64 interestRate;\\n    uint64 liquidationSurcharge;\\n    uint64 maxLiquidationDiscount;\\n    bool whitelistingActivated;\\n    uint256 baseBoost;\\n}\\n\\n/// @notice Data stored to track someone's loan (or equivalently called position)\\nstruct Vault {\\n    // Amount of collateral deposited in the vault, in collateral decimals. For example, if the collateral\\n    // is USDC with 6 decimals, then `collateralAmount` will be in base 10**6\\n    uint256 collateralAmount;\\n    // Normalized value of the debt (that is to say of the stablecoins borrowed). It is expressed\\n    // in the base of Angle stablecoins (i.e. `BASE_TOKENS = 10**18`)\\n    uint256 normalizedDebt;\\n}\\n\\n/// @notice For a given `vaultID`, this encodes a liquidation opportunity that is to say details about the maximum\\n/// amount that could be repaid by liquidating the position\\n/// @dev All the values are null in the case of a vault which cannot be liquidated under these conditions\\nstruct LiquidationOpportunity {\\n    // Maximum stablecoin amount that can be repaid upon liquidating the vault\\n    uint256 maxStablecoinAmountToRepay;\\n    // Collateral amount given to the person in the case where the maximum amount to repay is given\\n    uint256 maxCollateralAmountGiven;\\n    // Threshold value of stablecoin amount to repay: it is ok for a liquidator to repay below threshold,\\n    // but if this threshold is non null and the liquidator wants to repay more than threshold, it should repay\\n    // the max stablecoin amount given in this vault\\n    uint256 thresholdRepayAmount;\\n    // Discount proposed to the liquidator on the collateral\\n    uint256 discount;\\n    // Amount of debt in the vault\\n    uint256 currentDebt;\\n}\\n\\n/// @notice Data stored during a liquidation process to keep in memory what's due to a liquidator and some\\n/// essential data for vaults being liquidated\\nstruct LiquidatorData {\\n    // Current amount of stablecoins the liquidator should give to the contract\\n    uint256 stablecoinAmountToReceive;\\n    // Current amount of collateral the contract should give to the liquidator\\n    uint256 collateralAmountToGive;\\n    // Bad debt accrued across the liquidation process\\n    uint256 badDebtFromLiquidation;\\n    // Oracle value (in stablecoin base) at the time of the liquidation\\n    uint256 oracleValue;\\n    // Value of the `interestAccumulator` at the time of the call\\n    uint256 newInterestAccumulator;\\n}\\n\\n/// @notice Data to track during a series of action the amount to give or receive in stablecoins and collateral\\n/// to the caller or associated addresses\\nstruct PaymentData {\\n    // Stablecoin amount the contract should give\\n    uint256 stablecoinAmountToGive;\\n    // Stablecoin amount owed to the contract\\n    uint256 stablecoinAmountToReceive;\\n    // Collateral amount the contract should give\\n    uint256 collateralAmountToGive;\\n    // Collateral amount owed to the contract\\n    uint256 collateralAmountToReceive;\\n}\\n\\n/// @notice Actions possible when composing calls to the different entry functions proposed\\nenum ActionType {\\n    createVault,\\n    closeVault,\\n    addCollateral,\\n    removeCollateral,\\n    repayDebt,\\n    borrow,\\n    getDebtIn,\\n    permit\\n}\\n\\n// ========================= Interfaces =============================\\n\\n/// @title IVaultManagerFunctions\\n/// @author Angle Core Team\\n/// @notice Interface for the `VaultManager` contract\\n/// @dev This interface only contains functions of the contract which are called by other contracts\\n/// of this module (without getters)\\ninterface IVaultManagerFunctions {\\n    /// @notice Accrues interest accumulated across all vaults to the surplus and sends the surplus to the treasury\\n    /// @return surplusValue Value of the surplus communicated to the `Treasury`\\n    /// @return badDebtValue Value of the bad debt communicated to the `Treasury`\\n    /// @dev `surplus` and `badDebt` should be reset to 0 once their current value have been given to the `treasury` contract\\n    function accrueInterestToTreasury() external returns (uint256 surplusValue, uint256 badDebtValue);\\n\\n    /// @notice Removes debt from a vault after being requested to do so by another `VaultManager` contract\\n    /// @param vaultID ID of the vault to remove debt from\\n    /// @param amountStablecoins Amount of stablecoins to remove from the debt: this amount is to be converted to an\\n    /// internal debt amount\\n    /// @param senderBorrowFee Borrowing fees from the contract which requested this: this is to make sure that people are not\\n    /// arbitraging difference in minting fees\\n    /// @param senderRepayFee Repay fees from the contract which requested this: this is to make sure that people are not arbitraging\\n    /// differences in repay fees\\n    /// @dev This function can only be called from a vaultManager registered in the same Treasury\\n    function getDebtOut(\\n        uint256 vaultID,\\n        uint256 amountStablecoins,\\n        uint256 senderBorrowFee,\\n        uint256 senderRepayFee\\n    ) external;\\n\\n    /// @notice Gets the current debt of a vault\\n    /// @param vaultID ID of the vault to check\\n    /// @return Debt of the vault\\n    function getVaultDebt(uint256 vaultID) external view returns (uint256);\\n\\n    /// @notice Gets the total debt across all vaults\\n    /// @return Total debt across all vaults, taking into account the interest accumulated\\n    /// over time\\n    function getTotalDebt() external view returns (uint256);\\n\\n    /// @notice Sets the treasury contract\\n    /// @param _treasury New treasury contract\\n    /// @dev All required checks when setting up a treasury contract are performed in the contract\\n    /// calling this function\\n    function setTreasury(address _treasury) external;\\n\\n    /// @notice Creates a vault\\n    /// @param toVault Address for which the va\\n    /// @return vaultID ID of the vault created\\n    /// @dev This function just creates the vault without doing any collateral or\\n    function createVault(address toVault) external returns (uint256);\\n\\n    /// @notice Allows composability between calls to the different entry points of this module. Any user calling\\n    /// this function can perform any of the allowed actions in the order of their choice\\n    /// @param actions Set of actions to perform\\n    /// @param datas Data to be decoded for each action: it can include like the `vaultID` or the `stablecoinAmount` to borrow\\n    /// @param from Address from which stablecoins will be taken if one action includes burning stablecoins. This address\\n    /// should either be the `msg.sender` or be approved by the latter\\n    /// @param to Address to which stablecoins and/or collateral will be sent in case of\\n    /// @param who Address of the contract to handle in case of repayment of stablecoins from received collateral\\n    /// @param repayData Data to pass to the repayment contract in case of\\n    /// @return paymentData Struct containing the accounting changes from the protocol's perspective (like how much of collateral\\n    /// or how much has been received). Note that the values in the struct are not aggregated and you could have in the output\\n    /// a positive amount of stablecoins to receive as well as a positive amount of stablecoins to give\\n    /// @dev This function is optimized to reduce gas cost due to payment from or to the user and that expensive calls\\n    /// or computations (like `oracleValue`) are done only once\\n    /// @dev When specifying `vaultID` in `data`, it is important to know that if you specify `vaultID = 0`, it will simply\\n    /// use the latest `vaultID`. This is the default behavior, and unless you're engaging into some complex protocol actions\\n    /// it is encouraged to use `vaultID = 0` only when the first action of the batch is `createVault`\\n    function angle(\\n        ActionType[] memory actions,\\n        bytes[] memory datas,\\n        address from,\\n        address to,\\n        address who,\\n        bytes memory repayData\\n    ) external returns (PaymentData memory paymentData);\\n\\n    /// @notice This function is a wrapper built on top of the function above. It enables users to interact with the contract\\n    /// without having to provide `who` and `repayData` parameters\\n    function angle(\\n        ActionType[] memory actions,\\n        bytes[] memory datas,\\n        address from,\\n        address to\\n    ) external returns (PaymentData memory paymentData);\\n\\n    /// @notice Initializes the `VaultManager` contract\\n    /// @param _treasury Treasury address handling the contract\\n    /// @param _collateral Collateral supported by this contract\\n    /// @param _oracle Oracle contract used\\n    /// @param _symbol Symbol used to define the `VaultManager` name and symbol\\n    /// @dev The parameters and the oracle are the only elements which could be modified once the\\n    /// contract has been initialized\\n    /// @dev For the contract to be fully initialized, governance needs to set the parameters for the liquidation\\n    /// boost\\n    function initialize(\\n        ITreasury _treasury,\\n        IERC20 _collateral,\\n        IOracle _oracle,\\n        VaultParameters calldata params,\\n        string memory _symbol\\n    ) external;\\n}\\n\\n/// @title IVaultManagerStorage\\n/// @author Angle Core Team\\n/// @notice Interface for the `VaultManager` contract\\n/// @dev This interface contains getters of the contract's public variables used by other contracts\\n/// of this module\\ninterface IVaultManagerStorage {\\n    /// @notice Minimum amount of debt a vault can have, expressed in `BASE_TOKENS` that is to say the base of the agTokens\\n    function dust() external view returns (uint256);\\n\\n    /// @notice Encodes the maximum ratio stablecoin/collateral a vault can have before being liquidated. It's what\\n    /// determines the minimum collateral ratio of a position\\n    function collateralFactor() external view returns (uint64);\\n\\n    /// @notice Stablecoin handled by this contract. Another `VaultManager` contract could have\\n    /// the same rights as this `VaultManager` on the stablecoin contract\\n    function stablecoin() external view returns (IAgToken);\\n\\n    /// @notice Reference to the `treasury` contract handling this `VaultManager`\\n    function treasury() external view returns (ITreasury);\\n\\n    /// @notice Oracle contract to get access to the price of the collateral with respect to the stablecoin\\n    function oracle() external view returns (IOracle);\\n\\n    /// @notice The `interestAccumulator` variable keeps track of the interest that should accrue to the protocol.\\n    /// The stored value is not necessarily the true value: this one is recomputed every time an action takes place\\n    /// within the protocol. It is in base `BASE_INTEREST`\\n    function interestAccumulator() external view returns (uint256);\\n\\n    /// @notice Reference to the collateral handled by this `VaultManager`\\n    function collateral() external view returns (IERC20);\\n\\n    /// @notice Total normalized amount of stablecoins borrowed, not taking into account the potential bad debt accumulated\\n    /// This value is expressed in the base of Angle stablecoins (`BASE_TOKENS = 10**18`)\\n    function totalNormalizedDebt() external view returns (uint256);\\n\\n    /// @notice Maximum amount of stablecoins that can be issued with this contract. It is expressed in `BASE_TOKENS`\\n    function debtCeiling() external view returns (uint256);\\n\\n    /// @notice Maps a `vaultID` to its data (namely collateral amount and normalized debt)\\n    function vaultData(uint256 vaultID) external view returns (uint256 collateralAmount, uint256 normalizedDebt);\\n\\n    /// @notice ID of the last vault created. The `vaultIDCount` variables serves as a counter to generate a unique\\n    /// `vaultID` for each vault: it is like `tokenID` in basic ERC721 contracts\\n    function vaultIDCount() external view returns (uint256);\\n}\\n\\n/// @title IVaultManager\\n/// @author Angle Core Team\\n/// @notice Interface for the `VaultManager` contract\\ninterface IVaultManager is IVaultManagerFunctions, IVaultManagerStorage, IERC721Metadata {\\n\\n}\\n\",\"keccak256\":\"0x39da5fbb9662403f68a55e0aaa5436cc3b1e9c9ed1ee5f66ee8acfbd099559e8\",\"license\":\"GPL-3.0\"},\"contracts/treasury/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../interfaces/IAgToken.sol\\\";\\nimport \\\"../interfaces/ICoreBorrow.sol\\\";\\nimport \\\"../interfaces/IFlashAngle.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/IVaultManager.sol\\\";\\n\\n/// @title Treasury\\n/// @author Angle Core Team\\n/// @notice Treasury of Angle Borrowing Module doing the accounting across all VaultManagers for\\n/// a given stablecoin\\ncontract Treasury is ITreasury, Initializable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Base used for parameter computation\\n    uint256 public constant BASE_PARAMS = 10**9;\\n\\n    // =============================== References ==================================\\n\\n    /// @notice Reference to the `CoreBorrow` contract of the module which handles all AccessControl logic\\n    ICoreBorrow public core;\\n    /// @notice Flash Loan Module with a minter right on the stablecoin\\n    IFlashAngle public flashLoanModule;\\n    /// @inheritdoc ITreasury\\n    IAgToken public stablecoin;\\n    /// @notice Address responsible for handling the surplus made by the treasury\\n    address public surplusManager;\\n    /// @notice List of the accepted `VaultManager` of the protocol\\n    address[] public vaultManagerList;\\n    /// @notice Maps an address to 1 if it was initialized as a `VaultManager` contract\\n    mapping(address => uint256) public vaultManagerMap;\\n\\n    // =============================== Variables ===================================\\n\\n    /// @notice Amount of bad debt (unbacked stablecoin) accumulated across all `VaultManager` contracts\\n    /// linked to this stablecoin\\n    uint256 public badDebt;\\n    /// @notice Surplus amount accumulated by the contract waiting to be distributed to governance. Technically\\n    /// only a share of this `surplusBuffer` will go to governance. Once a share of the surplus buffer has been\\n    /// given to governance, then this surplus is reset\\n    uint256 public surplusBuffer;\\n\\n    // =============================== Parameter ===================================\\n\\n    /// @notice Share of the `surplusBuffer` distributed to governance (in `BASE_PARAMS`)\\n    uint64 public surplusForGovernance;\\n\\n    // =============================== Events ======================================\\n\\n    event BadDebtUpdated(uint256 badDebtValue);\\n    event CoreUpdated(address indexed _core);\\n    event NewTreasurySet(address indexed _treasury);\\n    event Recovered(address indexed token, address indexed to, uint256 amount);\\n    event SurplusBufferUpdated(uint256 surplusBufferValue);\\n    event SurplusForGovernanceUpdated(uint64 _surplusForGovernance);\\n    event SurplusManagerUpdated(address indexed _surplusManager);\\n    event VaultManagerToggled(address indexed vaultManager);\\n\\n    // =============================== Errors ======================================\\n\\n    error AlreadyVaultManager();\\n    error InvalidAddress();\\n    error InvalidTreasury();\\n    error NotCore();\\n    error NotGovernor();\\n    error NotVaultManager();\\n    error RightsNotRemoved();\\n    error TooBigAmount();\\n    error TooHighParameterValue();\\n    error ZeroAddress();\\n\\n    // =============================== Modifier ====================================\\n\\n    /// @notice Checks whether the `msg.sender` has the governor role or not\\n    modifier onlyGovernor() {\\n        if (!core.isGovernor(msg.sender)) revert NotGovernor();\\n        _;\\n    }\\n\\n    /// @notice Initializes the treasury contract\\n    /// @param _core Address of the `CoreBorrow` contract of the module\\n    /// @param _stablecoin Address of the stablecoin\\n    function initialize(ICoreBorrow _core, IAgToken _stablecoin) public initializer {\\n        if (address(_stablecoin) == address(0) || address(_core) == address(0)) revert ZeroAddress();\\n        core = _core;\\n        stablecoin = _stablecoin;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    // ========================= View Functions ====================================\\n\\n    /// @inheritdoc ITreasury\\n    function isGovernor(address admin) external view returns (bool) {\\n        return core.isGovernor(admin);\\n    }\\n\\n    /// @inheritdoc ITreasury\\n    function isGovernorOrGuardian(address admin) external view returns (bool) {\\n        return core.isGovernorOrGuardian(admin);\\n    }\\n\\n    /// @inheritdoc ITreasury\\n    function isVaultManager(address _vaultManager) external view returns (bool) {\\n        return vaultManagerMap[_vaultManager] == 1;\\n    }\\n\\n    // ============= External Permissionless Functions =============================\\n\\n    /// @notice Fetches the surplus accrued across all the `VaultManager` contracts controlled by this\\n    /// `Treasury` contract as well as from the fees of the `FlashLoan` module\\n    /// @return Surplus buffer value at the end of the call\\n    /// @return Bad debt value at the end of the call\\n    /// @dev This function pools surplus and bad debt across all contracts and then updates the `surplusBuffer`\\n    /// (or the `badDebt` if more losses were made than profits)\\n    function fetchSurplusFromAll() external returns (uint256, uint256) {\\n        return _fetchSurplusFromAll();\\n    }\\n\\n    /// @notice Fetches the surplus accrued in the flash loan module and updates the `surplusBuffer`\\n    /// @return Surplus buffer value at the end of the call\\n    /// @return Bad debt value at the end of the call\\n    /// @dev This function fails if the `flashLoanModule` has not been initialized yet\\n    function fetchSurplusFromFlashLoan() external returns (uint256, uint256) {\\n        uint256 surplusBufferValue = surplusBuffer + flashLoanModule.accrueInterestToTreasury(stablecoin);\\n        return _updateSurplusAndBadDebt(surplusBufferValue, badDebt);\\n    }\\n\\n    /// @notice Pushes the surplus buffer to the `surplusManager` contract\\n    /// @return governanceAllocation Amount transferred to governance\\n    /// @dev It makes sure to fetch the surplus from all the contracts handled by this treasury to avoid\\n    /// the situation where rewards are still distributed to governance even though a `VaultManager` has made\\n    /// a big loss\\n    /// @dev Typically this function is to be called once every week by a keeper to distribute rewards to veANGLE\\n    /// holders\\n    /// @dev `stablecoin` must be an AgToken and hence `transfer` reverts if the call is not successful\\n    function pushSurplus() external returns (uint256 governanceAllocation) {\\n        address _surplusManager = surplusManager;\\n        if (_surplusManager == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        (uint256 surplusBufferValue, ) = _fetchSurplusFromAll();\\n        surplusBuffer = 0;\\n        emit SurplusBufferUpdated(0);\\n        governanceAllocation = (surplusForGovernance * surplusBufferValue) / BASE_PARAMS;\\n        stablecoin.transfer(_surplusManager, governanceAllocation);\\n    }\\n\\n    /// @notice Updates the bad debt of the protocol in case where the protocol has accumulated some revenue\\n    /// from an external source\\n    /// @param amount Amount to reduce the bad debt of\\n    /// @return badDebtValue Value of the bad debt at the end of the call\\n    /// @dev If the protocol has made a loss and managed to make some profits to recover for this loss (through\\n    /// a program like Olympus Pro), then this function needs to be called\\n    /// @dev `badDebt` is simply reduced here by burning stablecoins\\n    /// @dev It is impossible to burn more than the `badDebt` otherwise this function could be used to manipulate\\n    /// the `surplusBuffer` and hence the amount going to governance\\n    function updateBadDebt(uint256 amount) external returns (uint256 badDebtValue) {\\n        stablecoin.burnSelf(amount, address(this));\\n        badDebtValue = badDebt - amount;\\n        badDebt = badDebtValue;\\n        emit BadDebtUpdated(badDebtValue);\\n    }\\n\\n    // ==================== Internal Utility Functions =============================\\n\\n    /// @notice Internal version of the `fetchSurplusFromAll` function\\n    function _fetchSurplusFromAll() internal returns (uint256 surplusBufferValue, uint256 badDebtValue) {\\n        (surplusBufferValue, badDebtValue) = _fetchSurplusFromList(vaultManagerList);\\n        // It will fail anyway if the `flashLoanModule` is the zero address\\n        if (address(flashLoanModule) != address(0))\\n            surplusBufferValue += flashLoanModule.accrueInterestToTreasury(stablecoin);\\n        (surplusBufferValue, badDebtValue) = _updateSurplusAndBadDebt(surplusBufferValue, badDebtValue);\\n    }\\n\\n    /// @notice Fetches the surplus from a list of `VaultManager` addresses without modifying the\\n    /// `surplusBuffer` and `badDebtValue`\\n    /// @return surplusBufferValue Value the `surplusBuffer` should have after the call if it was updated\\n    /// @return badDebtValue Value the `badDebt` should have after the call if it was updated\\n    /// @dev This internal function is never to be called alone, and should always be called in conjunction\\n    /// with the `_updateSurplusAndBadDebt` function\\n    function _fetchSurplusFromList(address[] memory vaultManagers)\\n        internal\\n        returns (uint256 surplusBufferValue, uint256 badDebtValue)\\n    {\\n        badDebtValue = badDebt;\\n        surplusBufferValue = surplusBuffer;\\n        uint256 newSurplus;\\n        uint256 newBadDebt;\\n        for (uint256 i = 0; i < vaultManagers.length; i++) {\\n            (newSurplus, newBadDebt) = IVaultManager(vaultManagers[i]).accrueInterestToTreasury();\\n            surplusBufferValue += newSurplus;\\n            badDebtValue += newBadDebt;\\n        }\\n    }\\n\\n    /// @notice Updates the `surplusBuffer` and the `badDebt` from updated values after calling the flash loan module\\n    /// and/or a list of `VaultManager` contracts\\n    /// @param surplusBufferValue Value of the surplus buffer after the calls to the different modules\\n    /// @param badDebtValue Value of the bad debt after the calls to the different modules\\n    /// @return Value of the `surplusBuffer` corrected from the `badDebt``\\n    /// @return Value of the `badDebt` corrected from the `surplusBuffer` and from the surplus the treasury had accumulated\\n    /// previously\\n    /// @dev When calling this function, it is possible that there is a positive `surplusBufferValue` and `badDebtValue`,\\n    /// this function tries to reconcile both values and makes sure that we either have surplus or bad debt but not both\\n    /// at the same time\\n    function _updateSurplusAndBadDebt(uint256 surplusBufferValue, uint256 badDebtValue)\\n        internal\\n        returns (uint256, uint256)\\n    {\\n        if (badDebtValue > 0) {\\n            // If we have bad debt we need to burn stablecoins that accrued to the protocol\\n            // We still need to make sure that we're not burning too much or as much as we can if the debt is big\\n            uint256 balance = stablecoin.balanceOf(address(this));\\n            // We are going to burn `min(balance, badDebtValue)`\\n            uint256 toBurn = balance <= badDebtValue ? balance : badDebtValue;\\n            stablecoin.burnSelf(toBurn, address(this));\\n            // If we burned more than `surplusBuffer`, we set surplus to 0. It means we had to tap into Treasury reserve\\n            surplusBufferValue = toBurn >= surplusBufferValue ? 0 : surplusBufferValue - toBurn;\\n            badDebtValue -= toBurn;\\n            // Note here that the stablecoin balance is necessarily greater than the surplus buffer, and so if\\n            // `surplusBuffer >= toBurn`, then `badDebtValue = toBurn`\\n        }\\n        surplusBuffer = surplusBufferValue;\\n        badDebt = badDebtValue;\\n        emit SurplusBufferUpdated(surplusBufferValue);\\n        emit BadDebtUpdated(badDebtValue);\\n        return (surplusBufferValue, badDebtValue);\\n    }\\n\\n    // ============================ Governor Functions =============================\\n\\n    /// @notice Adds a new minter for the stablecoin\\n    /// @param minter Minter address to add\\n    function addMinter(address minter) external onlyGovernor {\\n        if (minter == address(0)) revert ZeroAddress();\\n        stablecoin.addMinter(minter);\\n    }\\n\\n    /// @notice Adds a new `VaultManager`\\n    /// @param vaultManager `VaultManager` contract to add\\n    /// @dev This contract should have already been initialized with a correct treasury address\\n    /// @dev It's this function that gives the minter right to the `VaultManager`\\n    function addVaultManager(address vaultManager) external onlyGovernor {\\n        if (vaultManagerMap[vaultManager] == 1) revert AlreadyVaultManager();\\n        if (address(IVaultManager(vaultManager).treasury()) != address(this)) revert InvalidTreasury();\\n        vaultManagerMap[vaultManager] = 1;\\n        vaultManagerList.push(vaultManager);\\n        emit VaultManagerToggled(vaultManager);\\n        stablecoin.addMinter(vaultManager);\\n    }\\n\\n    /// @notice Removes a minter from the stablecoin contract\\n    /// @param minter Minter address to remove\\n    function removeMinter(address minter) external onlyGovernor {\\n        // To remove the minter role to a `VaultManager` you have to go through the `removeVaultManager` function\\n        if (vaultManagerMap[minter] == 1) revert InvalidAddress();\\n        stablecoin.removeMinter(minter);\\n    }\\n\\n    /// @notice Removes a `VaultManager`\\n    /// @param vaultManager `VaultManager` contract to remove\\n    /// @dev A removed `VaultManager` loses its minter right on the stablecoin\\n    function removeVaultManager(address vaultManager) external onlyGovernor {\\n        if (vaultManagerMap[vaultManager] != 1) revert NotVaultManager();\\n        delete vaultManagerMap[vaultManager];\\n        // deletion from `vaultManagerList` loop\\n        uint256 vaultManagerListLength = vaultManagerList.length;\\n        for (uint256 i = 0; i < vaultManagerListLength - 1; i++) {\\n            if (vaultManagerList[i] == vaultManager) {\\n                // replace the `VaultManager` to remove with the last of the list\\n                vaultManagerList[i] = vaultManagerList[vaultManagerListLength - 1];\\n                break;\\n            }\\n        }\\n        // remove last element in array\\n        vaultManagerList.pop();\\n        emit VaultManagerToggled(vaultManager);\\n        stablecoin.removeMinter(vaultManager);\\n    }\\n\\n    /// @notice Allows to recover any ERC20 token, including the stablecoin handled by this contract, and to send it\\n    /// to a contract\\n    /// @param tokenAddress Address of the token to recover\\n    /// @param to Address of the contract to send collateral to\\n    /// @param amountToRecover Amount of collateral to transfer\\n    /// @dev It is impossible to recover the stablecoin of the protocol if there is some bad debt for it\\n    /// @dev In this case, the function makes sure to fetch the surplus/bad debt from all the `VaultManager` contracts\\n    /// and from the flash loan module\\n    /// @dev If the token to recover is the stablecoin, tokens recovered are fetched\\n    /// from the surplus and not from the `surplusBuffer`\\n    function recoverERC20(\\n        address tokenAddress,\\n        address to,\\n        uint256 amountToRecover\\n    ) external onlyGovernor {\\n        // Cannot recover stablecoin if badDebt or tap into the surplus buffer\\n        if (tokenAddress == address(stablecoin)) {\\n            _fetchSurplusFromAll();\\n            // If balance is non zero then this means, after the call to `fetchSurplusFromAll` that\\n            // bad debt is necessarily null\\n            uint256 balance = stablecoin.balanceOf(address(this));\\n            if (amountToRecover + surplusBuffer > balance) revert TooBigAmount();\\n            stablecoin.transfer(to, amountToRecover);\\n        } else {\\n            IERC20(tokenAddress).safeTransfer(to, amountToRecover);\\n        }\\n        emit Recovered(tokenAddress, to, amountToRecover);\\n    }\\n\\n    /// @notice Changes the treasury contract and communicates this change to all `VaultManager` contract\\n    /// @param _treasury New treasury address for this stablecoin\\n    /// @dev This function is basically a way to remove rights to this contract and grant them to a new one\\n    /// @dev It could be used to set a new core contract\\n    function setTreasury(address _treasury) external onlyGovernor {\\n        if (ITreasury(_treasury).stablecoin() != stablecoin) revert InvalidTreasury();\\n        // Flash loan role should be removed before calling this function\\n        if (core.isFlashLoanerTreasury(address(this))) revert RightsNotRemoved();\\n        emit NewTreasurySet(_treasury);\\n        for (uint256 i = 0; i < vaultManagerList.length; i++) {\\n            IVaultManager(vaultManagerList[i]).setTreasury(_treasury);\\n        }\\n        // A `TreasuryUpdated` event is triggered in the stablecoin\\n        stablecoin.setTreasury(_treasury);\\n    }\\n\\n    /// @notice Sets the `surplusForGovernance` parameter\\n    /// @param _surplusForGovernance New value of the parameter\\n    /// @dev To pause surplus distribution, governance needs to set a zero value for `surplusForGovernance`\\n    /// which means\\n    function setSurplusForGovernance(uint64 _surplusForGovernance) external onlyGovernor {\\n        if (_surplusForGovernance > BASE_PARAMS) revert TooHighParameterValue();\\n        surplusForGovernance = _surplusForGovernance;\\n        emit SurplusForGovernanceUpdated(_surplusForGovernance);\\n    }\\n\\n    /// @notice Sets the `surplusManager` contract responsible for handling the surplus of the\\n    /// protocol\\n    /// @param _surplusManager New address responsible for handling the surplus\\n    function setSurplusManager(address _surplusManager) external onlyGovernor {\\n        if (_surplusManager == address(0)) revert ZeroAddress();\\n        surplusManager = _surplusManager;\\n        emit SurplusManagerUpdated(_surplusManager);\\n    }\\n\\n    /// @notice Sets a new `core` contract\\n    /// @dev This function should typically be called on all treasury contracts after the `setCore`\\n    /// function has been called on the `CoreBorrow` contract\\n    /// @dev One sanity check that can be performed here is to verify whether at least the governor\\n    /// calling the contract is still a governor in the new core\\n    function setCore(ICoreBorrow _core) external onlyGovernor {\\n        if (!_core.isGovernor(msg.sender)) revert NotGovernor();\\n        core = ICoreBorrow(_core);\\n        emit CoreUpdated(address(_core));\\n    }\\n\\n    /// @inheritdoc ITreasury\\n    function setFlashLoanModule(address _flashLoanModule) external {\\n        if (msg.sender != address(core)) revert NotCore();\\n        address oldFlashLoanModule = address(flashLoanModule);\\n        flashLoanModule = IFlashAngle(_flashLoanModule);\\n        if (oldFlashLoanModule != address(0)) {\\n            stablecoin.removeMinter(oldFlashLoanModule);\\n        }\\n        // We may want to cancel the module\\n        if (_flashLoanModule != address(0)) {\\n            stablecoin.addMinter(_flashLoanModule);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x485600569a89a2f0b36ab168ea8c131bb5e3fd83c1dfe7589352a4d3a391e5ff\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b6200223e1760201c565b15905090565b3b151590565b612d8580620001126000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063676a553e116100f9578063bbcac55711610097578063e9cbd82211610071578063e9cbd8221461040d578063f0f442601461042d578063f2f4eb2614610440578063f5ec243c1461046657600080fd5b8063bbcac557146103de578063df486819146103e7578063e43581b8146103fa57600080fd5b8063959d5a01116100d3578063959d5a0114610368578063983b2d56146103ad5780639f48118f146103c0578063a9462410146103cb57600080fd5b8063676a553e146102fc5780638000963014610335578063891102351461034857600080fd5b80633092afd5116101665780635290e6a6116101405780635290e6a6146102bb5780635c77f285146102ce5780635e654522146102d65780635f80fcad146102e957600080fd5b80633092afd514610272578063485cc95514610285578063521d4de91461029857600080fd5b806319106b67116101a257806319106b671461022157806321c29f92146102295780632a608d5b1461023c5780632f15caed1461024557600080fd5b80630d45456d146101c95780631171bda9146101eb578063137f3b0a14610200575b600080fd5b6101d1610486565b604080519283526020830191909152015b60405180910390f35b6101fe6101f93660046129ef565b610499565b005b61021361020e366004612a30565b6107a0565b6040519081526020016101e2565b610213610879565b6101fe610237366004612a49565b6109e1565b61021360075481565b6008546102599067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101e2565b6101fe610280366004612a49565b610baf565b6101fe610293366004612a66565b610d65565b6102ab6102a6366004612a49565b610f72565b60405190151581526020016101e2565b6101fe6102c9366004612a49565b611015565b6101d161138a565b6101fe6102e4366004612a9f565b61144d565b6101fe6102f7366004612a49565b6115cf565b6102ab61030a366004612a49565b73ffffffffffffffffffffffffffffffffffffffff1660009081526005602052604090205460011490565b6101fe610343366004612a49565b6118cd565b610213610356366004612a49565b60056020526000908152604090205481565b6001546103889073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101e2565b6101fe6103bb366004612a49565b611ad3565b610213633b9aca0081565b6101fe6103d9366004612a49565b611c45565b61021360065481565b6103886103f5366004612a30565b611dce565b6102ab610408366004612a49565b611e05565b6002546103889073ffffffffffffffffffffffffffffffffffffffff1681565b6101fe61043b366004612a49565b611e65565b6000546103889062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b6003546103889073ffffffffffffffffffffffffffffffffffffffff1681565b600080610491612244565b915091509091565b6000546040517fe43581b80000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890602401602060405180830381865afa15801561050c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105309190612ac9565b610566576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025473ffffffffffffffffffffffffffffffffffffffff8481169116141561071357610591612244565b50506002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106269190612aeb565b905080600754836106379190612b33565b111561066f576040517ff7432d9600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af11580156106e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070c9190612ac9565b5050610734565b61073473ffffffffffffffffffffffffffffffffffffffff84168383612392565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b6488360405161079391815260200190565b60405180910390a3505050565b6002546040517f2b471d8e0000000000000000000000000000000000000000000000000000000081526004810183905230602482015260009173ffffffffffffffffffffffffffffffffffffffff1690632b471d8e90604401600060405180830381600087803b15801561081357600080fd5b505af1158015610827573d6000803e3d6000fd5b50505050816006546108399190612b4b565b60068190556040518181529091507f6ec1ccf63c33130734196ff1971d19a46a2b28ce37b81f90ea52f4311319203f9060200160405180910390a1919050565b60035460009073ffffffffffffffffffffffffffffffffffffffff16806108cc576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108d6612244565b50600060078190556040519081529091507f2f439c0500f79f2f3322b3665dcdaaa6967182caf9916f6ce2c64f296e609ed29060200160405180910390a1600854633b9aca009061093290839067ffffffffffffffff16612b62565b61093c9190612b9f565b6002546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526024820184905292955091169063a9059cbb906044016020604051808303816000875af11580156109b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109db9190612ac9565b50505090565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff163314610a38576040517fe2aae06b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831617909255168015610b08576002546040517f3092afd500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015290911690633092afd590602401600060405180830381600087803b158015610aef57600080fd5b505af1158015610b03573d6000803e3d6000fd5b505050505b73ffffffffffffffffffffffffffffffffffffffff821615610bab576002546040517f983b2d5600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529091169063983b2d56906024015b600060405180830381600087803b158015610b9257600080fd5b505af1158015610ba6573d6000803e3d6000fd5b505050505b5050565b6000546040517fe43581b80000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890602401602060405180830381865afa158015610c22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c469190612ac9565b610c7c576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526005602052604090205460011415610cdc576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002546040517f3092afd500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015290911690633092afd5906024015b600060405180830381600087803b158015610d4a57600080fd5b505af1158015610d5e573d6000803e3d6000fd5b5050505050565b600054610100900460ff16610d805760005460ff1615610d84565b303b155b610e15576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff16158015610e5457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b73ffffffffffffffffffffffffffffffffffffffff82161580610e8b575073ffffffffffffffffffffffffffffffffffffffff8316155b15610ec2576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff8681169190910291909117909155600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000169184169190911790558015610f6d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050565b600080546040517f521d4de900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152620100009092049091169063521d4de9906024015b602060405180830381865afa158015610feb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100f9190612ac9565b92915050565b6000546040517fe43581b80000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890602401602060405180830381865afa158015611088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ac9190612ac9565b6110e2576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260056020526040902054600114611141576040517f027f480700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152600560205260408120819055600454905b611179600183612b4b565b811015611287578273ffffffffffffffffffffffffffffffffffffffff16600482815481106111aa576111aa612bda565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156112755760046111df600184612b4b565b815481106111ef576111ef612bda565b6000918252602090912001546004805473ffffffffffffffffffffffffffffffffffffffff909216918390811061122857611228612bda565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611287565b8061127f81612c09565b91505061116e565b50600480548061129957611299612c42565b60008281526020812082017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590910190915560405173ffffffffffffffffffffffffffffffffffffffff8416917ff1e53200c691f394b84864158f7d32772fed29ce025460533f94d6b5ef66906491a26002546040517f3092afd500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015290911690633092afd590602401610b78565b6001546002546040517f96337bd500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152600092839283929116906396337bd5906024016020604051808303816000875af1158015611405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114299190612aeb565b6007546114369190612b33565b90506114448160065461241f565b92509250509091565b6000546040517fe43581b80000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890602401602060405180830381865afa1580156114c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e49190612ac9565b61151a576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b633b9aca008167ffffffffffffffff161115611562576040517feca1d2c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600880547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff83169081179091556040519081527fe4c9afce87963212e0d33e6b4b43fee7103b8c57228620e450e5064b95ee08ec9060200160405180910390a150565b6000546040517fe43581b80000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890602401602060405180830381865afa158015611642573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116669190612ac9565b61169c576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260056020526040902054600114156116fc576040517fc357636900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561175e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117829190612c71565b73ffffffffffffffffffffffffffffffffffffffff16146117cf576040517f14bcf5c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526005602052604080822060019081905560048054918201815583527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001684179055517ff1e53200c691f394b84864158f7d32772fed29ce025460533f94d6b5ef6690649190a26002546040517f983b2d5600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063983b2d5690602401610d30565b6000546040517fe43581b80000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890602401602060405180830381865afa158015611940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119649190612ac9565b61199a576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff82169063e43581b890602401602060405180830381865afa158015611a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a289190612ac9565b611a5e576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff841690810291909117825560405190917f0c9c0f914e121785e2cd2269d6698bc11f59a50b85ef9aa1197fb4ddb96c4e5691a250565b6000546040517fe43581b80000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890602401602060405180830381865afa158015611b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6a9190612ac9565b611ba0576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116611bed576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002546040517f983b2d5600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063983b2d5690602401610d30565b6000546040517fe43581b80000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890602401602060405180830381865afa158015611cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdc9190612ac9565b611d12576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116611d5f576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f8e34f87614920d3825860be957926690888c7cb9ed7fb5ec457edaaad64bd28c90600090a250565b60048181548110611dde57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600080546040517fe43581b800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152620100009092049091169063e43581b890602401610fce565b6000546040517fe43581b80000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890602401602060405180830381865afa158015611ed8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611efc9190612ac9565b611f32576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254604080517fe9cbd822000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9283169284169163e9cbd8229160048083019260209291908290030181865afa158015611fa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc89190612c71565b73ffffffffffffffffffffffffffffffffffffffff1614612015576040517f14bcf5c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517ff02dd8a20000000000000000000000000000000000000000000000000000000081523060048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063f02dd8a290602401602060405180830381865afa158015612088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ac9190612ac9565b156120e3576040517f87c4c6b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405173ffffffffffffffffffffffffffffffffffffffff8216907fa74e71df5980104def7b321d0fa7d4b885191d40a2ae420acb543c3eba54253290600090a260005b6004548110156121e5576004818154811061214457612144612bda565b6000918252602090912001546040517ff0f4426000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529091169063f0f4426090602401600060405180830381600087803b1580156121ba57600080fd5b505af11580156121ce573d6000803e3d6000fd5b5050505080806121dd90612c09565b915050612127565b506002546040517ff0f4426000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063f0f4426090602401610d30565b3b151590565b6000806122b760048054806020026020016040519081016040528092919081815260200182805480156122ad57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311612282575b50505050506125fd565b600154919350915073ffffffffffffffffffffffffffffffffffffffff161561237f576001546002546040517f96337bd500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201529116906396337bd5906024016020604051808303816000875af115801561234e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123729190612aeb565b61237c9083612b33565b91505b612389828261241f565b90939092509050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610f6d9084906126d2565b6000808215612585576002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015612497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124bb9190612aeb565b90506000848211156124cd57846124cf565b815b6002546040517f2b471d8e0000000000000000000000000000000000000000000000000000000081526004810183905230602482015291925073ffffffffffffffffffffffffffffffffffffffff1690632b471d8e90604401600060405180830381600087803b15801561254257600080fd5b505af1158015612556573d6000803e3d6000fd5b50505050858110156125715761256c8187612b4b565b612574565b60005b95506125808186612b4b565b945050505b600784905560068390556040518481527f2f439c0500f79f2f3322b3665dcdaaa6967182caf9916f6ce2c64f296e609ed29060200160405180910390a16040518381527f6ec1ccf63c33130734196ff1971d19a46a2b28ce37b81f90ea52f4311319203f9060200160405180910390a1509192909150565b60065460075490600080805b85518110156126ca5785818151811061262457612624612bda565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663fd527cf86040518163ffffffff1660e01b815260040160408051808303816000875af1158015612677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269b9190612c8e565b90935091506126aa8386612b33565b94506126b68285612b33565b9350806126c281612c09565b915050612609565b505050915091565b6000612734826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166127de9092919063ffffffff16565b805190915015610f6d57808060200190518101906127529190612ac9565b610f6d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610e0c565b60606127ed84846000856127f7565b90505b9392505050565b606082471015612889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610e0c565b843b6128f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610e0c565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161291a9190612ce2565b60006040518083038185875af1925050503d8060008114612957576040519150601f19603f3d011682016040523d82523d6000602084013e61295c565b606091505b509150915061296c828286612977565b979650505050505050565b606083156129865750816127f0565b8251156129965782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0c9190612cfe565b73ffffffffffffffffffffffffffffffffffffffff811681146129ec57600080fd5b50565b600080600060608486031215612a0457600080fd5b8335612a0f816129ca565b92506020840135612a1f816129ca565b929592945050506040919091013590565b600060208284031215612a4257600080fd5b5035919050565b600060208284031215612a5b57600080fd5b81356127f0816129ca565b60008060408385031215612a7957600080fd5b8235612a84816129ca565b91506020830135612a94816129ca565b809150509250929050565b600060208284031215612ab157600080fd5b813567ffffffffffffffff811681146127f057600080fd5b600060208284031215612adb57600080fd5b815180151581146127f057600080fd5b600060208284031215612afd57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115612b4657612b46612b04565b500190565b600082821015612b5d57612b5d612b04565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612b9a57612b9a612b04565b500290565b600082612bd5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612c3b57612c3b612b04565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600060208284031215612c8357600080fd5b81516127f0816129ca565b60008060408385031215612ca157600080fd5b505080516020909101519092909150565b60005b83811015612ccd578181015183820152602001612cb5565b83811115612cdc576000848401525b50505050565b60008251612cf4818460208701612cb2565b9190910192915050565b6020815260008251806020840152612d1d816040850160208701612cb2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212202e993ac36574e05eec09995b261f98ff13b87944436fbb772f5dfc238911781d64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c8063676a553e116100f9578063bbcac55711610097578063e9cbd82211610071578063e9cbd8221461040d578063f0f442601461042d578063f2f4eb2614610440578063f5ec243c1461046657600080fd5b8063bbcac557146103de578063df486819146103e7578063e43581b8146103fa57600080fd5b8063959d5a01116100d3578063959d5a0114610368578063983b2d56146103ad5780639f48118f146103c0578063a9462410146103cb57600080fd5b8063676a553e146102fc5780638000963014610335578063891102351461034857600080fd5b80633092afd5116101665780635290e6a6116101405780635290e6a6146102bb5780635c77f285146102ce5780635e654522146102d65780635f80fcad146102e957600080fd5b80633092afd514610272578063485cc95514610285578063521d4de91461029857600080fd5b806319106b67116101a257806319106b671461022157806321c29f92146102295780632a608d5b1461023c5780632f15caed1461024557600080fd5b80630d45456d146101c95780631171bda9146101eb578063137f3b0a14610200575b600080fd5b6101d1610486565b604080519283526020830191909152015b60405180910390f35b6101fe6101f93660046129ef565b610499565b005b61021361020e366004612a30565b6107a0565b6040519081526020016101e2565b610213610879565b6101fe610237366004612a49565b6109e1565b61021360075481565b6008546102599067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101e2565b6101fe610280366004612a49565b610baf565b6101fe610293366004612a66565b610d65565b6102ab6102a6366004612a49565b610f72565b60405190151581526020016101e2565b6101fe6102c9366004612a49565b611015565b6101d161138a565b6101fe6102e4366004612a9f565b61144d565b6101fe6102f7366004612a49565b6115cf565b6102ab61030a366004612a49565b73ffffffffffffffffffffffffffffffffffffffff1660009081526005602052604090205460011490565b6101fe610343366004612a49565b6118cd565b610213610356366004612a49565b60056020526000908152604090205481565b6001546103889073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101e2565b6101fe6103bb366004612a49565b611ad3565b610213633b9aca0081565b6101fe6103d9366004612a49565b611c45565b61021360065481565b6103886103f5366004612a30565b611dce565b6102ab610408366004612a49565b611e05565b6002546103889073ffffffffffffffffffffffffffffffffffffffff1681565b6101fe61043b366004612a49565b611e65565b6000546103889062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b6003546103889073ffffffffffffffffffffffffffffffffffffffff1681565b600080610491612244565b915091509091565b6000546040517fe43581b80000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890602401602060405180830381865afa15801561050c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105309190612ac9565b610566576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025473ffffffffffffffffffffffffffffffffffffffff8481169116141561071357610591612244565b50506002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106269190612aeb565b905080600754836106379190612b33565b111561066f576040517ff7432d9600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018590529091169063a9059cbb906044016020604051808303816000875af11580156106e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070c9190612ac9565b5050610734565b61073473ffffffffffffffffffffffffffffffffffffffff84168383612392565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167ffff3b3844276f57024e0b42afec1a37f75db36511e43819a4f2a63ab7862b6488360405161079391815260200190565b60405180910390a3505050565b6002546040517f2b471d8e0000000000000000000000000000000000000000000000000000000081526004810183905230602482015260009173ffffffffffffffffffffffffffffffffffffffff1690632b471d8e90604401600060405180830381600087803b15801561081357600080fd5b505af1158015610827573d6000803e3d6000fd5b50505050816006546108399190612b4b565b60068190556040518181529091507f6ec1ccf63c33130734196ff1971d19a46a2b28ce37b81f90ea52f4311319203f9060200160405180910390a1919050565b60035460009073ffffffffffffffffffffffffffffffffffffffff16806108cc576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108d6612244565b50600060078190556040519081529091507f2f439c0500f79f2f3322b3665dcdaaa6967182caf9916f6ce2c64f296e609ed29060200160405180910390a1600854633b9aca009061093290839067ffffffffffffffff16612b62565b61093c9190612b9f565b6002546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526024820184905292955091169063a9059cbb906044016020604051808303816000875af11580156109b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109db9190612ac9565b50505090565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff163314610a38576040517fe2aae06b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831617909255168015610b08576002546040517f3092afd500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015290911690633092afd590602401600060405180830381600087803b158015610aef57600080fd5b505af1158015610b03573d6000803e3d6000fd5b505050505b73ffffffffffffffffffffffffffffffffffffffff821615610bab576002546040517f983b2d5600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529091169063983b2d56906024015b600060405180830381600087803b158015610b9257600080fd5b505af1158015610ba6573d6000803e3d6000fd5b505050505b5050565b6000546040517fe43581b80000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890602401602060405180830381865afa158015610c22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c469190612ac9565b610c7c576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526005602052604090205460011415610cdc576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002546040517f3092afd500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015290911690633092afd5906024015b600060405180830381600087803b158015610d4a57600080fd5b505af1158015610d5e573d6000803e3d6000fd5b5050505050565b600054610100900460ff16610d805760005460ff1615610d84565b303b155b610e15576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff16158015610e5457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b73ffffffffffffffffffffffffffffffffffffffff82161580610e8b575073ffffffffffffffffffffffffffffffffffffffff8316155b15610ec2576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff8681169190910291909117909155600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000169184169190911790558015610f6d57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b505050565b600080546040517f521d4de900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152620100009092049091169063521d4de9906024015b602060405180830381865afa158015610feb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100f9190612ac9565b92915050565b6000546040517fe43581b80000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890602401602060405180830381865afa158015611088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ac9190612ac9565b6110e2576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260056020526040902054600114611141576040517f027f480700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152600560205260408120819055600454905b611179600183612b4b565b811015611287578273ffffffffffffffffffffffffffffffffffffffff16600482815481106111aa576111aa612bda565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156112755760046111df600184612b4b565b815481106111ef576111ef612bda565b6000918252602090912001546004805473ffffffffffffffffffffffffffffffffffffffff909216918390811061122857611228612bda565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611287565b8061127f81612c09565b91505061116e565b50600480548061129957611299612c42565b60008281526020812082017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590910190915560405173ffffffffffffffffffffffffffffffffffffffff8416917ff1e53200c691f394b84864158f7d32772fed29ce025460533f94d6b5ef66906491a26002546040517f3092afd500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015290911690633092afd590602401610b78565b6001546002546040517f96337bd500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152600092839283929116906396337bd5906024016020604051808303816000875af1158015611405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114299190612aeb565b6007546114369190612b33565b90506114448160065461241f565b92509250509091565b6000546040517fe43581b80000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890602401602060405180830381865afa1580156114c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e49190612ac9565b61151a576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b633b9aca008167ffffffffffffffff161115611562576040517feca1d2c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600880547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff83169081179091556040519081527fe4c9afce87963212e0d33e6b4b43fee7103b8c57228620e450e5064b95ee08ec9060200160405180910390a150565b6000546040517fe43581b80000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890602401602060405180830381865afa158015611642573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116669190612ac9565b61169c576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260056020526040902054600114156116fc576040517fc357636900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561175e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117829190612c71565b73ffffffffffffffffffffffffffffffffffffffff16146117cf576040517f14bcf5c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526005602052604080822060019081905560048054918201815583527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001684179055517ff1e53200c691f394b84864158f7d32772fed29ce025460533f94d6b5ef6690649190a26002546040517f983b2d5600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063983b2d5690602401610d30565b6000546040517fe43581b80000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890602401602060405180830381865afa158015611940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119649190612ac9565b61199a576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fe43581b800000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff82169063e43581b890602401602060405180830381865afa158015611a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a289190612ac9565b611a5e576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff841690810291909117825560405190917f0c9c0f914e121785e2cd2269d6698bc11f59a50b85ef9aa1197fb4ddb96c4e5691a250565b6000546040517fe43581b80000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890602401602060405180830381865afa158015611b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6a9190612ac9565b611ba0576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116611bed576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002546040517f983b2d5600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063983b2d5690602401610d30565b6000546040517fe43581b80000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890602401602060405180830381865afa158015611cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdc9190612ac9565b611d12576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116611d5f576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f8e34f87614920d3825860be957926690888c7cb9ed7fb5ec457edaaad64bd28c90600090a250565b60048181548110611dde57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600080546040517fe43581b800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152620100009092049091169063e43581b890602401610fce565b6000546040517fe43581b80000000000000000000000000000000000000000000000000000000081523360048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063e43581b890602401602060405180830381865afa158015611ed8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611efc9190612ac9565b611f32576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254604080517fe9cbd822000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9283169284169163e9cbd8229160048083019260209291908290030181865afa158015611fa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc89190612c71565b73ffffffffffffffffffffffffffffffffffffffff1614612015576040517f14bcf5c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517ff02dd8a20000000000000000000000000000000000000000000000000000000081523060048201526201000090910473ffffffffffffffffffffffffffffffffffffffff169063f02dd8a290602401602060405180830381865afa158015612088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ac9190612ac9565b156120e3576040517f87c4c6b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405173ffffffffffffffffffffffffffffffffffffffff8216907fa74e71df5980104def7b321d0fa7d4b885191d40a2ae420acb543c3eba54253290600090a260005b6004548110156121e5576004818154811061214457612144612bda565b6000918252602090912001546040517ff0f4426000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529091169063f0f4426090602401600060405180830381600087803b1580156121ba57600080fd5b505af11580156121ce573d6000803e3d6000fd5b5050505080806121dd90612c09565b915050612127565b506002546040517ff0f4426000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063f0f4426090602401610d30565b3b151590565b6000806122b760048054806020026020016040519081016040528092919081815260200182805480156122ad57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311612282575b50505050506125fd565b600154919350915073ffffffffffffffffffffffffffffffffffffffff161561237f576001546002546040517f96337bd500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201529116906396337bd5906024016020604051808303816000875af115801561234e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123729190612aeb565b61237c9083612b33565b91505b612389828261241f565b90939092509050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610f6d9084906126d2565b6000808215612585576002546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015612497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124bb9190612aeb565b90506000848211156124cd57846124cf565b815b6002546040517f2b471d8e0000000000000000000000000000000000000000000000000000000081526004810183905230602482015291925073ffffffffffffffffffffffffffffffffffffffff1690632b471d8e90604401600060405180830381600087803b15801561254257600080fd5b505af1158015612556573d6000803e3d6000fd5b50505050858110156125715761256c8187612b4b565b612574565b60005b95506125808186612b4b565b945050505b600784905560068390556040518481527f2f439c0500f79f2f3322b3665dcdaaa6967182caf9916f6ce2c64f296e609ed29060200160405180910390a16040518381527f6ec1ccf63c33130734196ff1971d19a46a2b28ce37b81f90ea52f4311319203f9060200160405180910390a1509192909150565b60065460075490600080805b85518110156126ca5785818151811061262457612624612bda565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663fd527cf86040518163ffffffff1660e01b815260040160408051808303816000875af1158015612677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269b9190612c8e565b90935091506126aa8386612b33565b94506126b68285612b33565b9350806126c281612c09565b915050612609565b505050915091565b6000612734826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166127de9092919063ffffffff16565b805190915015610f6d57808060200190518101906127529190612ac9565b610f6d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610e0c565b60606127ed84846000856127f7565b90505b9392505050565b606082471015612889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610e0c565b843b6128f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610e0c565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161291a9190612ce2565b60006040518083038185875af1925050503d8060008114612957576040519150601f19603f3d011682016040523d82523d6000602084013e61295c565b606091505b509150915061296c828286612977565b979650505050505050565b606083156129865750816127f0565b8251156129965782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0c9190612cfe565b73ffffffffffffffffffffffffffffffffffffffff811681146129ec57600080fd5b50565b600080600060608486031215612a0457600080fd5b8335612a0f816129ca565b92506020840135612a1f816129ca565b929592945050506040919091013590565b600060208284031215612a4257600080fd5b5035919050565b600060208284031215612a5b57600080fd5b81356127f0816129ca565b60008060408385031215612a7957600080fd5b8235612a84816129ca565b91506020830135612a94816129ca565b809150509250929050565b600060208284031215612ab157600080fd5b813567ffffffffffffffff811681146127f057600080fd5b600060208284031215612adb57600080fd5b815180151581146127f057600080fd5b600060208284031215612afd57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115612b4657612b46612b04565b500190565b600082821015612b5d57612b5d612b04565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612b9a57612b9a612b04565b500290565b600082612bd5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612c3b57612c3b612b04565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600060208284031215612c8357600080fd5b81516127f0816129ca565b60008060408385031215612ca157600080fd5b505080516020909101519092909150565b60005b83811015612ccd578181015183820152602001612cb5565b83811115612cdc576000848401525b50505050565b60008251612cf4818460208701612cb2565b9190910192915050565b6020815260008251806020840152612d1d816040850160208701612cb2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212202e993ac36574e05eec09995b261f98ff13b87944436fbb772f5dfc238911781d64736f6c634300080c0033",
  "devdoc": {
    "author": "Angle Core Team",
    "kind": "dev",
    "methods": {
      "addMinter(address)": {
        "params": {
          "minter": "Minter address to add"
        }
      },
      "addVaultManager(address)": {
        "details": "This contract should have already been initialized with a correct treasury addressIt's this function that gives the minter right to the `VaultManager`",
        "params": {
          "vaultManager": "`VaultManager` contract to add"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "fetchSurplusFromAll()": {
        "details": "This function pools surplus and bad debt across all contracts and then updates the `surplusBuffer` (or the `badDebt` if more losses were made than profits)",
        "returns": {
          "_0": "Surplus buffer value at the end of the call",
          "_1": "Bad debt value at the end of the call"
        }
      },
      "fetchSurplusFromFlashLoan()": {
        "details": "This function fails if the `flashLoanModule` has not been initialized yet",
        "returns": {
          "_0": "Surplus buffer value at the end of the call",
          "_1": "Bad debt value at the end of the call"
        }
      },
      "initialize(address,address)": {
        "params": {
          "_core": "Address of the `CoreBorrow` contract of the module",
          "_stablecoin": "Address of the stablecoin"
        }
      },
      "isGovernor(address)": {
        "details": "Access control is only kept in the `CoreBorrow` contract",
        "params": {
          "admin": "Address to check"
        },
        "returns": {
          "_0": "Whether the address has the governor role"
        }
      },
      "isGovernorOrGuardian(address)": {
        "details": "Access control is only kept in the `CoreBorrow` contract which means that this function queries the `CoreBorrow` contract",
        "params": {
          "admin": "Address to check"
        },
        "returns": {
          "_0": "Whether the address has the guardian or the governor role"
        }
      },
      "isVaultManager(address)": {
        "params": {
          "_vaultManager": "Address to check"
        },
        "returns": {
          "_0": "Whether the address has been initialized or not"
        }
      },
      "pushSurplus()": {
        "details": "It makes sure to fetch the surplus from all the contracts handled by this treasury to avoid the situation where rewards are still distributed to governance even though a `VaultManager` has made a big lossTypically this function is to be called once every week by a keeper to distribute rewards to veANGLE holders`stablecoin` must be an AgToken and hence `transfer` reverts if the call is not successful",
        "returns": {
          "governanceAllocation": "Amount transferred to governance"
        }
      },
      "recoverERC20(address,address,uint256)": {
        "details": "It is impossible to recover the stablecoin of the protocol if there is some bad debt for itIn this case, the function makes sure to fetch the surplus/bad debt from all the `VaultManager` contracts and from the flash loan moduleIf the token to recover is the stablecoin, tokens recovered are fetched from the surplus and not from the `surplusBuffer`",
        "params": {
          "amountToRecover": "Amount of collateral to transfer",
          "to": "Address of the contract to send collateral to",
          "tokenAddress": "Address of the token to recover"
        }
      },
      "removeMinter(address)": {
        "params": {
          "minter": "Minter address to remove"
        }
      },
      "removeVaultManager(address)": {
        "details": "A removed `VaultManager` loses its minter right on the stablecoin",
        "params": {
          "vaultManager": "`VaultManager` contract to remove"
        }
      },
      "setCore(address)": {
        "details": "This function should typically be called on all treasury contracts after the `setCore` function has been called on the `CoreBorrow` contractOne sanity check that can be performed here is to verify whether at least the governor calling the contract is still a governor in the new core"
      },
      "setFlashLoanModule(address)": {
        "details": "This function removes the minting right to the old flash loan module and grants it to the new module",
        "params": {
          "_flashLoanModule": "Reference to the new flash loan module"
        }
      },
      "setSurplusForGovernance(uint64)": {
        "details": "To pause surplus distribution, governance needs to set a zero value for `surplusForGovernance` which means",
        "params": {
          "_surplusForGovernance": "New value of the parameter"
        }
      },
      "setSurplusManager(address)": {
        "params": {
          "_surplusManager": "New address responsible for handling the surplus"
        }
      },
      "setTreasury(address)": {
        "details": "This function is basically a way to remove rights to this contract and grant them to a new oneIt could be used to set a new core contract",
        "params": {
          "_treasury": "New treasury address for this stablecoin"
        }
      },
      "updateBadDebt(uint256)": {
        "details": "If the protocol has made a loss and managed to make some profits to recover for this loss (through a program like Olympus Pro), then this function needs to be called`badDebt` is simply reduced here by burning stablecoinsIt is impossible to burn more than the `badDebt` otherwise this function could be used to manipulate the `surplusBuffer` and hence the amount going to governance",
        "params": {
          "amount": "Amount to reduce the bad debt of"
        },
        "returns": {
          "badDebtValue": "Value of the bad debt at the end of the call"
        }
      }
    },
    "title": "Treasury",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BASE_PARAMS()": {
        "notice": "Base used for parameter computation"
      },
      "addMinter(address)": {
        "notice": "Adds a new minter for the stablecoin"
      },
      "addVaultManager(address)": {
        "notice": "Adds a new `VaultManager`"
      },
      "badDebt()": {
        "notice": "Amount of bad debt (unbacked stablecoin) accumulated across all `VaultManager` contracts linked to this stablecoin"
      },
      "core()": {
        "notice": "Reference to the `CoreBorrow` contract of the module which handles all AccessControl logic"
      },
      "fetchSurplusFromAll()": {
        "notice": "Fetches the surplus accrued across all the `VaultManager` contracts controlled by this `Treasury` contract as well as from the fees of the `FlashLoan` module"
      },
      "fetchSurplusFromFlashLoan()": {
        "notice": "Fetches the surplus accrued in the flash loan module and updates the `surplusBuffer`"
      },
      "flashLoanModule()": {
        "notice": "Flash Loan Module with a minter right on the stablecoin"
      },
      "initialize(address,address)": {
        "notice": "Initializes the treasury contract"
      },
      "isGovernor(address)": {
        "notice": "Checks whether a given address has the  governor role"
      },
      "isGovernorOrGuardian(address)": {
        "notice": "Checks whether a given address has the guardian or the governor role"
      },
      "isVaultManager(address)": {
        "notice": "Checks whether a given address has well been initialized in this contract as a `VaultManager``"
      },
      "pushSurplus()": {
        "notice": "Pushes the surplus buffer to the `surplusManager` contract"
      },
      "recoverERC20(address,address,uint256)": {
        "notice": "Allows to recover any ERC20 token, including the stablecoin handled by this contract, and to send it to a contract"
      },
      "removeMinter(address)": {
        "notice": "Removes a minter from the stablecoin contract"
      },
      "removeVaultManager(address)": {
        "notice": "Removes a `VaultManager`"
      },
      "setCore(address)": {
        "notice": "Sets a new `core` contract"
      },
      "setFlashLoanModule(address)": {
        "notice": "Sets a new flash loan module for this stablecoin"
      },
      "setSurplusForGovernance(uint64)": {
        "notice": "Sets the `surplusForGovernance` parameter"
      },
      "setSurplusManager(address)": {
        "notice": "Sets the `surplusManager` contract responsible for handling the surplus of the protocol"
      },
      "setTreasury(address)": {
        "notice": "Changes the treasury contract and communicates this change to all `VaultManager` contract"
      },
      "stablecoin()": {
        "notice": "Stablecoin handled by this `treasury` contract"
      },
      "surplusBuffer()": {
        "notice": "Surplus amount accumulated by the contract waiting to be distributed to governance. Technically only a share of this `surplusBuffer` will go to governance. Once a share of the surplus buffer has been given to governance, then this surplus is reset"
      },
      "surplusForGovernance()": {
        "notice": "Share of the `surplusBuffer` distributed to governance (in `BASE_PARAMS`)"
      },
      "surplusManager()": {
        "notice": "Address responsible for handling the surplus made by the treasury"
      },
      "updateBadDebt(uint256)": {
        "notice": "Updates the bad debt of the protocol in case where the protocol has accumulated some revenue from an external source"
      },
      "vaultManagerList(uint256)": {
        "notice": "List of the accepted `VaultManager` of the protocol"
      },
      "vaultManagerMap(address)": {
        "notice": "Maps an address to 1 if it was initialized as a `VaultManager` contract"
      }
    },
    "notice": "Treasury of Angle Borrowing Module doing the accounting across all VaultManagers for a given stablecoin",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 772,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 775,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 28552,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "core",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ICoreBorrow)14261"
      },
      {
        "astId": 28556,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "flashLoanModule",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IFlashAngle)14301"
      },
      {
        "astId": 28560,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "stablecoin",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IAgToken)14106"
      },
      {
        "astId": 28563,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "surplusManager",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 28567,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "vaultManagerList",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 28572,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "vaultManagerMap",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 28575,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "badDebt",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 28578,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "surplusBuffer",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 28581,
        "contract": "contracts/treasury/Treasury.sol:Treasury",
        "label": "surplusForGovernance",
        "offset": 0,
        "slot": "8",
        "type": "t_uint64"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAgToken)14106": {
        "encoding": "inplace",
        "label": "contract IAgToken",
        "numberOfBytes": "20"
      },
      "t_contract(ICoreBorrow)14261": {
        "encoding": "inplace",
        "label": "contract ICoreBorrow",
        "numberOfBytes": "20"
      },
      "t_contract(IFlashAngle)14301": {
        "encoding": "inplace",
        "label": "contract IFlashAngle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}