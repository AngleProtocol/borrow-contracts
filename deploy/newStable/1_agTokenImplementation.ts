import { ChainId, registry } from '@angleprotocol/sdk';
import { DeployFunction } from 'hardhat-deploy/types';
import yargs from 'yargs';

import { TransparentUpgradeableProxy, TransparentUpgradeableProxy__factory } from '../../typechain';
import { forkedChain, immutableCreate2Factory, minedAddress } from '../constants/constants';

const argv = yargs.env('').boolean('ci').parseSync();

const func: DeployFunction = async ({ deployments, ethers, network }) => {
  const { deploy } = deployments;
  const { deployer } = await ethers.getNamedSigners();
  const json = await import('../../scripts/vanity.json');

  let implementationName: string;
  let proxyAdmin: string;

  if (network.config.chainId == 1 || (!network.live && (forkedChain as ChainId) === ChainId.MAINNET)) {
    implementationName = 'AgToken';
    proxyAdmin = registry(ChainId.MAINNET)?.ProxyAdmin!;
  } else if (!network.live && (forkedChain as ChainId) != ChainId.MAINNET) {
    implementationName = 'AgTokenSideChainMultiBridge';
    proxyAdmin = registry(forkedChain)?.ProxyAdmin!;
  } else {
    implementationName = 'AgTokenSideChainMultiBridge';
    proxyAdmin = registry(network.config.chainId as ChainId)?.ProxyAdmin!;
  }

  console.log(`Now deploying the implementation for AgToken on ${network.name}`);
  console.log(`Using implementation ${implementationName}`);

  await deploy(`${implementationName}_Implementation`, {
    contract: implementationName,
    from: deployer.address,
    args: [],
    log: !argv.ci,
  });
  const agTokenImplementation = (await deployments.get(`${implementationName}_Implementation`)).address;

  // Init code for TransparentUpgradeableProxy with as an implementation the IMMUTABLE_CREATE2_FACTORY_ADDRESS and an owner the deployer
  // If changing the deployer, we need to update this initCode
  const initCode =
    '';

  const immutableCreate2Interface = new ethers.utils.Interface([
    'function safeCreate2(bytes32 salt, bytes memory initCode) external payable returns (address deploymentAddress)',
    'function findCreate2Address(bytes32 salt,bytes calldata initCode) external view returns (address deploymentAddress)',
  ]);
  const immutableCreate2 = new ethers.Contract(immutableCreate2Factory, immutableCreate2Interface, deployer);
  const computedAddress = await immutableCreate2.findCreate2Address(json.salt, initCode);
  if (computedAddress != minedAddress) throw Error('Invalid Mined address');
  console.log(`Deploying agToken at the address ${computedAddress}`);
  await (await immutableCreate2.safeCreate2(json.salt, initCode)).wait();
  console.log('agToken deployed');
  const agToken = new ethers.Contract(
    minedAddress,
    TransparentUpgradeableProxy__factory.createInterface(),
    deployer,
  ) as TransparentUpgradeableProxy;
  console.log('Upgrading the implementation');
  await (await agToken.upgradeTo(agTokenImplementation)).wait();
  console.log('Success');
  console.log('Changing the admin');
  await (await agToken.changeAdmin(proxyAdmin)).wait();
  console.log('Success');
  console.log('');
};

func.tags = ['agTokenNewStable'];
func.dependencies = ['coreNewStable'];
export default func;
